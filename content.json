{"meta":{"title":"hankeke","subtitle":"一面风情深有韵，半笺娇恨寄幽怀。","description":null,"author":"hankeke","url":"https://www.violetoj.com"},"pages":[{"title":"404","date":"2019-03-12T12:50:15.000Z","updated":"2019-03-18T09:19:09.005Z","comments":false,"path":"/404.html","permalink":"https://www.violetoj.com//404.html","excerpt":"","text":"&#x4F60;&#x53EF;&#x80FD;&#x8F93;&#x9519;&#x4E86;&#x94FE;&#x63A5;&#x3002; &#x4E0D;&#x7136;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x5F88;&#x597D;&#x5947;&#x554A;&#xFF0C;&#x4F60;&#x662F;&#x600E;&#x4E48;&#x70B9;&#x8FDB;&#x6765;&#x7684;&#xFF1F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"关于","date":"2019-03-12T11:29:33.000Z","updated":"2019-03-18T09:21:51.091Z","comments":true,"path":"about/index.html","permalink":"https://www.violetoj.com/about/index.html","excerpt":"","text":"&#x4E00;&#x4E2A;&#x6B63;&#x5728;&#x594B;&#x6597;&#x7684; OIer&#x3002; &#x73B0;&#x5728;&#x5C31;&#x8BFB;&#x4E8E;&#x6C5F;&#x82CF;&#x7701;&#x6DEE;&#x9634;&#x4E2D;&#x5B66;&#x3002; &#x662F;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x68A6;&#x60F3;&#x6CA1;&#x6709;&#x5B9E;&#x529B;&#x7684; OIer&#x3002; &#x6B22;&#x8FCE;&#x52A0;&#x5404;&#x8DEF;&#x795E;&#x4ED9;&#x6765;&#x6307;&#x5BFC;&#x4E00;&#x4E0B;&#x5C0F;&#x849F;&#x84BB;&#xFF0C;&#x5C06;&#x4E0D;&#x80DC;&#x611F;&#x6FC0;&#x3002; QQ &#x53F7;&#x662F;&#xFF1A; 1131938614 &#x522B;&#x7684;&#x53EF;&#x80FD;&#x4F1A;&#x9700;&#x8981;&#x7684;&#x4FE1;&#x606F;&#x5728;&#x5DE6;&#x8FB9;&#x90FD;&#x6709;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-03-12T11:55:03.633Z","updated":"2019-03-12T11:55:03.633Z","comments":true,"path":"tags/index.html","permalink":"https://www.violetoj.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2019-03-12T11:57:09.000Z","updated":"2019-03-12T12:31:56.690Z","comments":true,"path":"friends/index.html","permalink":"https://www.violetoj.com/friends/index.html","excerpt":"","text":"&#x540C;&#x5C4A; OIer Link ForwardFuture fluttersunny &#x503E;&#x5C18; &#x5B66;&#x957F; Link yanQval zcysky &#x8427;&#x6608;&#x9ECE; HolyK document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"钗头凤","slug":"钗头凤","date":"2019-03-23T12:02:29.000Z","updated":"2019-03-25T12:58:33.140Z","comments":true,"path":"2019/03/23/钗头凤/","link":"","permalink":"https://www.violetoj.com/2019/03/23/钗头凤/","excerpt":"首先说一些可能会破坏这里的诗词的美感的话：今晚尽管省选快临近了，但是由于一些特殊的原因，还是不太愿意写题目。我曾经说过，诗词是唯一可以在我伤心的时候安慰我的东西。 陆游是我最喜欢的诗人之一，尽管他是以爱国诗人的身份而流传至今的，但是我也十分感动于他和他的首个妻子，当时也是一代才女的唐婉的故事。 这段故事我是不太想讲了，网络上可以说是到处都可以找到了，作为理科生，以我的文采自然是不会讲得太出色的。真正感动我的还是这段故事里面的一首首诗词。 本来，在初中，我并不对诗词这种东西有太多的爱好的。但是在暑假，闲时偶然中翻到小升初暑假的时候买的一本书，当时自从买来看了几页，就再也没有看了。这本书就是李元洛的《宋词之旅——曾是惊鸿照影来》，而我随意翻开的第一页，就是这段故事的一页。","text":"&#x9996;&#x5148;&#x8BF4;&#x4E00;&#x4E9B;&#x53EF;&#x80FD;&#x4F1A;&#x7834;&#x574F;&#x8FD9;&#x91CC;&#x7684;&#x8BD7;&#x8BCD;&#x7684;&#x7F8E;&#x611F;&#x7684;&#x8BDD;&#xFF1A;&#x4ECA;&#x665A;&#x5C3D;&#x7BA1;&#x7701;&#x9009;&#x5FEB;&#x4E34;&#x8FD1;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x8FD8;&#x662F;&#x4E0D;&#x592A;&#x613F;&#x610F;&#x5199;&#x9898;&#x76EE;&#x3002;&#x6211;&#x66FE;&#x7ECF;&#x8BF4;&#x8FC7;&#xFF0C;&#x8BD7;&#x8BCD;&#x662F;&#x552F;&#x4E00;&#x53EF;&#x4EE5;&#x5728;&#x6211;&#x4F24;&#x5FC3;&#x7684;&#x65F6;&#x5019;&#x5B89;&#x6170;&#x6211;&#x7684;&#x4E1C;&#x897F;&#x3002; &#x9646;&#x6E38;&#x662F;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x8BD7;&#x4EBA;&#x4E4B;&#x4E00;&#xFF0C;&#x5C3D;&#x7BA1;&#x4ED6;&#x662F;&#x4EE5;&#x7231;&#x56FD;&#x8BD7;&#x4EBA;&#x7684;&#x8EAB;&#x4EFD;&#x800C;&#x6D41;&#x4F20;&#x81F3;&#x4ECA;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4E5F;&#x5341;&#x5206;&#x611F;&#x52A8;&#x4E8E;&#x4ED6;&#x548C;&#x4ED6;&#x7684;&#x9996;&#x4E2A;&#x59BB;&#x5B50;&#xFF0C;&#x5F53;&#x65F6;&#x4E5F;&#x662F;&#x4E00;&#x4EE3;&#x624D;&#x5973;&#x7684;&#x5510;&#x5A49;&#x7684;&#x6545;&#x4E8B;&#x3002; &#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x6211;&#x662F;&#x4E0D;&#x592A;&#x60F3;&#x8BB2;&#x4E86;&#xFF0C;&#x7F51;&#x7EDC;&#x4E0A;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x5230;&#x5904;&#x90FD;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x4F5C;&#x4E3A;&#x7406;&#x79D1;&#x751F;&#xFF0C;&#x4EE5;&#x6211;&#x7684;&#x6587;&#x91C7;&#x81EA;&#x7136;&#x662F;&#x4E0D;&#x4F1A;&#x8BB2;&#x5F97;&#x592A;&#x51FA;&#x8272;&#x7684;&#x3002;&#x771F;&#x6B63;&#x611F;&#x52A8;&#x6211;&#x7684;&#x8FD8;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x91CC;&#x9762;&#x7684;&#x4E00;&#x9996;&#x9996;&#x8BD7;&#x8BCD;&#x3002; &#x672C;&#x6765;&#xFF0C;&#x5728;&#x521D;&#x4E2D;&#xFF0C;&#x6211;&#x5E76;&#x4E0D;&#x5BF9;&#x8BD7;&#x8BCD;&#x8FD9;&#x79CD;&#x4E1C;&#x897F;&#x6709;&#x592A;&#x591A;&#x7684;&#x7231;&#x597D;&#x7684;&#x3002;&#x4F46;&#x662F;&#x5728;&#x6691;&#x5047;&#xFF0C;&#x95F2;&#x65F6;&#x5076;&#x7136;&#x4E2D;&#x7FFB;&#x5230;&#x5C0F;&#x5347;&#x521D;&#x6691;&#x5047;&#x7684;&#x65F6;&#x5019;&#x4E70;&#x7684;&#x4E00;&#x672C;&#x4E66;&#xFF0C;&#x5F53;&#x65F6;&#x81EA;&#x4ECE;&#x4E70;&#x6765;&#x770B;&#x4E86;&#x51E0;&#x9875;&#xFF0C;&#x5C31;&#x518D;&#x4E5F;&#x6CA1;&#x6709;&#x770B;&#x4E86;&#x3002;&#x8FD9;&#x672C;&#x4E66;&#x5C31;&#x662F;&#x674E;&#x5143;&#x6D1B;&#x7684;&#x300A;&#x5B8B;&#x8BCD;&#x4E4B;&#x65C5;&#x2014;&#x2014;&#x66FE;&#x662F;&#x60CA;&#x9E3F;&#x7167;&#x5F71;&#x6765;&#x300B;&#xFF0C;&#x800C;&#x6211;&#x968F;&#x610F;&#x7FFB;&#x5F00;&#x7684;&#x7B2C;&#x4E00;&#x9875;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x7684;&#x4E00;&#x9875;&#x3002; &#x9497;&#x5934;&#x51E4;&#x63D0;&#x5230;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#xFF0C;&#x81EA;&#x7136;&#x4E5F;&#x5C31;&#x4E0D;&#x5F97;&#x4E0D;&#x63D0;&#x5230;&#x7684;&#x662F;&#x975E;&#x5E38;&#x6709;&#x540D;&#x7684;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#x4E86;&#x3002; &#x7EA2;&#x9165;&#x624B;&#xFF0C;&#x9EC4;&#x85E4;&#x9152;&#xFF0C;&#x6EE1;&#x57CE;&#x6625;&#x8272;&#x5BAB;&#x5899;&#x67F3;&#x3002;&#x4E1C;&#x98CE;&#x6076;&#xFF0C;&#x6B22;&#x60C5;&#x8584;&#xFF0C;&#x4E00;&#x6000;&#x6101;&#x7EEA;&#xFF0C;&#x51E0;&#x5E74;&#x79BB;&#x7D22;&#xFF1F;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x9519;&#xFF01; &#x6625;&#x5982;&#x65E7;&#xFF0C;&#x4EBA;&#x7A7A;&#x7626;&#xFF0C;&#x6CEA;&#x75D5;&#x7EA2;&#x6D65;&#x9C9B;&#x7EE1;&#x900F;&#x3002;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#xFF0C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x3002;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01; &#x8FD9;&#x662F;&#x9646;&#x6E38;&#x7684;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x770B;&#x80CC;&#x666F;&#x6545;&#x4E8B;&#xFF0C;&#x5149;&#x5149;&#x8BFB;&#x4E0A;&#x53BB;&#xFF0C;&#x5C31;&#x8DB3;&#x77E3;&#x8BA9;&#x4EBA;&#x611F;&#x52A8;&#x4E86;&#x3002;&#x8FD9;&#x4EE4;&#x4EBA;&#x4F24;&#x6000;&#x7684;&#x65CB;&#x5F8B;&#xFF0C;&#x548C;&#x53E9;&#x51FB;&#x4EBA;&#x5FC3;&#x7684;&#x6587;&#x5B57;&#x5185;&#x5BB9;&#xFF0C;&#x5C31;&#x5DF2;&#x7ECF;&#x628A;&#x6211;&#x6DF1;&#x6DF1;&#x5730;&#x5438;&#x5F15;&#x5230;&#x4E86;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x91CC;&#x9762;&#x6765;&#x4E86;&#x3002; &#x6211;&#x66F4;&#x662F;&#x4ECE;&#x6765;&#x4E5F;&#x6CA1;&#x6709;&#x60F3;&#x5230;&#xFF0C;&#x8FD9;&#x9996;&#x80FD;&#x4F18;&#x7F8E;&#x7684;&#x5199;&#x7231;&#x60C5;&#x7684;&#x8BCD;&#xFF0C;&#x8BCD;&#x4EBA;&#x7ADF;&#x7136;&#x662F;&#x9646;&#x6E38;&#xFF0C;&#x8FD9;&#x4F4D;&#x4E00;&#x751F;&#x4E3A;&#x56FD;&#x5BB6;&#x4E3A;&#x5FE7;&#x6101;&#x7740;&#x7684;&#x8BD7;&#x4EBA;&#x3002;&#x4F46;&#x8FD9;&#x4E5F;&#x4E0D;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x4E0E;&#x9646;&#x6E38;&#x540C;&#x65F6;&#x671F;&#x7684;&#x4E00;&#x751F;&#x6E34;&#x671B;&#x6297;&#x91D1;&#x7684;&#x7231;&#x56FD;&#x8BCD;&#x4EBA;&#x8F9B;&#x5F03;&#x75BE;&#xFF0C;&#x4E5F;&#x5199;&#x51FA;&#x8FC7;&#x201C;&#x4F17;&#x91CC;&#x5BFB;&#x4ED6;&#x5343;&#x767E;&#x5EA6;&#x201D;&#x8FD9;&#x6837;&#x7684;&#x8BCD;&#x3002; &#x7136;&#x540E;&#x5C31;&#x9759;&#x4E0B;&#x5FC3;&#x6765;&#xFF0C;&#x9605;&#x8BFB;&#x4E86;&#x8FD9;&#x4E00;&#x6BB5;&#x6545;&#x4E8B;&#xFF0C;&#x4E5F;&#x611F;&#x53D7;&#x5230;&#x4E86;&#x90A3;&#x79CD;&#x65E0;&#x6CD5;&#x8A00;&#x8BF4;&#x7684;&#x590D;&#x6742;&#x7684;&#x60C5;&#x611F;&#x3002; &#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x597D;&#x8BF4;&#x8FD9;&#x4EF6;&#x60B2;&#x5267;&#xFF0C;&#x5230;&#x5E95;&#x662F;&#x9646;&#x6E38;&#x3001;&#x5510;&#x5A49;&#x3001;&#x9646;&#x6E38;&#x6BCD;&#x4EB2;&#x3001;&#x8D75;&#x58EB;&#x7A0B;&#x8FD9;&#x56DB;&#x4E2A;&#x4EBA;&#x8C01;&#x7684;&#x9519;&#xFF0C;&#x6BD5;&#x7ADF;&#x662F;&#x5728;&#x54EA;&#x4E2A;&#x793E;&#x4F1A;&#x73AF;&#x5883;&#x4E0A;&#xFF0C;&#x6216;&#x8BB8;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x8BCD;&#x4E2D;&#x7684;&#x6DF1;&#x6DF1;&#x7684;&#x201C;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x201D;&#x5C31;&#x662F;&#x5728;&#x6168;&#x53F9;&#x5C01;&#x5EFA;&#x73AF;&#x5883;&#x9020;&#x6210;&#x7684;&#x60B2;&#x54C0;&#x5427;&#x3002; &#x8BCD;&#x4EBA;&#x5148;&#x662F;&#x5BF9;&#x5A5A;&#x65F6;&#x7684;&#x7F8E;&#x597D;&#x573A;&#x666F;&#x505A;&#x4E86;&#x63CF;&#x8FF0;&#xFF0C;&#x7136;&#x540E;&#x753B;&#x98CE;&#x9661;&#x8F6C;&#xFF0C;&#x7ACB;&#x523B;&#x5199;&#x51FA;&#x4E86;&#x88AB;&#x8FEB;&#x79BB;&#x5A5A;&#x540E;&#x7684;&#x5FE7;&#x6101;&#x3002;&#x8FD9;&#x79CD;&#x5F3A;&#x70C8;&#x7684;&#x5BF9;&#x6BD4;&#x8DB3;&#x4EE5;&#x8BA9;&#x4EBA;&#x4E3A;&#x4E4B;&#x540C;&#x611F;&#x60B2;&#x54C0;&#x4E86;&#x3002; &#x4F46;&#x662F;&#x968F;&#x540E;&#x7684;&#x63CF;&#x5199;&#x5374;&#x53C8;&#x8DB3;&#x77E3;&#x8BA9;&#x4EBA;&#x843D;&#x6CEA;&#x3002; &#x6625;&#x5982;&#x65E7;&#xFF0C;&#x4EBA;&#x7A7A;&#x7626;&#xFF0C;&#x6CEA;&#x75D5;&#x7EA2;&#x6D65;&#x9C9B;&#x7EE1;&#x900F;&#x3002;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#xFF0C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x3002;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x611F;&#x53D7;&#x5230;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x4E24;&#x4E2A;&#x4EBA;&#x5171;&#x540C;&#x7684;&#x6101;&#x7EEA;&#xFF0C;&#x5374;&#x53C8;&#x65E0;&#x6CD5;&#x5B9E;&#x73B0;&#x7684;&#x60B2;&#x54C0;&#x3002;&#x4E3A;&#x4E00;&#x79CD;&#x65E0;&#x6CD5;&#x8A00;&#x8BF4;&#x7684;&#x5FE7;&#x6101;&#xFF0C;&#x800C;&#x641E;&#x5F97;&#x201C;&#x4EBA;&#x7A7A;&#x7626;&#x201D;&#xFF0C;&#x66F4;&#x662F;&#x53EF;&#x4EE5;&#x6620;&#x886C;&#x540E;&#x9762;&#x7684;&#x201C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#x201D;&#xFF0C;&#x4F46;&#x662F;&#x53C8;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x6C38;&#x8FDC;&#x4E5F;&#x90FD;&#x53EA;&#x6709;&#x65E0;&#x9650;&#x7684;&#x54C0;&#x6101;&#x4E86;&#x5427;&#x3002;&#x60F3;&#x7740;&#x5F53;&#x5E74;&#x7684;&#x59BB;&#x5B50;&#x5982;&#x4ECA;&#x5374;&#x5982;&#x6B64;&#x5730;&#x6D88;&#x7626;&#xFF0C;&#x5374;&#x53C8;&#x65E0;&#x80FD;&#x4E3A;&#x529B;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x5185;&#x5FC3;&#x8BE5;&#x662F;&#x6709;&#x591A;&#x75DB;&#x82E6;&#x554A;&#xFF01; &#x201C;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#x201D;&#xFF0C;&#x82B1;&#x843D;&#x7684;&#x65F6;&#x8282;&#xFF0C;&#x6C38;&#x8FDC;&#x90FD;&#x662F;&#x53E4;&#x4EE3;&#x6700;&#x611F;&#x4F24;&#x7684;&#x65F6;&#x8282;&#x3002;&#x6843;&#x82B1;&#x843D;&#x53BB;&#xFF0C;&#x7559;&#x4E0B;&#x7684;&#x53EA;&#x6709;&#x518D;&#x4E5F;&#x4E0D;&#x4F1A;&#x6709;&#x4EBA;&#x5149;&#x987E;&#x7684;&#x6C60;&#x9601;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x201C;&#x6843;&#x82B1;&#x201D;&#xFF0C;&#x53C8;&#x4EC5;&#x4EC5;&#x662F;&#x6307;&#x82B1;&#x5417;&#xFF1F; &#x201C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x201D;&#xFF0C;&#x8FD9;&#x6050;&#x6015;&#x662F;&#x7528;&#x4E00;&#x53E5;&#x8BDD;&#xFF0C;&#x6982;&#x62EC;&#x6574;&#x573A;&#x60B2;&#x5267;&#x4E86;&#x3002;&#x5982;&#x679C;&#x8BF4;&#x524D;&#x9762;&#x7684;&#x4EC5;&#x4EC5;&#x662F;&#x6E32;&#x67D3;&#x7684;&#x4E00;&#x79CD;&#x54C0;&#x53F9;&#x7684;&#x6C1B;&#x56F4;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x76F4;&#x63A5;&#x624E;&#x4E86;&#x4EBA;&#x7684;&#x5FC3;&#x91CC;&#xFF0C;&#x4F3C;&#x4E4E;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8BFB;&#x51FA;&#x8BCD;&#x4EBA;&#x5185;&#x5FC3;&#x7684;&#x75DB;&#x82E6;&#x4E0E;&#x65E0;&#x5948;&#x5427;&#x3002; &#x800C;&#x540E;&#x9762;&#x7684;&#x201C;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x201D;&#xFF0C;&#x8BCD;&#x4EBA;&#x5185;&#x5FC3;&#x7684;&#x65E0;&#x5948;&#x4E0E;&#x75DB;&#x82E6;&#x90FD;&#x53EF;&#x4EE5;&#x4ECE;&#x8FD9;&#x4E09;&#x4E2A;&#x5B57;&#x91CC;&#x9762;&#x770B;&#x51FA;&#x4E86;&#x3002;&#x8BCD;&#x4EBA;&#x5373;&#x4F7F;&#x5FC3;&#x4E2D;&#x518D;&#x60F3;&#x5FF5;&#x5979;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x80FD;&#x529B;&#x6539;&#x53D8;&#x8FD9;&#x4E00;&#x5207;&#x3002;&#x53EA;&#x6050;&#x6015;&#x8FD9;&#x4E00;&#x8F88;&#x5B50;&#x4E5F;&#x518D;&#x4E0D;&#x80FD;&#x76F8;&#x89C1;&#x4E86;&#x5427;&#x3002; &#x636E;&#x8BF4;&#xFF0C;&#x7B2C;&#x4E8C;&#x5E74;&#xFF0C;&#x5510;&#x5A49;&#x518D;&#x6E38;&#x6C88;&#x56ED;&#xFF0C;&#x770B;&#x89C1;&#x4E86;&#x4E0A;&#x9762;&#x90A3;&#x9996;&#x9646;&#x6E38;&#x9898;&#x5728;&#x58C1;&#x4E0A;&#x7684;&#x8BCD;&#xFF0C;&#x4F24;&#x5FC3;&#x4E4B;&#x611F;&#x518D;&#x6B21;&#x6D8C;&#x4E0A;&#x5FC3;&#x5934;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x4E0D;&#x80FD;&#x5F53;&#x7740;&#x5BB6;&#x4EC6;&#x7684;&#x9762;&#x6D41;&#x6CEA;&#xFF0C;&#x65E0;&#x5948;&#xFF0C;&#x53EA;&#x80FD;&#x5728;&#x5899;&#x58C1;&#x4E0A;&#x4E5F;&#x9898;&#x4E0B;&#x81EA;&#x5DF1;&#x7684;&#x548C;&#x8BCD;&#xFF1A; &#x4E16;&#x60C5;&#x8584;&#xFF0C;&#x4EBA;&#x60C5;&#x6076;&#xFF0C;&#x96E8;&#x9001;&#x9EC4;&#x660F;&#x82B1;&#x6613;&#x843D;&#x3002;&#x6653;&#x98CE;&#x5E72;&#xFF0C;&#x6CEA;&#x75D5;&#x6B8B;&#xFF0C;&#x6B32;&#x7B3A;&#x5FC3;&#x4E8B;&#xFF0C;&#x72EC;&#x8BED;&#x659C;&#x9611;&#x3002;&#x96BE;&#xFF01;&#x96BE;&#xFF01;&#x96BE;&#xFF01; &#x4EBA;&#x6210;&#x5404;&#xFF0C;&#x4ECA;&#x975E;&#x6628;&#xFF0C;&#x75C5;&#x9B42;&#x5E38;&#x4F3C;&#x79CB;&#x5343;&#x7D22;&#x3002;&#x89D2;&#x58F0;&#x5BD2;&#xFF0C;&#x591C;&#x9611;&#x73CA;&#xFF0C;&#x6015;&#x4EBA;&#x5BFB;&#x95EE;&#xFF0C;&#x54BD;&#x6CEA;&#x88C5;&#x6B22;&#x3002;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x7792;&#xFF01; &#x5C3D;&#x7BA1;&#x6709;&#x4EBA;&#x8003;&#x8BC1;&#x8BF4;&#x8FD9;&#x9996;&#x8BCD;&#x4EC5;&#x4EC5;&#x662F;&#x540E;&#x4EBA;&#x4F2A;&#x4F5C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x5B81;&#x613F;&#x76F8;&#x4FE1;&#x8FD9;&#x662F;&#x5510;&#x5A49;&#x7684;&#x771F;&#x624B;&#x7B14;&#x2014;&#x2014;&#x8FD9;&#x662F;&#x8FD9;&#x6BB5;&#x60B2;&#x60E8;&#x7684;&#x7231;&#x60C5;&#x6545;&#x4E8B;&#x7684;&#x4E00;&#x4E2A;&#x9AD8;&#x6F6E;&#x3002; &#x201C;&#x4E16;&#x60C5;&#x8584;&#xFF0C;&#x4EBA;&#x60C5;&#x6076;&#x201D;&#xFF0C;&#x5510;&#x5A49;&#x5728;&#x611F;&#x53F9;&#x4EBA;&#x4E16;&#x7684;&#x4E0D;&#x516C;&#xFF0C;&#x4E5F;&#x80FD;&#x8BFB;&#x51FA;&#x5979;&#x81EA;&#x5DF1;&#x5BF9;&#x4E07;&#x6076;&#x7684;&#x5C01;&#x5EFA;&#x793C;&#x6559;&#x7684;&#x6028;&#x6068;&#x3002;&#x201C;&#x96E8;&#x9001;&#x9EC4;&#x660F;&#x82B1;&#x6613;&#x843D;&#x201D;&#xFF0C;&#x81EA;&#x5DF1;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x793E;&#x4F1A;&#x73AF;&#x5883;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x98CE;&#x96E8;&#x4E2D;&#xFF0C;&#x5C31;&#x50CF;&#x4E00;&#x6735;&#x6447;&#x6447;&#x6B32;&#x5760;&#x7684;&#x82B1;&#x6735;&#xFF0C;&#x5373;&#x4F7F;&#x518D;&#x7F8E;&#x4E3D;&#x3001;&#x6709;&#x624D;&#x534E;&#xFF0C;&#x4E5F;&#x7EC8;&#x5F52;&#x4F1A;&#x98CE;&#x96E8;&#x5439;&#x843D;&#x3002; &#x201C;&#x6653;&#x98CE;&#x5E72;&#xFF0C;&#x6CEA;&#x75D5;&#x6B8B;&#xFF0C;&#x6B32;&#x7B3A;&#x5FC3;&#x4E8B;&#xFF0C;&#x72EC;&#x8BED;&#x659C;&#x9611;&#x3002;&#x201D;&#x5979;&#x5B9B;&#x5982;&#x54ED;&#x4E86;&#x4E00;&#x6574;&#x591C;&#xFF0C;&#x4F46;&#x662F;&#x5230;&#x4E86;&#x521D;&#x6653;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x5F7B;&#x5E95;&#x64E6;&#x5E72;&#x81EA;&#x5DF1;&#x7684;&#x6CEA;&#x6C34;&#x3002;&#x5510;&#x5A49;&#x5BF9;&#x4E8E;&#x8FD9;&#x6BB5;&#x66FE;&#x7ECF;&#x5F88;&#x7F8E;&#x597D;&#x7684;&#x56DE;&#x5FC6;&#xFF0C;&#x73B0;&#x5728;&#x80FD;&#x611F;&#x53D7;&#x5230;&#x7684;&#xFF0C;&#x53EA;&#x6709;&#x65E0;&#x9650;&#x7684;&#x60B2;&#x54C0;&#x548C;&#x6168;&#x53F9;&#x3002;&#x6211;&#x4E00;&#x76F4;&#x89C9;&#x5F97;&#xFF0C;&#x72EC;&#x81EA;&#x51ED;&#x9611;&#xFF0C;&#x662F;&#x4EE5;&#x4E2A;&#x975E;&#x5E38;&#x4F24;&#x611F;&#x7684;&#x610F;&#x8C61;&#x3002; &#x201C;&#x4EBA;&#x6210;&#x5404;&#xFF0C;&#x4ECA;&#x975E;&#x6628;&#xFF0C;&#x75C5;&#x9B42;&#x5E38;&#x4F3C;&#x79CB;&#x5343;&#x7D22;&#x3002;&#x201D;&#x6628;&#x65E5;&#x7684;&#x7F8E;&#x597D;&#x5DF2;&#x7ECF;&#x4E0D;&#x5728;&#xFF0C;&#x7559;&#x4E0B;&#x7684;&#x53EA;&#x6709;&#x81EA;&#x5DF1;&#x5E38;&#x5E74;&#x56E0;&#x5FE7;&#x6101;&#x800C;&#x5E26;&#x75C5;&#x7684;&#x8EAB;&#x4F53;&#x3002;&#x636E;&#x8BF4;&#x5510;&#x5A49;&#x5728;&#x5199;&#x5B8C;&#x8FD9;&#x9996;&#x8BCD;&#x4EE5;&#x540E;&#x4E00;&#x5E74;&#xFF0C;&#x5C31;&#x9999;&#x6D88;&#x7389;&#x635F;&#x4E86;&#x3002; &#x201C;&#x89D2;&#x58F0;&#x5BD2;&#xFF0C;&#x591C;&#x9611;&#x73CA;&#xFF0C;&#x6015;&#x4EBA;&#x5BFB;&#x95EE;&#xFF0C;&#x54BD;&#x6CEA;&#x88C5;&#x6B22;&#x3002;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x201D;&#x591C;&#x8272;&#x5373;&#x5C06;&#x7ED3;&#x675F;&#xFF0C;&#x5929;&#x5DF2;&#x7ECF;&#x5FEB;&#x8981;&#x7834;&#x6653;&#xFF0C;&#x81EA;&#x5DF1;&#x5374;&#x53EA;&#x80FD;&#x6536;&#x8D77;&#x4F24;&#x5FC3;&#xFF0C;&#x88C5;&#x51FA;&#x4EC0;&#x4E48;&#x90FD;&#x6CA1;&#x53D1;&#x751F;&#x7684;&#x6837;&#x5B50;&#x3002;&#x8FD9;&#x6837;&#x65E0;&#x7591;&#x6700;&#x75DB;&#x82E6;&#x7684;&#x4E8B;&#x60C5;&#x2014;&#x2014;&#x6CA1;&#x6709;&#x673A;&#x4F1A;&#x4E3A;&#x81EA;&#x5DF1;&#x7684;&#x8FC7;&#x53BB;&#x7684;&#x56DE;&#x5FC6;&#x4E3A;&#x72EC;&#x81EA;&#x843D;&#x6CEA;&#x3002; &#x8FD9;&#x9996;&#x8BCD;&#x7684;&#x97F5;&#x5F8B;&#xFF0C;&#x548C;&#x9646;&#x6E38;&#x7684;&#x90A3;&#x9996;&#x4E00;&#x6837;&#x7684;&#x52A8;&#x4EBA;&#xFF0C;&#x672C;&#x6765;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8BCD;&#x724C;&#x7684;&#xFF0C;&#x53C8;&#x662F;&#x4E00;&#x9996;&#x548C;&#x8BCD;&#xFF0C;&#x8FD9;&#x79CD;&#x54C0;&#x5A49;&#x7684;&#x7F8E;&#x611F;&#x4E5F;&#x540C;&#x6837;&#x53EF;&#x4EE5;&#x8BA9;&#x4EBA;&#x4F3C;&#x4E4E;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x6545;&#x4E8B;&#x91CC;&#x7684;&#x4EBA;&#x7684;&#x90A3;&#x79CD;&#x5FE7;&#x4F24;&#x548C;&#x65E0;&#x5948;&#x7684;&#x611F;&#x89C9;&#x5427;&#x3002; &#x8FD9;&#x4E24;&#x9996;&#x8BCD;&#xFF0C;&#x662F;&#x6700;&#x5148;&#x8BA9;&#x6211;&#x7231;&#x4E0A;&#x8BD7;&#x8BCD;&#x7684;&#xFF0C;&#x8BA9;&#x6211;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x8BD7;&#x8BCD;&#x90A3;&#x79CD;&#x611F;&#x4EBA;&#x7684;&#x65CB;&#x5F8B;&#x7F8E;&#xFF0C;&#x4E30;&#x5BCC;&#x7684;&#x610F;&#x5883;&#x7F8E;&#x3002;&#x4E8E;&#x662F;&#x5728;&#x6574;&#x4E2A;&#x6691;&#x5047;&#xFF0C;&#x6211;&#x66F4;&#x662F;&#x4E00;&#x53E3;&#x6C14;&#x5730;&#x628A;&#x90A3;&#x672C;&#x4E66;&#x76F4;&#x63A5;&#x8BFB;&#x5B8C;&#xFF0C;&#x751A;&#x81F3;&#x5FD8;&#x5374;&#x4E86;&#x65F6;&#x95F4;&#x3002; &#x540E;&#x6765;&#xFF0C;&#x5F53;&#x9646;&#x6E38;&#x5728;&#x65E9;&#x5DF2;&#x95FB;&#x540D;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x58EE;&#x5FD7;&#x96BE;&#x916C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x591A;&#x6B21;&#x6765;&#x5230;&#x4E86;&#x6C88;&#x56ED;&#xFF0C;&#x5199;&#x4E0B;&#x4E86;&#x4E0D;&#x5C11;&#x611F;&#x4EBA;&#x7684;&#x8BD7;&#x3002;&#x5177;&#x4F53;&#x7684;&#x5148;&#x540E;&#x987A;&#x5E8F;&#x6211;&#x4E5F;&#x8BB0;&#x4E0D;&#x6E05;&#x695A;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x6311;&#x51E0;&#x9996;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x3002;&#x4E0D;&#x4F5C;&#x8D4F;&#x6790;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#xFF0C;&#x6709;&#x4E9B;&#x65F6;&#x5019;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x50CF;&#x8FD9;&#x79CD;&#x60B2;&#x54C0;&#x7684;&#x8BD7;&#x8BCD;&#xFF0C;&#x662F;&#x4E0D;&#x5E94;&#x8BE5;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x80FD;&#x591F;&#x505A;&#x51FA;&#x9274;&#x8D4F;&#x7684;&#x3002; 1&#x57CE;&#x4E0A;&#x659C;&#x9633;&#x753B;&#x89D2;&#x54C0;&#xFF0C;&#x6C88;&#x56ED;&#x975E;&#x590D;&#x65E7;&#x6C60;&#x53F0;&#x3002; &#x4F24;&#x5FC3;&#x6865;&#x4E0B;&#x6625;&#x6CE2;&#x7EFF;&#xFF0C;&#x66FE;&#x662F;&#x60CA;&#x9E3F;&#x7167;&#x5F71;&#x6765;&#x3002; 2&#x68A6;&#x65AD;&#x9999;&#x6D88;&#x56DB;&#x5341;&#x5E74;&#xFF0C;&#x6C88;&#x56ED;&#x67F3;&#x8001;&#x4E0D;&#x5439;&#x7EF5;&#x3002; &#x6B64;&#x8EAB;&#x884C;&#x4F5C;&#x7A3D;&#x5C71;&#x571F;&#xFF0C;&#x72B9;&#x540A;&#x9057;&#x8E2A;&#x4E00;&#x6CEB;&#x7136;&#x3002; 3&#x5927;&#x5BB6;&#x77E5;&#x9053;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x4E00;&#x751F;&#x662F;&#x975E;&#x5E38;&#x559C;&#x7231;&#x6885;&#x82B1;&#x7684;&#x3002; &#x8DEF;&#x8FD1;&#x57CE;&#x5357;&#x5DF2;&#x6015;&#x884C;&#xFF0C;&#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x66F4;&#x4F24;&#x60C5;&#x3002; &#x9999;&#x7A7F;&#x5BA2;&#x8896;&#x6885;&#x82B1;&#x5728;&#xFF0C;&#x7EFF;&#x8638;&#x5BFA;&#x6865;&#x6625;&#x6C34;&#x751F;&#x3002; 4&#x57CE;&#x5357;&#x5C0F;&#x964C;&#x53C8;&#x9022;&#x6625;&#xFF0C;&#x53EA;&#x89C1;&#x6885;&#x82B1;&#x4E0D;&#x89C1;&#x4EBA;&#x3002; &#x7389;&#x9AA8;&#x4E45;&#x6210;&#x6CC9;&#x4E0B;&#x571F;&#xFF0C;&#x58A8;&#x75D5;&#x72B9;&#x9501;&#x58C1;&#x95F4;&#x5C18;&#x3002; 5&#x67AB;&#x53F6;&#x521D;&#x4E39;&#x61C8;&#x53F6;&#x9EC4;&#xFF0C;&#x6CB3;&#x9633;&#x6101;&#x9B13;&#x602F;&#x65B0;&#x971C;&#x3002; &#x6797;&#x4EAD;&#x611F;&#x65E7;&#x7A7A;&#x56DE;&#x9996;&#xFF0C;&#x6CC9;&#x8DEF;&#x51ED;&#x8C01;&#x8BF4;&#x65AD;&#x80A0;&#x3002; &#x574F;&#x58C1;&#x9189;&#x9898;&#x5C18;&#x9ED8;&#x9ED8;&#xFF0C;&#x65AD;&#x4E91;&#x5E7D;&#x68A6;&#x4E8B;&#x832B;&#x832B;&#x3002; &#x5E74;&#x6765;&#x5984;&#x5FF5;&#x6D88;&#x9664;&#x5C3D;&#xFF0C;&#x56DE;&#x5411;&#x7985;&#x9F9B;&#x4E00;&#x70B7;&#x9999;&#x3002; 6&#x8FD9;&#x9996;&#x8BD7;&#x7684;&#x771F;&#x5B9E;&#x6027;&#x6709;&#x5F85;&#x8003;&#x8BC1;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x4E0D;&#x91CD;&#x8981;&#xFF0C;&#x6211;&#x771F;&#x7684;&#x559C;&#x6B22;&#x5440;&#xFF01; &#x53EF;&#x601C;&#x60C5;&#x79CD;&#x5C3D;&#x76F8;&#x601D;&#xFF0C;&#x5343;&#x53E4;&#x4F24;&#x5FC3;&#x5BF9;&#x6B64;&#x6C60;&#x3002; &#x6EF4;&#x4E0B;&#x9497;&#x5934;&#x591A;&#x5C11;&#x6CEA;&#xFF0C;&#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x8349;&#x5C24;&#x60B2;&#x3002; 7&#x6700;&#x559C;&#x6B22;&#x7684;&#x3002; &#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x82B1;&#x5982;&#x9526;&#xFF0C;&#x534A;&#x662F;&#x5F53;&#x5E74;&#x8BC6;&#x653E;&#x7FC1;&#x3002; &#x4E5F;&#x4FE1;&#x7F8E;&#x4EBA;&#x7EC8;&#x4F5C;&#x571F;&#xFF0C;&#x4E0D;&#x582A;&#x5E7D;&#x68A6;&#x592A;&#x5306;&#x5306;&#x3002; &#x90A3;&#x4E48;&#x591A;&#x5E74;&#x4E86;&#xFF0C;&#x4E5F;&#x7EC8;&#x4E8E;&#x627F;&#x8BA4;&#x4E86;&#x7F8E;&#x4EBA;&#x5DF2;&#x53BB;&#xFF0C;&#x65E7;&#x65F6;&#x7684;&#x7F8E;&#x597D;&#x4E0D;&#x518D;&#x7684;&#x4E8B;&#x5B9E;&#xFF0C;&#x4E5F;&#x53EA;&#x80FD;&#x54C0;&#x53F9;&#x90A3;&#x4E9B;&#x50CF;&#x68A6;&#x4E00;&#x6837;&#x9690;&#x9690;&#x7EA6;&#x7EA6;&#xFF0C;&#x4E0D;&#x771F;&#x5B9E;&#xFF0C;&#x8FC7;&#x53BB;&#x5F97;&#x592A;&#x5FEB;&#x3002; &#x603B;&#x7ED3;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x7684;&#x7231;&#x60C5;&#x53E4;&#x8BD7;&#x65E0;&#x7591;&#x662F;&#x6700;&#x52A8;&#x4EBA;&#x7684;&#x6545;&#x4E8B;&#x4E4B;&#x4E00;&#xFF0C;&#x51E0;&#x767E;&#x5E74;&#x4EE5;&#x6765;&#xFF0C;&#x4E00;&#x4EE3;&#x4EE3;&#x7684;&#x4EBA;&#x4EEC;&#x90FD;&#x5728;&#x4E3A;&#x8FD9;&#x6BB5;&#x51C4;&#x60E8;&#x7684;&#x7231;&#x60C5;&#x53E4;&#x8BD7;&#x800C;&#x611F;&#x53F9;&#x3002; &#x2014;&#x2014;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x65E0;&#x7591;&#x53C8;&#x662F;&#x5E78;&#x8FD0;&#x7684;&#xFF0C;&#x5728;&#x53E4;&#x4EE3;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x88AB;&#x5F3A;&#x884C;&#x62C6;&#x6563;&#x540E;&#x91CD;&#x9022;&#x4E00;&#x6B21;&#x7684;&#x4EBA;&#x5B9E;&#x5728;&#x662F;&#x5C11;&#xFF0C;&#x800C;&#x80FD;&#x88AB;&#x4EBA;&#x4EEC;&#x5343;&#x53E4;&#x4F20;&#x9882;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x56E0;&#x4E3A;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x7684;&#x624D;&#x534E;&#x3002;&#x800C;&#x88AB;&#x4EBA;&#x4EEC;&#x79F0;&#x4E3A;&#x201C;&#x5343;&#x53E4;&#x4F24;&#x5FC3;&#x201D;&#x7684;&#x8D75;&#x58EB;&#x7A0B;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x7684;&#x53D7;&#x5BB3;&#x8005;&#x4E4B;&#x4E00;&#x3002;&#x4ED6;&#x5728;&#x5510;&#x5A49;&#x6700;&#x51C4;&#x60E8;&#x7684;&#x65F6;&#x5019;&#x6C42;&#x52A9;&#x4E86;&#x5979;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x53EA;&#x80FD;&#x770B;&#x7740;&#x59BB;&#x5B50;&#x4E3A;&#x8FD9;&#x524D;&#x4EFB;&#x4E08;&#x592B;&#x800C;&#x4F24;&#x5FC3;&#xFF0C;&#x81EA;&#x5DF1;&#x51FA;&#x4E86;&#x540C;&#x60C5;&#xFF0C;&#x522B;&#x7684;&#x4EC0;&#x4E48;&#x4E5F;&#x505A;&#x4E0D;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x6837;&#x7684;&#x60B2;&#x54C0;&#x554A;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x9646;&#x6E38;&#x4F5C;&#x4E3A;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x8BD7;&#x4EBA;&#x4E4B;&#x4E00;&#xFF0C;&#x4E5F;&#x5F53;&#x7136;&#x4E0D;&#x53EA;&#x662F;&#x56E0;&#x4E3A;&#x4ED6;&#x548C;&#x5510;&#x5A49;&#x7684;&#x6545;&#x4E8B;&#x540E;&#x7684;&#x8BD7;&#x8BCD;&#x3002;&#x4ED6;&#x7684;&#x90A3;&#x4E9B;&#x7231;&#x56FD;&#x8BD7;&#x8BCD;&#xFF0C;&#x4E5F;&#x540C;&#x6837;&#x80FD;&#x591F;&#x6253;&#x52A8;&#x6211;&#x7684;&#x5FC3;&#x7075;&#x3002; &#x6BD4;&#x5982;&#x8BF4;&#xFF1A; &#x955C;&#x91CC;&#x6D41;&#x5E74;&#x4E24;&#x9B13;&#x6B8B;&#xFF0C;&#x5BF8;&#x5FC3;&#x81EA;&#x8BB8;&#x5C1A;&#x5982;&#x4E39;&#x3002; &#x8870;&#x8FDF;&#x7F62;&#x8BD5;&#x620E;&#x8863;&#x7A84;&#xFF0C;&#x60B2;&#x6124;&#x72B9;&#x4E89;&#x5B9D;&#x5251;&#x5BD2;&#x3002; &#x8FDC;&#x620D;&#x5341;&#x5E74;&#x4E34;&#x7684;&#x535A;&#xFF0C;&#x58EE;&#x56FE;&#x4E07;&#x91CC;&#x6218;&#x768B;&#x5170;&#x3002; &#x5173;&#x6CB3;&#x81EA;&#x53E4;&#x65E0;&#x7A77;&#x4E8B;&#xFF0C;&#x8C01;&#x6599;&#x5982;&#x4ECA;&#x8896;&#x624B;&#x770B;&#x3002; &#x8FD9;&#x4E00;&#x9996;&#x300A;&#x4E66;&#x6124;&#x300B;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x611F;&#x53D7;&#x5230;&#x4ED6;&#x7684;&#x90A3;&#x79CD;&#x6740;&#x654C;&#x62A5;&#x56FD;&#x7684;&#x6E34;&#x671B;&#x548C;&#x62A5;&#x56FD;&#x65E0;&#x95E8;&#x7684;&#x65E0;&#x5948;&#x3002; &#x5305;&#x62EC;&#x53E6;&#x4E00;&#x9996;&#x300A;&#x4E66;&#x6124;&#x300B;&#xFF0C;&#x4E5F;&#x662F;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x90A3;&#x79CD;&#x3002; &#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x662F;&#x5199;&#x6211;&#x5BF9;&#x4E24;&#x9996;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#x7684;&#x611F;&#x53D7;&#x7684;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x5728;&#x8FD9;&#x91CC;&#x8BB2;&#x9646;&#x6E38;&#x7684;&#x90A3;&#x4E9B;&#x7231;&#x8FC7;&#x53E4;&#x8BD7;&#x4E0D;&#x592A;&#x597D;&#xFF0C;&#x4E5F;&#x8BB8;&#x4E0B;&#x6B21;&#x53EF;&#x4EE5;&#x518D;&#x5F00;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x6765;&#x5199;&#x3002; &#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x518D;&#x6B21;&#x611F;&#x53D7;&#x4E86;&#x4E00;&#x4E0B;&#x8BD7;&#x8BCD;&#x7684;&#x7F8E;&#x597D;&#xFF0C;&#x5FC3;&#x91CC;&#x9762;&#x597D;&#x53D7;&#x591A;&#x4E86;&#xFF0C;&#x6709;&#x4E9B;&#x4E8B;&#x60C5;&#x4E5F;&#x60F3;&#x660E;&#x767D;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"诗词","slug":"诗词","permalink":"https://www.violetoj.com/categories/诗词/"}],"tags":[{"name":"hidden","slug":"hidden","permalink":"https://www.violetoj.com/tags/hidden/"}],"keywords":[{"name":"诗词","slug":"诗词","permalink":"https://www.violetoj.com/categories/诗词/"}]},{"title":"卡常者π酱 题解","slug":"卡常者π酱-题解","date":"2019-03-14T02:14:00.000Z","updated":"2019-03-18T10:44:31.472Z","comments":true,"path":"2019/03/14/卡常者π酱-题解/","link":"","permalink":"https://www.violetoj.com/2019/03/14/卡常者π酱-题解/","excerpt":"现在终于可以公布一下这道题目的改编来源了。 http://codeforces.com/contest/1120/problem/C CF1120 C 的数据范围就是 $n \\leq 5000$ 。 大概把 CF 上原题的代码复制粘贴过来可以获得 $15-20\\ pts$。","text":"&#x73B0;&#x5728;&#x7EC8;&#x4E8E;&#x53EF;&#x4EE5;&#x516C;&#x5E03;&#x4E00;&#x4E0B;&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x7684;&#x6539;&#x7F16;&#x6765;&#x6E90;&#x4E86;&#x3002; http://codeforces.com/contest/1120/problem/C CF1120 C &#x7684;&#x6570;&#x636E;&#x8303;&#x56F4;&#x5C31;&#x662F; $n \\leq 5000$ &#x3002; &#x5927;&#x6982;&#x628A; CF &#x4E0A;&#x539F;&#x9898;&#x7684;&#x4EE3;&#x7801;&#x590D;&#x5236;&#x7C98;&#x8D34;&#x8FC7;&#x6765;&#x53EF;&#x4EE5;&#x83B7;&#x5F97; $15-20\\ pts$&#x3002; &#x73B0;&#x5728;&#x662F;&#x5410;&#x69FD;&#x73AF;&#x8282;&#x3002; &#x4EE5;&#x4E0B;&#x662F;&#x51E0;&#x4E2A;&#x51FA;&#x9898;&#x4EBA;&#x7684;&#x4EE3;&#x53F7;&#xFF1A; 123hkk = hankekezcr = &#x61A7;&#x61AC;&#x672A;&#x6765; = ForwardFutureyy = isunny = fluttersunny &#x8FD9;&#x662F;&#x6765;&#x81EA;&#x51FA;&#x9898;&#x4EBA;&#x7684;&#x5410;&#x69FD;&#x3002; &#x9996;&#x5148;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x4E0A;&#x4E2A;&#x661F;&#x671F; CF &#x7684;&#x9898;&#x76EE;&#x4E86;&#xFF0C;&#x672C;&#x6765;&#x5199;&#x4E86;&#x4E00;&#x4E2A; $O(n^2\\log n)$ &#x6211;&#x5C31;&#x6CA1;&#x6709;&#x7BA1;&#x4E86;&#x3002; &#x4F46;&#x662F;&#x4E00;&#x4E2A;&#x661F;&#x671F;&#x4EE5;&#x540E;&#xFF0C;zcr &#x7A81;&#x7136;&#x60F3;&#x77E5;&#x9053;&#x4E86;&#x6211;&#x662F;&#x600E;&#x4E48;&#x505A;&#x7684;&#x3002;&#x4E8E;&#x662F;&#x53C8;&#x8BA8;&#x8BBA;&#x8D77;&#x6765;&#x4E86;&#x8FD9;&#x9053;&#x9898;&#x3002; &#x8BA8;&#x8BBA;&#x8BA8;&#x8BBA;&#x7740;&#xFF0C;&#x5C31;&#x53D1;&#x73B0;&#x4E86;&#x4E00;&#x4E9B;&#x5355;&#x8C03;&#x6027;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x4EE5;&#x4E3A;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x7528;&#xFF0C;&#x6CA1;&#x6709;&#x7BA1;&#x3002;&#x4F46;&#x662F;&#x540E;&#x6765;&#x7A81;&#x7136;&#x89C9;&#x5F97;&#xFF0C;&#x597D;&#x50CF;&#x628A;&#x6211;&#x7684;&#x65B9;&#x6CD5;&#x901A;&#x8FC7;&#x8FD9;&#x4E9B;&#x5355;&#x8C03;&#x6027;&#x6269;&#x5C55;&#x4E00;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x505A;&#x5230; $O(n\\log n)$ &#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x8054;&#x7CFB;&#x4E86;&#x4E00;&#x4E0B;&#x8FD9;&#x573A;&#x6BD4;&#x8D5B;&#x7684;&#x51FA;&#x9898;&#x4EBA;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x96CF;&#x5F62;&#xFF08;&#x4E00;&#x5F00;&#x59CB;&#x7684;&#x6570;&#x636E;&#x8303;&#x56F4;&#xFF09;&#x5C31;&#x51FA;&#x6765;&#x4E86;&#x3002; &#x4E00;&#x5F00;&#x59CB;&#xFF0C;$15\\%$ &#x662F;&#x7ED9;&#x7684;&#x539F;&#x9898;&#x6570;&#x636E;&#x8303;&#x56F4;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E00;&#x76F4;&#x90FD;&#x6CA1;&#x6709;&#x53D8;&#x3002;&#x4E00;&#x5F00;&#x59CB;&#x662F; $n \\leq 50000$ &#x7684;&#x3002; &#x4F46;&#x662F;&#x7B2C;&#x4E8C;&#x5929;&#x53D1;&#x73B0;&#x4E86; zcr &#x7684;&#x5237;&#x8868;&#x6CD5;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5355;&#x8C03;&#x6027;&#x6269;&#x5C55;&#x3002;&#x800C;&#x4E14;&#x7531;&#x4E8E;&#x8FD9;&#x79CD;&#x7B97;&#x6CD5;&#x4E0D;&#x9700;&#x8981;&#x7EBF;&#x6BB5;&#x6811;&#x5408;&#x5E76;&#xFF0C;&#x867D;&#x7136;&#x590D;&#x6742;&#x5EA6;&#x6CA1;&#x6709;&#x53D8;&#xFF0C;&#x4F46;&#x662F;&#x5E38;&#x6570;&#x6BD4;&#x8F83;&#x5C0F;&#x3002; &#x968F;&#x540E;&#xFF0C;&#x4E0B;&#x5348;&#xFF0C;zcr &#x53D1;&#x73B0;&#x8FD9;&#x9053;&#x9898;&#x53EF;&#x4EE5;&#x7528;&#x5355;&#x8C03;&#x961F;&#x5217;&#x7EF4;&#x62A4;&#xFF0C;&#x4E8E;&#x662F;&#x5C31;&#x51FA;&#x73B0;&#x4E86; $O(n)$ &#x7684;&#x7B97;&#x6CD5;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x7684; $n$ &#x7531; $500000$ &#x6269;&#x5927;&#x6210;&#x4E86; $5000000&#x200B;$&#x3002; &#x4E4B;&#x6240;&#x4EE5;&#x4E0D;&#x5F00; $10 ^ 6$&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#x6015;&#x5E38;&#x6570;&#x5C0F;&#x7684;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6216;&#x8005;&#x624B;&#x5199;&#x4E8C;&#x53C9;&#x5806;&#x7684;&#x505A;&#x6CD5;&#x5361;&#x8FC7;&#x53BB;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x7EBF;&#x6027;&#x505A;&#x6CD5;&#x7684; SAM &#x5C31;&#x4F1A; MLE &#x4E86;&#x3002;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x628A;&#x5B57;&#x7B26;&#x96C6;&#x7F29;&#x5C0F;&#x6210;&#x4E86; $a-g$&#x3002;&#x8FD9;&#x4E5F;&#x5C31;&#x5BFC;&#x81F4;&#x4E86;&#x968F;&#x673A;&#x6570;&#x636E;&#x8FD9;&#x4E00;&#x9879;&#x76EE;&#x4F3C;&#x4E4E;&#x6839;&#x672C;&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x5C34;&#x5C2C;&#x5C40;&#x9762;&#x3002; &#x800C;&#x4E14;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x60C5;&#x51B5;&#x6CA1;&#x6709;&#x9884;&#x6599;&#x5230;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5C31;&#x662F;&#x672C;&#x6765;&#x6309;&#x7167;&#x6211;&#x4EEC;&#x6700;&#x521D;&#x7684;&#x8BBE;&#x60F3;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x53EF;&#x80FD;&#x4F1A;&#x7528;&#x5230; SAM + &#x7EBF;&#x6BB5;&#x6811;&#x5408;&#x5E76; + &#x5355;&#x8C03;&#x961F;&#x5217;&#x4F18;&#x5316; DP&#xFF0C;&#x8981;&#x60F3;&#x5230;&#x53EF;&#x80FD;&#x4E5F;&#x8981;&#x7A0D;&#x5FAE;&#x82B1;&#x4E00;&#x4E9B;&#x65F6;&#x95F4;&#x3002;&#x4F46;&#x662F;&#x968F;&#x7740;&#x6211;&#x4EEC;&#x540E;&#x6765;&#x7684;&#x4E00;&#x6B65;&#x6B65;&#x7814;&#x7A76;&#xFF0C;&#x4F3C;&#x4E4E;&#x8D8A;&#x6765;&#x8D8A;&#x7B80;&#x5355;&#x4E86;&#x3002;&#x7B2C;&#x4E8C;&#x4E2A;&#x7B97;&#x6CD5;&#x5148;&#x662F;&#x628A;&#x628A;&#x7EBF;&#x6BB5;&#x6811;&#x5408;&#x5E76;&#x7ED9;&#x53BB;&#x6389;&#x4E86;&#xFF0C;&#x5355;&#x8C03;&#x961F;&#x5217;&#x4E5F;&#x4E0D;&#x7528;&#x4E86;&#xFF0C;&#x53D8;&#x6210;&#x4E00;&#x4E2A;&#x7EBF;&#x6BB5;&#x6811;&#x533A;&#x95F4;&#x4FEE;&#x6539;&#xFF0C;&#x800C;&#x4E14;&#x4F3C;&#x4E4E;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x53EA;&#x9700;&#x8981;&#x5728;&#x66B4;&#x529B;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x7A0D;&#x5FAE;&#x6269;&#x5C55;&#x4E00;&#x4E0B;&#x5C31;&#x80FD;&#x60F3;&#x5230;&#xFF0C;&#x8FD9;&#x4E0B;&#x5B50;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x4E86; NOIP D2T1 &#x96BE;&#x5EA6;&#x4E86;&#x3002;&#x7136;&#x540E;&#x518D;&#x4F18;&#x5316;&#xFF0C;&#x7ED3;&#x679C;&#x5E72;&#x8106;&#x628A;&#x7EBF;&#x6BB5;&#x6811;&#x90FD;&#x53BB;&#x6389;&#x4E86;&#xFF0C;&#x53D8;&#x6210;&#x5355;&#x8C03;&#x961F;&#x5217;&#x4F18;&#x5316; DP &#x2014;&#x2014; &#x8FD9;&#x4E0D;&#x662F;&#x666E;&#x53CA;&#x7EC4;&#x5185;&#x5BB9;&#x5417;&#xFF1F;&#x4F46;&#x662F;&#x4F3C;&#x4E4E;&#x5DF2;&#x7ECF;&#x4E0D;&#x600E;&#x4E48;&#x6765;&#x5F97;&#x53CA;&#x628A;&#x8FD9;&#x9053;&#x9898;&#x64A4;&#x56DE;&#x6765;&#x4E86;&#xFF0C;&#x4E8E;&#x662F;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x6574;&#x573A;&#x6BD4;&#x8D5B;&#x6700;&#x7B80;&#x5355;&#x7684;&#x9898;&#x76EE;&#x4E86;&#x3002; &#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x60C5;&#x51B5;&#x5C31;&#x662F;&#x6309;&#x7167;&#x5267;&#x672C;&#xFF0C;&#x65F6;&#x95F4;&#x9650;&#x5236;&#x5E94;&#x8BE5;&#x662F; std &#x7684;&#x4E24;&#x500D;&#x4EE5;&#x4E0A;&#x3002;&#x53EF;&#x60DC;&#x6D1B;&#x8C37;&#x5728;&#x6709; $40&#x200B;$ &#x4E2A;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6700;&#x591A;&#x53EA;&#x80FD;&#x5F00; $3s&#x200B;$&#x3002; &#x8FD9;&#x91CC;&#x5411;&#x5927;&#x5BB6;&#x9053;&#x6B49;&#x3002; &#x4EE5;&#x4E0B;&#x662F;&#x9898;&#x89E3;&#x3002; $n \\leq 5000$ &#x4EE5;&#x53CA; &#x968F;&#x673A;&#x6570;&#x636E;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x8303;&#x56F4;&#x663E;&#x7136;&#x662F; $O(n^2)$&#x3002;&#x53EF;&#x80FD;&#x4F1A;&#x5E26;&#x4E00;&#x4E2A; $\\log$&#x3002; &#x6211;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A; &#x61A7;&#x61AC;&#x672A;&#x6765; &#x795E;&#x4ED9;&#x5728; CF &#x4E0A;&#x7684;&#x505A;&#x6CD5;&#x3002;&#x6211;&#x7684;&#x505A;&#x6CD5;&#x4E00;&#x4F1A;&#x513F;&#x518D;&#x8BB2;&#x3002; &#x6211;&#x4EEC;&#x8BBE; $dp[i]$ &#x8868;&#x793A;&#x524D; $i$ &#x4F4D;&#x7684;&#x6700;&#x5C0F;&#x82B1;&#x8D39;&#x3002;&#x6211;&#x4EEC;&#x91C7;&#x7528;&#x5237;&#x8868;&#x6CD5;&#x6765;&#x66F4;&#x65B0;&#x540E;&#x7EED;&#x72B6;&#x6001;&#x3002; dp[i] + b \\rightarrow dp[j]\\ |\\ i < j , s_{i+1..j} \\subseteq s_{1..i}&#x600E;&#x4E48;&#x5224;&#x65AD; $s_{i + 1..j}&#x200B;$ &#x600E;&#x4E48;&#x5224;&#x65AD;&#x662F;&#x4E0D;&#x662F;&#x524D;&#x9762; $1..i&#x200B;$ &#x7684;&#x5B57;&#x4E32;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x5BF9;&#x524D; $i&#x200B;$ &#x7684;&#x5B57;&#x7B26;&#x5EFA;&#x7ACB; SAM&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4E0A;&#x9762;&#x8DD1;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x4E00;&#x76F4;&#x5230;&#x65E0;&#x6CD5;&#x7EE7;&#x7EED;&#x5411;&#x4E0B;&#x8D70;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x8FD9;&#x6837;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; $O(n^2)&#x200B;$&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x6570;&#x636E;&#x968F;&#x673A;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x4E0D;&#x4F1A;&#x8DD1;&#x592A;&#x957F;&#x7684;&#x4E32;&#x5C31;&#x4F1A;&#x88AB;&#x65AD;&#x6389;&#xFF0C;&#x6240;&#x4EE5;&#x662F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x968F;&#x673A;&#x6570;&#x636E;&#x7684;&#x3002; $n \\leq 50000$&#x6211;&#x4EEC;&#x6682;&#x65F6;&#x5148;&#x4E0D;&#x4ECB;&#x7ECD; $n \\leq 50000$ &#x7684;&#x505A;&#x6CD5;&#x3002;&#x5148;&#x6765;&#x8BB2;&#x4E00;&#x4E0B;&#x6211;&#x5728; CF &#x4E0A;&#x7684;&#x5199;&#x6CD5;&#x3002; &#x56E0;&#x4E3A;&#x6211;&#x5BF9;&#x4E8E;&#x5237;&#x8868;&#x4E0D;&#x592A;&#x719F;&#x6089;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x8003;&#x8651;&#x4E86;&#x600E;&#x4E48;&#x586B;&#x8868;&#xFF0C;&#x6240;&#x4EE5;&#x65B9;&#x6CD5;&#x76F8;&#x6BD4;&#x4E8E;&#x4E0A;&#x4E00;&#x79CD;&#x7565;&#x5FAE;&#x7E41;&#x7410;&#x3002; &#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x5224;&#x65AD; $j + 1$ &#x5230; $i$ &#x7684;&#x90E8;&#x5206;&#x662F;&#x4E0D;&#x662F; $1$ &#x5230; $j$ &#x90E8;&#x5206;&#x7684;&#x5B57;&#x4E32;&#xFF0C;$i$ &#x662F;&#x56FA;&#x5B9A;&#x7684;&#x3002; &#x5982;&#x679C;&#x80FD;&#x591F;&#x5728; parent &#x6811;&#x4E0A;&#x627E;&#x5230; $j + 1$ &#x5230; $i$ &#x90E8;&#x5206;&#x5BF9;&#x5E94;&#x7684;&#x70B9;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x5224;&#x65AD;&#x8FD9;&#x4E2A;&#x70B9;&#x7684; $endpos$ &#x96C6;&#x5408;&#xFF08;&#x4E5F;&#x53EB; $right$ &#x96C6;&#x5408;&#xFF0C;&#x4E24;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x53EB;&#x6CD5;&#xFF09;&#x91CC;&#x9762;&#x662F;&#x5426;&#x6709; $1$ &#x5230; $j$ &#x533A;&#x95F4;&#x5185;&#x7684;&#x70B9;&#x3002;&#x8FD9;&#x4E2A;&#x53EF;&#x4EE5;&#x7528;&#x7EBF;&#x6BB5;&#x6811;&#x5408;&#x5E76;&#x89E3;&#x51B3;&#x3002; &#x4F46;&#x662F;&#x73B0;&#x5728;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x53EA;&#x5269;&#x4E00;&#x4E2A;&#x4E86;&#x3002;&#x5982;&#x4F55;&#x627E;&#x5230; $j + 1$ &#x5230; $i$ &#x7684;&#x4E32;&#x5728; parent &#x6811;&#x4E0A;&#x7684;&#x70B9;&#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x628A; $j$ &#x4ECE; $i - 1$ &#x5230; $0$ &#x5012;&#x5E8F;&#x5FAA;&#x73AF;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x6BCF;&#x6B21;&#x5728;&#x4E00;&#x4E2A;&#x4E32;&#x7684;&#x524D;&#x9762;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x3002;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x5728; parent &#x6811;&#x4E0A;&#x5411;&#x4E0B;&#x8D70;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x5982;&#x679C;&#x73B0;&#x5728;&#x8FD9;&#x4E2A;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x4ECD;&#x7136;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684; $maxlen&#x200B;$&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5E94;&#x8BE5;&#x505C;&#x7559;&#x5728;&#x539F;&#x5730;&#x3002;&#x5982;&#x679C;&#x5927;&#x4E8E;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x9700;&#x8981;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x5B69;&#x5B50;&#x5411;&#x4E0B;&#x8D70;&#x3002;&#x5177;&#x4F53;&#x7684;&#x9009;&#x62E9;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x8FD9;&#x4E2A;&#x4E32;&#x4E0A;&#x7684;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x7684;&#x5B57;&#x7B26;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5; $O(n^2\\log n)$ &#x89E3;&#x51B3;&#x8FD9;&#x4E2A; $n \\leq 5000&#x200B;$ &#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x663E;&#x7136;&#x4F1A;&#x88AB;&#x4E0A;&#x9762;&#x7684;&#x540A;&#x6253;&#x3002; &#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;&#x80AF;&#x5B9A;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E; $p&#x200B;$ &#x4F7F;&#x5F97; $\\forall j \\in [1, p]&#x200B;$&#xFF0C;$j + 1&#x200B;$ &#x5230; $i&#x200B;$ &#x7684;&#x4E32;&#x4E0D;&#x662F; $1&#x200B;$ &#x5230; $j&#x200B;$ &#x7684;&#x5B50;&#x4E32;&#xFF0C;&#x800C; $\\forall j \\in (p, i)&#x200B;$ &#x90FD;&#x6709; $j + 1&#x200B;$ &#x5230; $i&#x200B;$ &#x7684;&#x4E32;&#x662F; $1&#x200B;$ &#x5230; $j&#x200B;$ &#x7684;&#x5B50;&#x4E32;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x662F;&#x5426;&#x662F;&#x5B57;&#x4E32;&#x8FD9;&#x4E00;&#x6761;&#x4EF6;&#x662F;&#x5355;&#x8C03;&#x7684;&#x3002; &#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4E8C;&#x5206;&#x6216;&#x8005;&#x500D;&#x589E;&#x5730;&#x6C42;&#x51FA;&#x8FD9;&#x4E2A; $p&#x200B;$ &#x503C;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x7EBF;&#x6BB5;&#x6811;&#x67E5;&#x8BE2; $(p, i)&#x200B;$ &#x533A;&#x95F4;&#x5185;&#x7684; $dp&#x200B;$ &#x503C;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x8F6C;&#x79FB;&#x5373;&#x53EF;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n \\log^2 n)$&#x3002;&#x5982;&#x679C;&#x5E38;&#x6570;&#x5C0F;&#x4E5F;&#x8BB8;&#x80FD;&#x8FC7; $n \\leq 500000$ &#x5427;&#xFF0C;&#x6CA1;&#x6709;&#x8BD5;&#x8FC7;&#x3002;&#x4E00;&#x4E2A; $\\log&#x200B;$ &#x7684; std-force &#x5BF9;&#x4E8E; $n \\leq 50000$ &#x90FD;&#x5F88;&#x5361;&#x5E38;&#x4E86;&#x3002;&#x3002;&#x3002; $n \\leq 500000$&#x5176;&#x5B9E;&#x6B63;&#x89E3;&#x4E0E; $n \\leq 50000$ &#x7684;&#x90E8;&#x5206;&#x5206;&#x76F8;&#x5DEE;&#x4E0D;&#x5927;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x9898;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x592A;&#x4F1A;&#x914D;&#x7F6E;&#x90E8;&#x5206;&#x5206;&#xFF0C;&#x6240;&#x6709;&#x5BFC;&#x81F4;&#x4E25;&#x91CD;&#x4E0D;&#x5408;&#x7406;&#x3002; &#x6211;&#x4EEC;&#x53D1;&#x73B0;&#xFF0C;&#x5F53; $i$ &#x5411;&#x53F3;&#x79FB;&#x52A8;&#x5230; $i + 1$ &#x7684;&#x65F6;&#x5019;&#xFF0C;$p$ &#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x5E94;&#x8BE5;&#x662F;&#x975E;&#x4E25;&#x683C;&#x5355;&#x8C03;&#x589E;&#x7684;&#x3002;&#x8BC1;&#x660E;&#x7684;&#x8BDD;&#x53EF;&#x4EE5;&#x4F2A;&#x8BC1;&#x4E00;&#x4E0B;&#xFF1A; &#x5047;&#x8BBE; $p$ &#x70B9;&#x79FB;&#x52A8;&#x5230;&#x4E86; $p&#x2019;$&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x8BF4; $\\forall j \\in (p&#x2019;, i + 1)$&#xFF0C;&#x90FD;&#x6709; $j + 1$ &#x5230; $i + 1$ &#x7684;&#x4E32;&#x662F; $1$ &#x5230; $j$ &#x7684;&#x5B50;&#x4E32;&#x3002; &#x53C8;&#x56E0;&#x4E3A; $j + 1$ &#x5230; $i$ &#x662F; $j + 1$ &#x5230; $i + 1$ &#x7684;&#x5B57;&#x4E32;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;$\\forall j \\in (p&#x2019;, i)$&#xFF0C;&#x90FD;&#x6709; $j + 1$ &#x5230; $i$ &#x7684;&#x4E32; $1$ &#x5230; $j$ &#x7684;&#x5B50;&#x4E32;&#x3002; &#x56E0;&#x6B64; $(p&#x2019;, i) \\subseteq (p, i)$ &#xFF0C;&#x5373; $p&#x2019; \\geq p$&#x3002; &#x90A3;&#x4E48;&#x6709;&#x4E86;&#x8FD9;&#x4E2A;&#x6027;&#x8D28;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6BCF;&#x6B21;&#x66F4;&#x65B0; $i$ &#x7684;&#x65F6;&#x5019;&#x628A; $p$ &#x5411;&#x53F3;&#x79FB;&#x52A8;&#x76F4;&#x5230;&#x80FD;&#x591F;&#x5339;&#x914D;&#xFF0C;&#x7136;&#x540E;&#x5355;&#x8C03;&#x961F;&#x5217;&#x6216;&#x8005;&#x7EBF;&#x6BB5;&#x6811;&#x7EF4;&#x62A4;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x6BCF;&#x6B21;&#x91CD;&#x65B0;&#x7B97;&#x4E86;&#xFF0C;$p$ &#x7684;&#x4F4D;&#x7F6E;&#x6700;&#x591A;&#x4E00;&#x5171;&#x5411;&#x53F3;&#x79FB;&#x52A8; $n$ &#x6B21;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n\\log n)$&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)#define dbg(...) fprintf(stderr, __VA_ARGS__)#define File(x) freopen(#x&quot;.in&quot;, &quot;r&quot;, stdin), freopen(#x&quot;.out&quot;, &quot;w&quot;, stdout)#define fi first#define se second#define pb push_backtemplate&lt;typename A, typename B&gt; inline char SMAX(A &amp;a, const B &amp;b) {return a &lt; b ? a = b , 1 : 0;}template&lt;typename A, typename B&gt; inline char SMIN(A &amp;a, const B &amp;b) {return b &lt; a ? a = b , 1 : 0;}typedef long long ll; typedef unsigned long long ull; typedef std::pair&lt;int, int&gt; pii;template&lt;typename I&gt;inline void read(I &amp;x) { int f = 0, c; while (!isdigit(c = getchar())) c == &apos;-&apos; ? f = 1 : 0; x = c &amp; 15; while (isdigit(c = getchar())) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c &amp; 15); f ? x = -x : 0;}const int N = 500000 + 7;const int INF = 0x3f3f3f3f;const ll INF_ll = 0x3f3f3f3f3f3f3f3f;int n, a, b, hd, tl, tax[N], q[N &lt;&lt; 1];ll dp[N];char s[N];struct Node{int c[26], len, fa;} t[N &lt;&lt; 1]; int nod = 1, last = 1, edp[N &lt;&lt; 1];inline void Extend(int x, int id) { int p = last, np = ++nod; t[np].len = t[p].len + 1; edp[np] = id; for (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np; if (!p) t[np].fa = 1; else { int q = t[p].c[x]; if (t[q].len == t[p].len + 1) t[np].fa = q; else { int nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + 1; t[q].fa = t[np].fa = nq; for (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq; } } last = np;}inline void Resort() { for (int i = 1; i &lt;= nod; ++i) ++tax[t[i].len]; for (int i = 1; i &lt;= n; ++i) tax[i] += tax[i - 1]; for (int i = 1; i &lt;= nod; ++i) q[tax[t[i].len]--] = i;}namespace SGT{ struct Seg{int lc, rc, val;} t[N * 40]; int nod, rt[N &lt;&lt; 1]; inline void Insert(int &amp;o, int L, int R, int x) { if (!o) o = ++nod; ++t[o].val; if (L == R) return; int M = (L + R) &gt;&gt; 1; if (x &lt;= M) Insert(t[o].lc, L, M, x); else Insert(t[o].rc, M + 1, R, x); } inline int Query(int o, int L, int R, int l, int r) { if (l &gt; r) return 0; if (l &lt;= L &amp;&amp; R &lt;= r) return t[o].val; int M = (L + R) &gt;&gt; 1; if (r &lt;= M) return Query(t[o].lc, L, M, l, r); if (l &gt; M) return Query(t[o].rc, M + 1, R, l, r); return Query(t[o].lc, L, M, l, r) + Query(t[o].rc, M + 1, R, l, r); } inline int Merge(int o, int p) { if (!o || !p) return o ^ p; int np = ++nod; t[np].lc = Merge(t[o].lc, t[p].lc); t[np].rc = Merge(t[o].rc, t[p].rc); t[np].val = t[t[np].lc].val + t[t[np].rc].val; return np; }}using SGT::Insert;using SGT::Query;using SGT::rt;using SGT::Merge;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #else #ifndef ONLINE_JUDGE File(string); #endif #endif scanf(&quot;%d%d%d%s&quot;, &amp;n, &amp;a, &amp;b, s + 1); for (int i = 1; i &lt;= n; ++i) Extend(s[i] - &apos;a&apos;, i); for (int i = 1; i &lt;= nod; ++i) if (edp[i]) Insert(rt[i], 1, n, edp[i]); Resort(); for (int i = nod; i; --i) rt[t[q[i]].fa] = Merge(rt[t[q[i]].fa], rt[q[i]]), SMAX(edp[t[q[i]].fa], edp[q[i]]); int o = 1, p = 0; hd = 1, tl = 0; for (int i = 1; i &lt;= n; ++i) { dp[i] = INF_ll; o = t[o].c[s[i] - &apos;a&apos;]; while (1) { if (i - p &lt;= t[t[o].fa].len) o = t[o].fa; if (p == i - 1) break; if (o &amp;&amp; Query(rt[o], 1, n, 1, p)) break; ++p; } SMIN(dp[i], dp[i - 1] + a); if (Query(rt[o], 1, n, 1, p)) { while (hd &lt;= tl &amp;&amp; q[hd] &lt; o) ++hd; SMIN(dp[i], dp[p] + b); } while (hd &lt;= tl &amp;&amp; dp[i] &gt;= dp[q[tl]]) --tl; q[++tl] = i; } printf(&quot;%lld\\n&quot;, dp[n]);} &#x7531;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x6784;&#x6210;&#x5982;&#x679C; $b \\leq a$&#xFF0C;&#x90A3;&#x4E48;&#x7B56;&#x7565;&#x5F88;&#x663E;&#x7136;&#x3002; &#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x82B1;&#x8D39; $a&#x200B;$&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x7B26;&#x82B1;&#x8D39; $b&#x200B;$&#xFF0C;&#x7B2C; $3-4&#x200B;$ &#x4E2A;&#x5B57;&#x7B26;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x82B1;&#x8D39; $b&#x200B;$&#xFF0C;&#x7B2C; $5-9&#x200B;$ &#x4E2A;&#x5B57;&#x7B26;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x82B1;&#x8D39; $b&#x200B;$ &#x2026;&#x2026;&#x50CF;&#x8FD9;&#x6837;&#x500D;&#x589E;&#x4E0B;&#x53BB;&#x5373;&#x53EF;&#x3002; &#x4F46;&#x662F;&#x5982;&#x679C; $b &gt; a&#x200B;$ &#xFF0C;&#x90A3;&#x4E48; $b&#x200B;$ &#x5C31;&#x4E0D;&#x662F;&#x5728;&#x4EFB;&#x4F55;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x662F;&#x6700;&#x4F18;&#x7684;&#x4E86;&#x3002;&#x4EE4; $k = \\lceil\\frac ba\\rceil&#x200B;$&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5E94;&#x8BE5;&#x5BF9;&#x4E8E;&#x524D; $k&#x200B;$ &#x4E2A;&#x5B57;&#x7B26;&#x6BCF;&#x4E00;&#x4E2A;&#x90FD;&#x82B1;&#x8D39; $a&#x200B;$ &#x5143;&#x3002;&#x540E;&#x9762;&#x7EE7;&#x7EED;&#x5411;&#x4E0A;&#x9762;&#x4E00;&#x6837;&#x6BCF;&#x6B21;&#x82B1;&#x8D39; $b&#x200B;$ &#x500D;&#x589E;&#x5373;&#x53EF;&#x3002; $n \\leq 5000000$&#x6211;&#x4EEC;&#x56DE;&#x8FC7;&#x53BB;&#x8003;&#x8651;&#x4E00;&#x4E0B; ForwardFuture &#x795E;&#x4ED9;&#x5728; CF &#x4E0A;&#x7684;&#x505A;&#x6CD5;&#x3002;&#x56E0;&#x4E3A;&#x4ED6;&#x662F;&#x5237;&#x8868;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x9700;&#x8981;&#x73B0;&#x5728;&#x7684; SAM &#x7684;&#x72B6;&#x6001;&#x5C31;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x540E;&#x7EED;&#x662F;&#x4E0D;&#x662F;&#x5B57;&#x4E32;&#x7684;&#x95EE;&#x9898;&#x4E86;&#x3002;&#x8FD9;&#x662F;&#x6B64;&#x9898;&#x5237;&#x8868;&#x6CD5;&#x6700;&#x5927;&#x7684;&#x4F18;&#x52BF;&#x3002; &#x6211;&#x4EEC;&#x4E4B;&#x524D;&#x5728; $n \\leq 500000$ &#x91CC;&#x9762;&#x66FE;&#x7ECF;&#x4F2A;&#x8BC1;&#x4E86;&#x90A3;&#x91CC;&#x7684; $p$ &#x662F;&#x5177;&#x6709;&#x5355;&#x8C03;&#x6027;&#x7684;&#x3002;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x4E0D;&#x59A8;&#x6539;&#x53D8; $p$ &#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x628A; $p$ &#x5728;&#x8FD9;&#x91CC;&#x5B9A;&#x4E49;&#x4E3A;&#xFF1A; &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684; $i$&#xFF0C;&#x4F4D;&#x7F6E; $p$ &#x6EE1;&#x8DB3; $\\forall j \\in (i, p]$ &#x6709; $i + 1$ &#x5230; $j$ &#x7EC4;&#x6210;&#x7684;&#x4E32;&#x662F; $1$ &#x5230; $i$ &#x7684;&#x5B57;&#x4E32;&#xFF0C;&#x800C; $\\forall j \\in (p, n]$ &#x5219;&#x5747;&#x4E0D;&#x6EE1;&#x8DB3;&#x3002; &#x90A3;&#x4E48;&#x7531;&#x76F8;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x4F2A;&#x8BC1;&#x51FA;&#x8FD9;&#x91CC;&#x7684; $p$ &#x968F;&#x7740; $i$ &#x7684;&#x589E;&#x5927;&#xFF0C;&#x4E5F;&#x662F;&#x5355;&#x8C03;&#x9012;&#x589E;&#x7684;&#x3002; &#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x7EBF;&#x6BB5;&#x6811;&#x5BF9;&#x4E00;&#x4E2A;&#x533A;&#x95F4;&#x53D6; $\\min$ &#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x4F9D;&#x7136;&#x5B9E;&#x73B0; $O(n \\log n)$ &#x7684;&#x7B97;&#x6CD5;&#x3002; &#x8FD9;&#x4E2A;&#x64CD;&#x4F5C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x961F;&#x5217;&#x6765;&#x7EF4;&#x62A4;&#x6240;&#x6709;&#x7684;&#x53D6; $\\min$ &#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x590D;&#x6742;&#x5EA6;&#x4F9D;&#x7136;&#x662F; $O(n \\log n)$&#x3002; &#x4F46;&#x662F;&#x53D7;&#x5230;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x542F;&#x53D1;&#xFF0C;&#x6211;&#x4EEC;&#x7528; $(pos, val)$ &#x6765;&#x7EF4;&#x62A4;&#x73B0;&#x5728;&#x7684;&#x6240;&#x6709;&#x53D6; $\\min$ &#x64CD;&#x4F5C;&#xFF0C;&#x90A3;&#x4E48;&#x5982;&#x679C;&#x5B58;&#x5728; $pos_1 &lt; pos_2, val_1 &gt; val_2$ &#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x90A3;&#x4E48; $1$ &#x8FD9;&#x4E2A;&#x53D6; $\\min$ &#x64CD;&#x4F5C;&#x5C31;&#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x7528;&#x4E86;&#x3002;&#x57FA;&#x4E8E;&#x8FD9;&#x4E2A;&#x6027;&#x8D28;&#xFF0C;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x7528;&#x5355;&#x8C03;&#x961F;&#x5217;&#x7EF4;&#x62A4;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; $O(n)$&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)#define dbg(...) fprintf(stderr, __VA_ARGS__)#define File(x) freopen(#x&quot;.in&quot;, &quot;r&quot;, stdin), freopen(#x&quot;.out&quot;, &quot;w&quot;, stdout)#define fi first#define se second#define pb push_backtemplate&lt;typename A, typename B&gt; inline char SMAX(A &amp;a, const B &amp;b) {return a &lt; b ? a = b , 1 : 0;}template&lt;typename A, typename B&gt; inline char SMIN(A &amp;a, const B &amp;b) {return b &lt; a ? a = b , 1 : 0;}typedef long long ll; typedef unsigned long long ull; typedef std::pair&lt;int, int&gt; pii;template&lt;typename I&gt;inline void read(I &amp;x) { int f = 0, c; while (!isdigit(c = getchar())) c == &apos;-&apos; ? f = 1 : 0; x = c &amp; 15; while (isdigit(c = getchar())) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c &amp; 15); f ? x = -x : 0;}const int N = 5000000 + 7;const int INF = 0x3f3f3f3f;const ll INF_ll = 0x3f3f3f3f3f3f3f3f;int n, a, b, hd, tl;ll dp[N];char s[N];pii q[N];struct Node{int c[7], len, fa;} t[N &lt;&lt; 1]; int nod = 1, last = 1;inline void Extend(int x) { int p = last, np = ++nod; t[np].len = t[p].len + 1; for (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np; if (!p) t[np].fa = 1; else { int q = t[p].c[x]; if (t[q].len == t[p].len + 1) t[np].fa = q; else { int nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + 1; t[q].fa = t[np].fa = nq; for (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq; } } last = np;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif scanf(&quot;%d%d%d%s&quot;, &amp;n, &amp;a, &amp;b, s + 1); int o = 1, p = 0; hd = 1, tl = 0; for (int i = 1; i &lt;= n; ++i) { Extend(s[i] - &apos;a&apos;); dp[i] = dp[i - 1] + a; if (p &lt; i) p = i; while (o &gt; 1 &amp;&amp; p - i &lt;= t[t[o].fa].len) o = t[o].fa; if (!o) o = 1; for (; p &lt; n &amp;&amp; t[o].c[s[p + 1] - &apos;a&apos;]; ++p) o = t[o].c[s[p + 1] - &apos;a&apos;]; while (hd &lt;= tl &amp;&amp; q[hd].se &lt; i) ++hd; if (hd &lt;= tl) SMIN(dp[i], dp[q[hd].fi] + b); while (hd &lt;= tl &amp;&amp; dp[q[tl].fi] &gt;= dp[i]) --tl; q[++tl] = pii(i, p); } printf(&quot;%lld\\n&quot;, dp[n]);} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"洛谷","slug":"洛谷","permalink":"https://www.violetoj.com/categories/洛谷/"}],"tags":[{"name":"后缀自动机","slug":"后缀自动机","permalink":"https://www.violetoj.com/tags/后缀自动机/"},{"name":"单调队列","slug":"单调队列","permalink":"https://www.violetoj.com/tags/单调队列/"},{"name":"线段树合并","slug":"线段树合并","permalink":"https://www.violetoj.com/tags/线段树合并/"}],"keywords":[{"name":"洛谷","slug":"洛谷","permalink":"https://www.violetoj.com/categories/洛谷/"}]},{"title":"Codeforces Global Round 1 (CF1110)（A-F）","slug":"Codeforces-Global-Round-1-CF1110-（未完结，只有-A-F）","date":"2019-02-15T02:55:00.000Z","updated":"2019-03-18T10:41:55.714Z","comments":true,"path":"2019/02/15/Codeforces-Global-Round-1-CF1110-（未完结，只有-A-F）/","link":"","permalink":"https://www.violetoj.com/2019/02/15/Codeforces-Global-Round-1-CF1110-（未完结，只有-A-F）/","excerpt":"继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。 因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。","text":"&#x7EE7;&#x7EED;&#x8865;&#x9898;&#x3002;&#x56E0;&#x4E3A;&#x770B;&#x89C1;&#x540C;&#x5B66;&#x6253;&#x4E86;&#x8FD9;&#x573A;&#xFF0C;&#x800C;&#x4E14;&#x6DA8;&#x5206;&#x8FD8;&#x4E0D;&#x9519;&#xFF0C;&#x6240;&#x4EE5;&#x89C9;&#x5F97;&#x8FD9;&#x5957;&#x9898;&#x76EE;&#x53EF;&#x80FD;&#x4F1A;&#x6BD4;&#x8F83;&#x6709;&#x610F;&#x601D;&#x3002; &#x56E0;&#x4E3A;&#x4E0B;&#x5348;&#x8981;&#x5F00;&#x5B66;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x6050;&#x6015;&#x6682;&#x65F6;&#x4E0D;&#x80FD;&#x628A;&#x8FD9;&#x5957;&#x9898;&#x76EE;&#x8865;&#x5B8C;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5148;&#x628A; A-F &#x653E;&#x4E0A;&#x6765;&#x3002; A. Parity&#x4FDD;&#x5B58; %2 &#x7684;&#x503C;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 12345678910const int N = 1e5 + 7;int b, k, a[N], ans;int main() { read(b), read(k); for (int i = 1; i &lt;= k; ++i) read(a[i]); for (int i = k, p = 1; i; --i, p = p * b % 2) (ans += a[i] * p) %= 2; if (ans) puts(&quot;odd&quot;); else puts(&quot;even&quot;);} B. Tape&#x4E00;&#x5F00;&#x59CB;&#x51C6;&#x5907;&#x4E8C;&#x5206;&#xFF0C;&#x7136;&#x540E;&#x53D1;&#x73B0;&#x4ED6;&#x8981;&#x7684;&#x662F;&#x6700;&#x5C0F;&#x7684;&#x603B;&#x957F;&#x5EA6;&#xFF0C;&#x4E0D;&#x592A;&#x597D;&#x4E8C;&#x5206;&#x3002;&#x7136;&#x540E;&#x53D1;&#x73B0;&#x6211;&#x4EEC;&#x5728;&#x65AD;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5E94;&#x8BE5;&#x5C3D;&#x91CF;&#x628A;&#x95F4;&#x9699;&#x6BD4;&#x8F83;&#x5927;&#x7684;&#x4F18;&#x5148;&#x65AD;&#x6389;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x8D2A;&#x5FC3;&#xFF0C;&#x6392;&#x4E2A;&#x5E8F;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 123456789101112const int N = 1e5 + 7;int n, m, k, a[N], b[N], c[N], ans;int main(){ read(n), read(m), read(k); for (int i = 1; i &lt;= n; ++i) read(a[i]), b[i - 1] = a[i] - a[i - 1], c[i] = i; std::sort(c + 1, c + n, [](const int &amp;x, const int &amp;y){return b[x] &gt; b[y];}); std::sort(c + 1, c + k); c[k] = n; for (int i = 1; i &lt;= k; ++i) ans += a[c[i]] - a[c[i - 1] + 1] + 1; printf(&quot;%d\\n&quot;, ans);} C. Meaningless Operations&#x597D;&#x4E00;&#x9053;&#x6253;&#x8868;&#x9898;&#x3002; &#x60F3;&#x5F97;&#x767E;&#x65E0;&#x804A;&#x8D56;&#x4E4B;&#x4E0B;&#x5F00;&#x59CB;&#x6253;&#x8868;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x6709;&#x60CA;&#x559C;&#x4E86;&#x3002; &#x53D1;&#x73B0;&#x9664;&#x4E86; $2^k-1$ &#x5916;&#x7684;&#x6570;&#xFF0C;&#x7B54;&#x6848;&#x90FD;&#x662F;&#x6BD4;&#x4ED6;&#x5927;&#x7684;&#x6700;&#x5C0F;&#x7684; $2^k-1$ &#x3002; &#x90A3;&#x4E48; $2^k-1$ &#x81EA;&#x5DF1;&#x5462;&#xFF1F;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6709;&#x628A;&#x8868;&#x6253;&#x5168;&#xFF0C;&#x4EE5;&#x4E3A;&#x5C31;&#x662F;&#x5982;&#x679C; $k$ &#x662F;&#x5076;&#x6570;&#xFF0C;&#x5C31;&#x662F; $a/3$ &#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F; $1$ &#xFF0C;&#x7ED3;&#x679C;&#x4EA4;&#x4E0A;&#x53BB; wa2. &#x4E8E;&#x662F;&#x7EE7;&#x7EED;&#x6253; $2^k-1$&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x628A;&#x6240;&#x6709;&#x7684;&#x8868;&#x76F4;&#x63A5;&#x590D;&#x5236;&#x4E0A;&#x53BB;&#x3002;&#x53EF;&#x6211;&#x504F;&#x8981;&#x627E;&#x51FA;&#x89C4;&#x5F8B;&#x6765;&#x3002;&#x597D;&#x50CF;&#x7B54;&#x6848;&#x90FD;&#x662F;&#x539F;&#x6570;&#x7684;&#x56E0;&#x6570;&#xFF0C;&#x800C;&#x4E14;&#x2014;&#x2014;&#x800C;&#x4E14;&#x4F3C;&#x4E4E;&#x8FD8;&#x662F;&#x6700;&#x5927;&#x7684;&#x56E0;&#x6570;&#x554A;&#x3002; &#x4E8E;&#x662F;&#x5C31;&#x53EF;&#x4EE5; A &#x6389;&#x4E86;&#x3002; f(a) = \\max_{0 < b < a}{gcd(a \\oplus b, a \\> \\& \\> b)}.&#x4ED4;&#x7EC6;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x5F0F;&#x5B50;&#xFF0C;&#x5982;&#x679C; $a \\neq 2^k-1$ &#xFF0C;&#x90A3;&#x4E48; $a$ &#x5C31;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x4F4D;&#x90FD;&#x4E3A; $1$ &#xFF0C;&#x90A3;&#x4E48;&#x4EE4; $b = ~a$ &#xFF0C;&#x90A3;&#x4E48; $a \\oplus b = 2 ^ k - 1, a &gt; \\&amp; &gt; b = 0$ &#x3002;&#x4E8E;&#x662F; $gcd$ &#x5C31;&#x662F; $2^k-1$&#x3002; &#x5426;&#x5219;&#x5462;&#xFF0C;&#x5982;&#x679C; $a$ &#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x5168;&#x662F; $1$ &#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x91CC;&#x7684; $b$ &#x5E94;&#x8BE5;&#x662F; $0$ &#xFF0C;&#x663E;&#x7136;&#x4E0D;&#x6EE1;&#x8DB3;&#x8981;&#x6C42;&#x3002;&#x53D1;&#x73B0;&#x5F53; $a$ &#x4E8C;&#x8FDB;&#x5236;&#x4F4D;&#x90FD;&#x662F; $1$ &#x65F6;&#xFF0C; $a \\oplus b = a - b$&#xFF0C; $a &gt; \\&amp; &gt; b = b$ &#x3002;&#x4E8E;&#x662F;&#x539F;&#x5F0F;&#x53EF;&#x5316;&#x4E3A; $f(a) = \\max \\limits_{0 &lt; b &lt; a}{gcd(a - b, b)} = \\max \\limits_{0 &lt; b &lt; a}{gcd(a, b)}$ &#x3002;&#x663E;&#x7136;&#x5F53; $b | a$ &#x65F6; $f(a)$ &#x6700;&#x5927;&#xFF0C;&#x4E8E;&#x662F; $b$ &#x5C31;&#x662F; $a$ &#x6700;&#x5927;&#x7684;&#x56E0;&#x6570;&#x3002; 1234567891011121314151617181920212223int q, x;inline int Get(int x) { int ans = 0; while (x) ++ans, x &gt;&gt;= 1; return ans;}inline int Get2(int x) { if (x == 1) return 0; for (int i = 2, p = sqrt(x); i &lt;= p; ++i) if(x % i == 0) return x / i; return 1;}int main() { read(q); for (int i = 1; i &lt;= q; ++i) { read(x); int p = Get(x), s = (1 &lt;&lt; p) - 1; if (s != x) printf(&quot;%d\\n&quot;, s); else printf(&quot;%d\\n&quot;, Get2(s)); }} D. Jongmah&#x6211;&#x611F;&#x89C9;&#x8FD9;&#x9053;&#x9898;&#x6BD4; E,F &#x90FD;&#x96BE;&#x3002;&#x53EF;&#x80FD;&#x662F;&#x56E0;&#x4E3A;&#x592A;&#x83DC;&#x4E86;&#x624D;&#x4F1A;&#x8FD9;&#x6837;&#x60F3;&#x3002;&#xFF08;&#x56E0;&#x4E3A;&#x76EE;&#x524D;&#x8FD9;&#x516D;&#x9053;&#x9898;&#x91CC;&#x9762;&#x53EA;&#x6709;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x770B;&#x9898;&#x89E3;&#x505A;&#x7684;&#x3002;&#x3002;&#x3002;&#xFF09; &#x9996;&#x5148;&#x6700;&#x91CD;&#x8981;&#x7684;&#x7ED3;&#x8BBA;&#x662F; $(i, i + 1, i + 2)$ &#x8FD9;&#x6837;&#x7684;&#x987A;&#x5B50;&#x6700;&#x591A;&#x53D6;&#x4E24;&#x4E2A;&#xFF0C;&#x5426;&#x5219;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x5148;&#x628A;&#x5BF9;&#x5B50; $(i , i, i)$&#x53D6;&#x5B8C;&#x662F;&#x4E0D;&#x4F1A;&#x6BD4;&#x539F;&#x65B9;&#x6848;&#x5DEE;&#x7684;&#x3002; &#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x9650;&#x5236;&#x4E00;&#x4E0B;&#x987A;&#x5B50;&#x53D6;&#x7684;&#x4E2A;&#x6570;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x8BBE; $dp[i][j][k]$ &#x8868;&#x793A; dp &#x5230;&#x7B2C; $i$ &#x4E2A;&#x6570;&#xFF0C;&#x4FDD;&#x8BC1;&#x5BF9;&#x5B50; $(i - 1, i, i + 1)$ &#x53D6; $j$ &#x4E2A;&#xFF0C;&#x5BF9;&#x5B50; $(i, i + 1, i + 2)$ &#x53D6; $k$ &#x4E2A;&#x3002; &#x90A3;&#x4E48;&#x6709; dp[i][j][k] = \\max_{l = 0} ^ 2 {dp[i][l][j] + k + \\lfloor \\frac{num[i] - j - k - l}3 \\rfloor}1234567891011121314151617const int N = 1e6 + 7;int n, m, x, a[N], dp[N][3][3];int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n); read(m); for (int i = 1; i &lt;= n; ++i) read(x), ++a[x]; for (int i = 1; i &lt;= m; ++i) for (int j = 0; j &lt;= 2; ++j) for (int k = 0; k &lt;= 2; ++k) for (int l = 0; l &lt;= 2; ++l) if(a[i] &gt;= j + k + l) SMAX(dp[i][j][k], dp[i - 1][l][j] + k + (a[i] - j - k - l) / 3); printf(&quot;%d\\n&quot;, dp[m][0][0]);} E. Magic Stones&#x4E00;&#x5F00;&#x59CB;&#x6363;&#x9F13;&#x4E86;&#x534A;&#x5929;&#x63A8;&#x51FA;&#x4E86;&#x4E00;&#x5806;&#x5947;&#x602A;&#x7684;&#x6CA1;&#x6709;&#x7528;&#x7684;&#x6027;&#x8D28;&#x3002;&#x4E8E;&#x662F;&#x540E;&#x6765;&#x5E72;&#x8106;&#x76F4;&#x63A5;&#x5212;&#x6389;&#x91CD;&#x65B0;&#x6362;&#x4E2A;&#x601D;&#x8DEF;&#x601D;&#x8003;&#x3002; &#x8BB0;&#x5F97;&#x597D;&#x50CF;&#x5BF9;&#x4E8E;&#x5E8F;&#x5217;&#x4E0A;&#x8FDB;&#x884C;&#x53D8;&#x5316;&#x7684;&#x9898;&#x76EE;&#x597D;&#x591A;&#x90FD;&#x662F;&#x7528;&#x5DEE;&#x5206;&#x6765;&#x505A;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5F00;&#x59CB;&#x4ECE;&#x5DEE;&#x5206;&#x4E0A;&#x8003;&#x8651;&#x3002; &#x7136;&#x540E;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x5DEE;&#x5206;&#x5B8C;&#x5C31;&#x6CA1;&#x4E86;&#x3002; c_i' = c_{i + 1} + c_{i - 1} - c_i\\\\ \\text{可以推得}\\\\ c_{i + 1} - c_i' = c_i - c_{i - 1}\\\\ c_i' - c_{i - 1} = c_{i + 1} - c_i&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x5176;&#x5B9E;&#x662F;&#x628A;&#x5DEE;&#x5206;&#x6570;&#x7EC4;&#x4E0A;&#x4E24;&#x4E2A;&#x6570;&#x4EA4;&#x6362;&#x4E00;&#x4E0B;&#x3002; &#x6CE8;&#x610F;&#x8981;&#x7279;&#x5224;&#x4E00;&#x4E0B;&#x4E24;&#x7AEF;&#x7684;&#x539F;&#x6570;&#x636E;&#xFF0C;&#x56E0;&#x4E3A;&#x4E24;&#x7AEF;&#x4E0D;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6709;&#x6CE8;&#x610F;&#xFF0C;&#x5C31;wa4&#x4E86;&#x4E00;&#x6B21;&#x3002; 12345678910111213141516171819const int N = 1e5 + 7;int n, m, c[N], t[N];int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n); for (int i = 1; i &lt;= n; ++i) read(c[i]); for (int i = 1; i &lt;= n; ++i) read(t[i]); if (c[1] != t[1] || c[n] != t[n]) return puts(&quot;No&quot;); for (int i = n; i &gt; 1; --i) c[i] = c[i] - c[i - 1]; for (int i = n; i &gt; 1; --i) t[i] = t[i] - t[i - 1]; std::sort(c + 2, c + n + 1); std::sort(t + 2, t + n + 1); if (!memcmp(c + 2, t + 2, sizeof(int) * (n - 1))) puts(&quot;Yes&quot;); else puts(&quot;No&quot;);} F. Nearest Leaf&#x6620;&#x8C61;&#x4E2D;&#x8FD9;&#x9053;&#x9898;&#x597D;&#x50CF;&#x662F;&#x6211;&#x4EEC;&#x5B66;&#x6821;&#x5B66;&#x957F;&#x6691;&#x5047;&#x8BB2;&#x8FC7;&#x7684;&#x539F;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x8BB0;&#x4E0D;&#x8D77;&#x6765;&#x4E86;&#xFF0C;&#x53BB;&#x7FFB; ppt &#x5374;&#x5F88;&#x795E;&#x5947;&#x5730;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x3002; &#x4F46;&#x662F;&#x4E0D;&#x5F71;&#x54CD;&#x8FD9;&#x9053;&#x9898;&#x786E;&#x5B9E;&#x4E0D;&#x96BE;&#x3002; &#x663E;&#x7136;&#x662F;&#x79BB;&#x7EBF;&#xFF0C;&#x628A;&#x8BE2;&#x95EE;&#x6302;&#x5728; $v$ &#x4E0A;&#xFF0C;&#x5047;&#x8BBE; $dis[i]$ &#x8868;&#x793A; $v$ &#x5230; $i$ &#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x4ECE;&#x7236;&#x4EB2;&#x8DF3;&#x5230;&#x513F;&#x5B50;&#xFF0C;&#x4F1A;&#x628A;&#x513F;&#x5B50;&#x7684;&#x5B50;&#x6811;&#x5185;&#x7684;&#x70B9;&#x7684; $dis$ &#x503C;&#x52A0;&#x4E0A; $w$ ( $w$ &#x662F;&#x8FB9;&#x6743;)&#xFF0C;&#x5176;&#x4F59;&#x7684;&#x70B9;&#x51CF;&#x4E0A; $w$ &#x3002; &#x76F4;&#x63A5;&#x7EBF;&#x6BB5;&#x6811;&#x7EF4;&#x62A4;&#x5373;&#x53EF;&#x3002; &#x6CE8;&#x610F;&#x4EE3;&#x7801;&#x91CC;&#x9762;&#x7684; $dis$ &#x6570;&#x7EC4;&#x548C;&#x4E0A;&#x9762;&#x7684;&#x5206;&#x6790;&#x91CC;&#x9762;&#x7684; $dis$ &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768using std::min;#define lc o &lt;&lt; 1#define rc o &lt;&lt; 1 | 1const int N = 5e5 + 7;const ll INF = 0x3f3f3f3f3f3f3f3f;int n, m, x, y, z, dfc, fa[N], dfn[N], num[N], w[N];ll dis[N], ans[N];struct Edge {int to, ne, w;} g[N &lt;&lt; 1]; int head[N], tot;inline void Addedge(int x, int y, int z) {g[++tot].to = y; g[tot].w = z; g[tot].ne = head[x]; head[x] = tot;}struct Question{int l, r; ll *ans;};std::vector&lt;Question&gt; q[N];struct Node{ll val, add;} t[N &lt;&lt; 2];inline void Build(int o, int L, int R) { if (L == R) return (void)(t[o].val = dis[L]); int M = L + R &gt;&gt; 1; Build(lc, L, M); Build(rc, M + 1, R); t[o].val = min(t[lc].val, t[rc].val);}inline void Add(int o, int L, int R, int l, int r, ll k) { // dbg(&quot;o = %d, L = %d, R = %d, l = %d, r = %d, k = %d\\n&quot;, o, L, R, l, r, k); if (l &lt;= L &amp;&amp; R &lt;= r) return (void)(t[o].add += k, t[o].val += k); int M = L + R &gt;&gt; 1; if (l &lt;= M) Add(lc, L, M, l, r, k); if (r &gt; M) Add(rc, M + 1, R, l, r, k); t[o].val = min(t[lc].val, t[rc].val) + t[o].add;}inline ll Qmin(int o, int L, int R, int l, int r) { if (l &lt;= L &amp;&amp; R &lt;= r) return t[o].val; int M = L + R &gt;&gt; 1; if (r &lt;= M) return Qmin(lc, L, M, l, r) + t[o].add; if (l &gt; M) return Qmin(rc, M + 1, R, l, r) + t[o].add; return min(Qmin(lc, L, M, l, r), Qmin(rc, M + 1, R, l, r)) + t[o].add;}inline void dfs_pre(int x) { num[x] = 1; for fec(i, x, y) dfs_pre(y), num[x] += num[y];}inline void dfs(int x) { if(x &gt; 1) { Add(1, 1, n, 1, n, w[x]); Add(1, 1, n, x, x + num[x] - 1, -w[x] &lt;&lt; 1); } for (auto i : q[x]) *i.ans = Qmin(1, 1, n, i.l, i.r); for fec(i, x, y) dfs(y); if(x &gt; 1) { Add(1, 1, n, 1, n, -w[x]); Add(1, 1, n, x, x + num[x] - 1, w[x] &lt;&lt; 1); }}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); for (int i = 2; i &lt;= n; ++i) read(y), read(z), dis[i] = dis[y] + z, Addedge(fa[i] = y, i, w[i] = z); for (int i = 2; i &lt;= n; ++i) dis[fa[i]] = INF; for (int i = 1; i &lt;= m; ++i) read(x), read(y), read(z), q[x].pb((Question){y, z, ans + i}); Build(1, 1, n); dfs_pre(1); dfs(1); for (int i = 1; i &lt;= m; ++i) printf(&quot;%I64d\\n&quot;, ans[i]);} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Codeforces","slug":"Codeforces","permalink":"https://www.violetoj.com/categories/Codeforces/"}],"tags":[],"keywords":[{"name":"Codeforces","slug":"Codeforces","permalink":"https://www.violetoj.com/categories/Codeforces/"}]},{"title":"[AtCoder] NIKKEI Programming Contest 2019 (暂缺F)","slug":"AtCoder-NIKKEI-Programming-Contest-2019-暂缺F","date":"2019-02-13T11:41:00.000Z","updated":"2019-03-18T10:42:10.627Z","comments":true,"path":"2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-暂缺F/","link":"","permalink":"https://www.violetoj.com/2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-暂缺F/","excerpt":"&emsp;&emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。","text":"&#x2003;&#x2003;&#x672C;&#x6765;&#x770B;&#x89C1;&#x8FD9;&#x4E00;&#x573A;&#x7684;&#x6392;&#x540D;&#x7684;&#x753B;&#x98CE;&#x6BD4;&#x8F83;&#x6B63;&#x5E38;&#x5C31;&#x6765;&#x8865;&#x4E00;&#x4E0B;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x53D1;&#x73B0;&#x540E;&#x4E24;&#x9898;&#x7684;AC&#x4EBA;&#x6570;&#x8FDC;&#x5C11;&#x4E8E;&#x6211;&#x8865;&#x7684;&#x4E0A;&#x4E00;&#x4EFD;AtCoder&#x3002; A - Subscribers&#x2003;&#x2003;&#x9996;&#x5148;&#x59CB;&#x7EC8; $max = \\min(A, B)$ &#xFF0C;$min$ &#x7684;&#x8BDD;&#x5982;&#x679C; $A + B \\leq N$ &#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x662F; $0$ &#xFF0C;&#x5426;&#x5219;&#x5C31;&#x662F; $A + B - N$ &#x3002; 1234567int n, a, b;int main() { read(n), read(a), read(b); if (a + b &lt;= n) printf(&quot;%d 0\\n&quot;, std::min(a, b)); else printf(&quot;%d %d\\n&quot;, std::min(a, b), a + b - n);} B - Touitsu&#x2003;&#x2003;&#x76F4;&#x63A5;&#x679A;&#x4E3E;&#x6BCF;&#x4E00;&#x4F4D;&#xFF0C;&#x770B;&#x770B;&#x6709;&#x51E0;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x5C31;&#x884C;&#x4E86;&#x3002; 123456789101112int n, ans;char a[N], b[N], c[N];int main() { scanf(&quot;%d%s%s%s&quot;, &amp;n, a + 1, b + 1, c + 1); for (int i = 1; i &lt;= n; ++i) { if(a[i] == b[i] &amp;&amp; b[i] == c[i]) ; else if(a[i] != b[i] &amp;&amp; a[i] != c[i] &amp;&amp; b[i] != c[i]) ans += 2; else ++ans; } printf(&quot;%d\\n&quot;, ans);} C - Different Strokes&#x2003;&#x2003;&#x633A;&#x597D;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x5C31;&#x662F;&#x6709;&#x70B9;&#x7B80;&#x5355;&#x3002; &#x2003;&#x2003;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x4EBA;&#x6765;&#x8BF4;&#xFF0C;&#x5047;&#x8BBE;&#x4ED6;&#x9009;&#x7684;&#x96C6;&#x5408;&#x662F; $S$ &#xFF0C;&#x4ED6;&#x8981;&#x6700;&#x5927;&#x5316;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#xFF1A; \\sum_{i \\in S} a[i] - \\sum_{i \\notin S} b[i]&#x2003;&#x2003;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5047;&#x8BBE; $B = \\sum \\limits_{i = 1} ^ n b[i]$ &#xFF0C;&#x90A3;&#x4E48;&#x4E0A;&#x5F0F;&#x53EF;&#x5316;&#x4E3A;&#xFF1A; (\\sum_{i \\in S} a[i] +b[i]) -B&#x2003;&#x2003;&#x56E0;&#x6B64;&#x4E0D;&#x7BA1;&#x662F;&#x8C01;&#xFF0C;&#x90FD;&#x5E94;&#x8BE5;&#x5C3D;&#x91CF;&#x9009;&#x62E9; $a[i]+b[i]$ &#x5927;&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x6570;&#x3002;&#x76F4;&#x63A5;&#x7528;&#x4E00;&#x4E2A;&#x5806;&#x7EF4;&#x62A4;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4E86;&#x3002;&#xFF08;&#x4E0D;&#x8FC7;&#x597D;&#x50CF;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6392;&#x4E00;&#x4E0B;&#x5E8F;&#x5C31;&#x53EF;&#x4EE5;&#x5566;&#xFF0C;&#x6211;&#x4F3C;&#x4E4E;&#x50BB;&#x6389;&#x4E86;&#xFF09; 123456789101112131415161718const int N = 1e5 + 7;int n, a[N], b[N];ll ans;struct cmp { int operator () (const int &amp;x, const int &amp;y) const { return a[x] + b[x] &lt; a[y] +b[y]; }};std::priority_queue&lt;int, std::vector&lt;int&gt;, cmp&gt; q;int main() { read(n); for (int i = 1; i &lt;= n; ++i) read(a[i]), read(b[i]), q.push(i); for (int i = 1; i &lt;= n; ++i) if (i &amp; 1) ans += a[q.top()], q.pop(); else ans -= b[q.top()], q.pop(); printf(&quot;%lld\\n&quot;, ans);} D - Restore the Tree&#x2003;&#x2003;&#x600E;&#x4E48;&#x611F;&#x89C9; D &#x6BD4; C &#x8FD8;&#x7B80;&#x5355;&#x554A;&#x3002;&#x81F3;&#x5C11; C &#x8FD8;&#x8981;&#x60F3;&#x4E00;&#x4F1A;&#x513F;&#x5217;&#x4E2A;&#x5F0F;&#x5B50;&#xFF0C; &#x8FD9;&#x9053;&#x9898;&#x597D;&#x50CF;&#x662F;&#x8BFB;&#x5B8C;&#x9898;&#x5C31;&#x53EF;&#x4EE5;&#x5F00;&#x59CB;&#x5199;&#x4E86;&#x3002; &#x2003;&#x2003;&#x56E0;&#x4E3A;&#x4FDD;&#x8BC1;&#x65B0;&#x52A0;&#x7684;&#x8FB9;&#x59CB;&#x7EC8;&#x662F;&#x4ECE;&#x7956;&#x5148;&#x8FDE;&#x5411;&#x5B69;&#x5B50;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x56FE;&#x91CC;&#x9762;&#x7684;&#x8FB9;&#x5B9E;&#x9645;&#x4E0A;&#x8868;&#x793A;&#x4E86;&#x6DF1;&#x5EA6;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#xFF0C;&#x56E0;&#x6B64;&#x6839;&#x80AF;&#x5B9A;&#x8FD8;&#x662F;&#x5165;&#x5EA6;&#x4E3A; 0 &#x7684;&#x3002;&#x627E;&#x5230;&#x6839;&#x4EE5;&#x540E;&#x62D3;&#x6251;&#x6392;&#x5E8F;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4E86;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x62D3;&#x6251;&#x5230; $i$ &#x7684;&#x70B9;&#x5C31;&#x662F; $i$ &#x7684;&#x7236;&#x4EB2;&#x3002; 1234567891011121314151617181920212223242526const int N = 1e5 + 7;int n, m, x, y, rt, idg[N], fa[N];struct Edge {int to, ne;} g[N]; int head[N], tot;inline void Addedge(int x, int y) {g[++tot].to = y; g[tot].ne = head[x]; head[x] = tot;}int q[N], hd, tl;inline void BFS() { q[++tl] = rt; while (hd &lt; tl) { int x = q[++hd]; for fec(i, x, y) if (!--idg[y]) fa[y] = x, q[++tl] = y; }}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n - 1 + m; ++i) read(x), read(y), Addedge(x, y), ++idg[y]; for (int i = 1; i &lt;= n; ++i) if(!idg[i]) rt = i; BFS(); for (int i = 1; i &lt;= n; ++i) printf(&quot;%d\\n&quot;, fa[i]);} E - Weights on Vertices and Edges&#x2003;&#x2003;&#x597D;&#x9898;&#x554A;&#x3002; &#x2003;&#x2003;&#x4E00;&#x5F00;&#x59CB;&#x6211;&#x60F3;&#x7684;&#x662F;&#x80AF;&#x5B9A;&#x8981;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x679A;&#x4E3E;&#x8FB9;&#x8981;&#x4E0D;&#x8981;&#x5220;&#x3002;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#x4E0D;&#x5728;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x4E0A;&#x7684;&#x8FB9;&#x4E0D;&#x7BA1;&#x600E;&#x4E48;&#x5220;&#x90FD;&#x4E0D;&#x5F71;&#x54CD;&#x539F;&#x56FE;&#x7684;&#x8FDE;&#x901A;&#x6027;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x628A;&#x539F;&#x56FE;&#x53D8;&#x6210;&#x4E00;&#x68F5;&#x6811;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4E0A; LCT &#x6765;&#x7EF4;&#x62A4;&#x8FDE;&#x901A;&#x6027;&#x4EE5;&#x53CA;&#x4E00;&#x4E9B;&#x4FE1;&#x606F;&#x3002;&#x4F46;&#x662F;&#x4F3C;&#x4E4E;&#x65B9;&#x6CD5;&#x662F;&#x6210;&#x7ACB;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x989D;&#x5728;AtCoder&#x4E0A;&#x5982;&#x679C;&#x8FD8;&#x8981;&#x5199;LCT&#xFF0C;&#x662F;&#x771F;&#x7684;&#x4E0D;&#x6562;&#x60F3;&#x554A;&#x3002; &#x2003;&#x2003;&#x4E8E;&#x662F;&#x53C8;&#x601D;&#x8003;&#x4E86;&#x4E00;&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;&#x4E5F;&#x6CA1;&#x4EC0;&#x4E48;&#x65B0;&#x601D;&#x8DEF;&#xFF0C;&#x53EA;&#x80FD;&#x53BB;&#x770B;&#x4E86;&#x4E00;&#x4E0B;&#x9898;&#x89E3;&#x3002; &#x2003;&#x2003;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;&#x4E8E;&#x5220;&#x8FB9;&#x53D1;&#x8FC7;&#x6765;&#xFF0C;&#x53D8;&#x6210;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x52A0;&#x8FB9;&#xFF0C;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#x6765;&#x7EF4;&#x62A4;&#x4E00;&#x4E0B;&#x6BCF;&#x4E2A;&#x8054;&#x901A;&#x5757;&#x7684;&#x70B9;&#x6743;&#x548C;&#x3002;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4F1A;&#x53D1;&#x73B0;&#xFF0C;&#x6709;&#x4E9B;&#x8FB9;&#x53EF;&#x80FD;&#x4E4B;&#x524D;&#x662F;&#x4E0D;&#x80FD;&#x52A0;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x968F;&#x7740;&#x540E;&#x7EED;&#x7684;&#x52A0;&#x8FB9;&#xFF0C;&#x8054;&#x901A;&#x5757;&#x6269;&#x5927;&#x4E86;&#xFF0C;&#x90A3;&#x4E9B;&#x8FB9;&#x5C31;&#x53EF;&#x4EE5;&#x52A0;&#x5165;&#x4E86;&#xFF01; &#x2003;&#x2003;&#x9898;&#x89E3;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x5F88;&#x5DE7;&#x5999;&#x7684;&#x529E;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5BF9;&#x4E8E;&#x90A3;&#x6837;&#x7684;&#x8FB9;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x5B83;&#x4EEC;&#x7684;&#x8054;&#x901A;&#x5757;&#x5148;&#x8FDE;&#x8D77;&#x6765;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x67E5;&#x96C6;&#x8981;&#x8BB0;&#x5F55;&#x6240;&#x6709;&#x5E76;&#x6CA1;&#x6709;&#x771F;&#x6B63;&#x52A0;&#x8FDB;&#x53BB;&#x7684;&#x8FB9;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x663E;&#x7136;&#x540E;&#x9762;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x771F;&#x6B63;&#x52A0;&#x8FB9;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x628A;&#x8BE5;&#x8054;&#x901A;&#x5757;&#x5E76;&#x5B8C;&#x4EE5;&#x540E;&#xFF0C;&#x91CC;&#x9762;&#x6CA1;&#x6709;&#x52A0;&#x7684;&#x8FB9;&#x90FD;&#x52A0;&#x8FDB;&#x53BB;&#x4E86;&#x3002; 123456789101112131415161718192021222324252627282930const int N = 1e5 + 7;int n, m, w[N], ans;struct Edge{int x, y, z;} g[N];int fa[N], num[N];ll sum[N];inline int Find(int x) {return fa[x] == x ? x : fa[x] = Find(fa[x]);}inline void Union(int x, int y) { fa[y = Find(y)] = x = Find(x); num[x] += num[y], num[y] = 0; sum[x] += sum[y], sum[y] = 0;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n; ++i) read(w[i]), fa[i] = i, sum[i] = w[i]; for (int i = 1; i &lt;= m; ++i) read(g[i].x), read(g[i].y), read(g[i].z); std::sort(g + 1, g + m +1, [](const Edge &amp;a, const Edge &amp;b){return a.z &lt; b.z;}); for (int i = 1; i &lt;= m; ++i) { int x = Find(g[i].x), y = Find(g[i].y), z = g[i].z; if (Find(x) != Find(y)) Union(x, y); ++num[x]; if (sum[x] &gt;= z) ans += num[x], num[x] = 0; } printf(&quot;%d\\n&quot;, m - ans);} &#x2003;&#x2003;&#x540E;&#x6765;&#x5230;&#x7F51;&#x4E0A;&#x53C8;&#x7FFB;&#x4E86;&#x4E00;&#x4F1A;&#x513F;&#x9898;&#x89E3;&#xFF0C;&#x53D1;&#x73B0;&#x6211;&#x4E4B;&#x524D;&#x7684;&#x65B9;&#x6CD5;&#x8FD8;&#x662F;&#x6709;&#x6551;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x6709;&#x4E24;&#x79CD;&#x89E3;&#x6551;&#x7684;&#x529E;&#x6CD5;&#x3002; &#x2003;&#x2003;&#x7B2C;&#x4E00;&#x79CD;&#x662F;&#x901A;&#x8FC7;&#x4E0D;&#x5E26;&#x8DEF;&#x5F84;&#x538B;&#x7F29;&#xFF0C;&#x53EA;&#x7528;&#x6309;&#x79E9;&#x5408;&#x5E76;&#x6765;&#x505A;&#x7684;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x8FD9;&#x79CD;&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x5355;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F; $O(\\log n)$ &#x7684;&#xFF0C;&#x800C;&#x4E14;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x8DEF;&#x5F84;&#x538B;&#x7F29;&#xFF0C;&#x53EF;&#x4EE5;&#x5F88;&#x65B9;&#x4FBF;&#x5730;&#x5B9E;&#x73B0; Cut &#x64CD;&#x4F5C;&#xFF0C;&#x6BD4; LCT &#x597D;&#x5199;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x5C31;&#x53EA;&#x9002;&#x5408;&#x8FD9;&#x9053;&#x9898;&#x4E86;&#xFF0C;&#x5E76;&#x67E5;&#x96C6;&#x6269;&#x5C55;&#x6027;&#x6CA1;&#x6709; LCT &#x597D;&#x3002; &#x2003;&#x2003;&#x7B2C;&#x4E8C;&#x79CD;&#x662F;&#x5EFA;&#x7ACB; Kruskal &#x91CD;&#x6784;&#x6811;&#x3002;&#x90A3;&#x4E48;&#x5728;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x679A;&#x4E3E;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x91CC;&#x9762;&#x7684;&#x8FB9;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E00;&#x6761;&#x8FB9;&#xFF0C;&#x5982;&#x679C;&#x5176;&#x7236;&#x4EB2;&#x6CA1;&#x6709;&#x88AB;&#x5220;&#x9664;&#xFF0C;&#x90A3;&#x4E48;&#x663E;&#x7136;&#x4ED6;&#x81EA;&#x5DF1;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x88AB;&#x5220;&#x9664;&#x4E86;&#x3002;&#x56E0;&#x6B64;&#x5982;&#x679C;&#x5224;&#x65AD;&#x7684;&#x8BDD;&#xFF0C;&#x9996;&#x5148;&#x5224;&#x65AD;&#x5176;&#x7236;&#x4EB2;&#x6709;&#x6CA1;&#x6709;&#x88AB;&#x5220;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x770B;&#x770B;&#x5176;&#x6240;&#x5728;&#x8054;&#x901A;&#x5757;&#x7684;&#x70B9;&#x6743;&#x548C;&#x2014;&#x2014;&#x5176;&#x73B0;&#x5728;&#x6240;&#x5728;&#x8054;&#x901A;&#x5757;&#x5C31;&#x662F;&#x5728;&#x91CD;&#x6784;&#x6811;&#x4E0A;&#x7684;&#x5B50;&#x6811;&#xFF01;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x4E3A;&#x5220;&#x8FB9;&#x65F6;&#x4E00;&#x5B9A;&#x662F;&#x4ECE;&#x6839;&#x5C71;&#x9053;&#x8FD9;&#x6761;&#x8FB9;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x66F4;&#x8BE5;&#x5176;&#x7956;&#x5148;&#x7684;&#x5B50;&#x6811;&#x548C;&#x7684;&#x4FE1;&#x606F;&#x3002; &#x2003;&#x2003;&#x6B64;&#x4E0A;&#x4E09;&#x4E2D;&#x65B9;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F; $O(m\\log n)$ &#x3002;&#x6211;&#x5C31;&#x53EA;&#x5199;&#x4E86;&#x7B2C;&#x4E00;&#x79CD;&#x3002; F - Jewels&#x2003;&#x2003;&#x60F3;&#x4E86;&#x4E24;&#x4E2A;&#x5C0F;&#x65F6;&#x4E5F;&#x4E0D;&#x4F1A;&#x505A;&#xFF0C;&#x4E0A;&#x7F51;&#x627E;&#x9898;&#x89E3;&#x4E5F;&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x770B;&#x6765;&#x6211;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x53BB;&#x7814;&#x8BFB;&#x4E00;&#x4E0B;&#x5B98;&#x65B9;&#x7684;&#x82F1;&#x6587;&#x9898;&#x89E3;&#x3002;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x6211;&#x82F1;&#x8BED;&#x6BD4;&#x8F83;&#x70C2;&#xFF0C;&#x6240;&#x4EE5;F&#x53EF;&#x80FD;&#x8981;&#x5495;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"AtCoder","slug":"AtCoder","permalink":"https://www.violetoj.com/categories/AtCoder/"}],"tags":[],"keywords":[{"name":"AtCoder","slug":"AtCoder","permalink":"https://www.violetoj.com/categories/AtCoder/"}]},{"title":"[AtCoder] Yahoo Programming Contest 2019","slug":"AtCoder-Yahoo-Programming-Contest-2019","date":"2019-02-12T02:31:00.000Z","updated":"2019-03-18T12:55:07.786Z","comments":true,"path":"2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/","link":"","permalink":"https://www.violetoj.com/2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/","excerpt":"&emsp;&emsp;很遗憾错过了一场 AtCoder 。听说这场是涨分场呢，于是特意来补一下题。","text":"&#x2003;&#x2003;&#x5F88;&#x9057;&#x61BE;&#x9519;&#x8FC7;&#x4E86;&#x4E00;&#x573A; AtCoder &#x3002;&#x542C;&#x8BF4;&#x8FD9;&#x573A;&#x662F;&#x6DA8;&#x5206;&#x573A;&#x5462;&#xFF0C;&#x4E8E;&#x662F;&#x7279;&#x610F;&#x6765;&#x8865;&#x4E00;&#x4E0B;&#x9898;&#x3002; A - Anti-Adjacency&#x2003;&#x2003;&#x663E;&#x7136; $K \\leq \\frac{N + 1}2$ 12345678910int n, k;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(k); if (k &lt;= (n + 1 &gt;&gt; 1)) puts(&quot;YES&quot;); else puts(&quot;NO&quot;);} B - Path&#x2003;&#x2003;&#x6B27;&#x62C9;&#x8DEF;&#x3002; 123456789101112const int N = 7;int n = 4, x, y, deg[N], jcnt;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif for (int i = 1; i &lt; n; ++i) read(x), read(y), ++deg[x], ++deg[y]; for (int i = 1; i &lt;= n; ++i) if(deg[i] &amp; 1) ++jcnt; if (jcnt == 0 ||jcnt == 2) puts(&quot;YES&quot;); else puts(&quot;NO&quot;);} C - When I hit my pocket&#x2026;&#x2003;&#x2003;&#x5982;&#x679C; $B-A\\leq 2$&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x76F4;&#x63A5;&#x62CD;&#x997C;&#x5E72;&#x80AF;&#x5B9A;&#x4E0D;&#x6BD4;&#x505A;&#x4EA4;&#x6613;&#x5DEE;&#x3002; &#x2003;&#x2003;&#x5426;&#x5219;&#xFF0C;&#x5C31;&#x5148;&#x628A;&#x997C;&#x5E72;&#x6570;&#x62CD;&#x5230; $A$ &#xFF0C;&#x7136;&#x540E;&#x5C31;&#x5356;&#x4E00;&#x6B21;&#x4E70;&#x4E00;&#x6B21;&#xFF0C;&#x6700;&#x540E;&#x5982;&#x679C;&#x8FD8;&#x6709;&#x5355;&#x72EC;&#x7684;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x5C31;&#x62CD;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 1234567891011121314151617int k, a, b;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(k), read(a), read(b); if (b - a &lt;= 2) return printf(&quot;%d\\n&quot;, k + 1), 0; if (k &lt;= a - 1) return printf(&quot;%d\\n&quot;, k + 1), 0; else{ ll ans = 1; ans += a - 1; k -= a - 1; ans += (ll)(k &gt;&gt; 1) * (b - a); if (k &amp; 1) ++ans; printf(&quot;%lld\\n&quot;, ans); }} D - Ears&#x2003;&#x2003;D&#x9898;&#x5C31;&#x5F00;&#x59CB;&#x6BD4; A, B, C &#x6709;&#x601D;&#x7EF4;&#x5566;&#x3002; &#x2003;&#x2003;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728;&#x8D70;&#x8DEF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x4EE5;&#x4E00;&#x76F4;&#x91CD;&#x590D;&#x6765;&#x56DE;&#x8D70;&#x4E00;&#x4E2A;&#x683C;&#x5B50;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4E0D;&#x6539;&#x53D8;&#x683C;&#x5B50;&#x7684;&#x503C;&#x5F97;&#x5947;&#x5076;&#x6027;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4EFB;&#x610F;&#x6539;&#x53D8;&#x4E0A;&#x9762;&#x7684;&#x6570;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x8054;&#x60F3;&#x5230;&#x5947;&#x5076;&#x6027;&#x4EE5;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5C06;&#x8D70;&#x5076;&#x6570;&#x6B21;&#x89C6;&#x4E3A;&#x6CA1;&#x6709;&#x8D70;&#x7684;&#x8BDD;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E2A;&#x8F68;&#x8FF9;&#x6700;&#x540E;&#x5C31;&#x662F;&#x4E00;&#x6761;&#x76F4;&#x7EBF;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; &#x5076;&#x2014;&#x2014;&#x5947;&#x2014;&#x2014;&#x5076;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x6211;&#x5C31;&#x5F88;&#x5929;&#x771F;&#x5730;&#x5F00;&#x59CB;&#x5199;&#x2014;&#x2014;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x4F8B;&#x6B7B;&#x6D3B;&#x8FC7;&#x4E0D;&#x53BB;&#x3002;&#x597D;&#x5427;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x60F3;&#x8981;&#x67D0;&#x4E2A;&#x683C;&#x5B50;&#x8D70;0&#x6B21;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x4E0D;&#x6EE1;&#x8DB3;&#x4E0A;&#x9762;&#x7684;&#x89C4;&#x5F8B;&#x4E86;&#x2014;&#x2014;&#x56E0;&#x4E3A;0&#x6B21;&#x9700;&#x8981;&#x4E25;&#x683C;&#x5730;&#x4E0D;&#x8D70;&#x3002;&#x6240;&#x4EE5;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; 0&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5947;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;0&#x3002;&#x5176;&#x4E2D;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x7684;&#x4EFB;&#x4F55;&#x4E00;&#x9879;&#x90FD;&#x53EF;&#x4EE5;&#x4E0D;&#x5B58;&#x5728;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x5904;&#x5728;&#x90A3;&#x4E00;&#x6BB5;&#xFF0C;&#x76F4;&#x63A5;dp&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 12345678910111213141516171819202122const int N = 2e5 + 7;const ll INF = 0x3f3f3f3f3f3f3f3f;int n, a[N];ll dp[N][5], ans = INF;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n); for (int i = 1; i &lt;= n; ++i) read(a[i]); dp[0][1] = dp[0][2] = dp[0][3] = dp[0][4] = INF; for (int i = 1; i &lt;= n; ++i) { dp[i][0] = dp[i - 1][0] + a[i]; dp[i][1] = std::min(dp[i - 1][0], dp[i - 1][1]) + (a[i] ? (a[i] &amp; 1) : 2); dp[i][2] = std::min(std::min(dp[i - 1][1], dp[i - 1][2]), dp[i - 1][0]) + (a[i] &amp; 1 ^ 1); dp[i][3] = std::min(dp[i - 1][2], dp[i - 1][3]) + (a[i] ? (a[i] &amp; 1) : 2); dp[i][4] = std::min(std::min(dp[i - 1][1], dp[i - 1][2]), std::min(dp[i - 1][3], dp[i - 1][4])) + a[i]; } for (int i = 0; i &lt; 5; ++i) SMIN(ans, dp[n][i]); printf(&quot;%lld\\n&quot;, ans);} E - Odd Subrectangles&#x2003;&#x2003;&#x6211;&#x4E2A;&#x4EBA;&#x611F;&#x89C9;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x8FD9;&#x4E00;&#x573A;&#x91CC;&#x9762;&#x6700;&#x96BE;&#x7684;&#xFF0C;&#x6BD4;F&#x8FD8;&#x8981;&#x96BE;&#x3002;&#x6211;&#x4E00;&#x5F00;&#x59CB;&#x60F3;dp&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x4E0D;&#x592A;&#x884C;&#x3002;&#x7136;&#x540E;&#x60F3;&#x4E86;&#x534A;&#x5929;&#x60F3;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x53EA;&#x80FD;&#x770B;&#x4E86;&#x4E00;&#x773C;&#x9898;&#x89E3;&#x7684;&#x524D;&#x51E0;&#x53E5;&#x8BDD;&#x3002;&#x76F4;&#x63A5;&#x628A;&#x90A3;&#x4E24;&#x53E5;&#x8BDD;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x5427;&#x3002; &#x2003;&#x2003;&#x201D;&#x5982;&#x679C;&#x9009;&#x7684;&#x884C;&#x6570;&#x786E;&#x5B9A;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x9009;&#x67D0;&#x4E00;&#x5217;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E5F;&#x4F1A;&#x786E;&#x5B9A;&#x3002;&#x201C;&#x4E3B;&#x8981;get&#x5230;&#x5047;&#x8BBE;&#x9009;&#x7684;&#x884C;&#x5148;&#x786E;&#x5B9A;&#x7684;&#x601D;&#x8DEF;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x63A8;&#xFF0C;&#x90A3;&#x4E48;&#x60F3;&#x8981;&#x8BA9;&#x9009;&#x7684;&#x5217;&#x52A0;&#x8D77;&#x6765;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E3A;&#x5076;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x80FD;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x548C;&#x662F;&#x5947;&#x6570;&#x5217;&#xFF0C;&#x548C;&#x662F;&#x5076;&#x6570;&#x7684;&#x968F;&#x4FBF;&#x9009;&#x591A;&#x5C11;&#x3002; &#x2003;&#x2003;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x6709; $a$ &#x4E2A;&#x5076;&#x6570;&#x5217;&#xFF0C; $b$ &#x4E2A;&#x5947;&#x6570;&#x5217;&#x3002;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x9009;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F; $&#x4E14;&#x662F;&#x5947;&#x6570;2^a \\cdot \\sum \\limits_{i\\leq b\\text{&#x4E14;}i&#x662F;&#x5947;&#x6570;}{C_b^{i}} = 2^a \\cdot 2^{b-1} = 2^{m-1}$&#x3002;&#x6240;&#x4EE5;&#x4E0D;&#x7BA1;&#x600E;&#x4E48;&#x9009;&#x884C;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x603B;&#x662F; $2^{m-1}$ &#x2014;&#x2014;&#x4F46;&#x662F;&#xFF0C;$b$ &#x5982;&#x679C;&#x662F; $0$ &#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x6CA1;&#x529E;&#x6CD5;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x5947;&#x6570;&#x5217;&#x4E86;&#xFF01;&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x4E00;&#x884C;&#x770B;&#x505A;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9009;&#x7684;&#x8FD9;&#x4E9B;&#x884C;&#x7684;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x5E94;&#x8BE5;&#x4E3A; $0$&#xFF01; &#x200B; &#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5957;&#x8DEF;&#x4E86;&#x3002;&#x8BC1;&#x660E;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x767E;&#x5EA6;&#xFF0C;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8FD9;&#x91CC;&#x7ED9;&#x51FA;&#x7ED3;&#x8BBA;&#xFF1A;&#x5982;&#x679C;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5927;&#x5C0F;&#x662F;$r$ &#xFF0C;&#x539F;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x4E3A; $n$&#xFF0C;&#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x4E3A; $2^n - 2^{n-r}$&#x3002; 12345678910111213141516171819202122232425262728const int N = 300 + 7;const int P = 998244353;int n, m, a[N][N], b[N][N], r;inline int fpow(int x, int y) { int ans = 1; for (; y; y &gt;&gt;= 1, x = (ll)x * x % P) if (y &amp; 1) ans = (ll)ans * x % P; return ans;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n; ++i) for (int j = 1; j &lt;= m; ++j) read(a[i][j]); for (int i = 1; i &lt;= n; ++i){ for (int j = 1; j &lt;= m; ++j) if (a[i][j]) if (!b[j][j]) { for (int k = 1; k &lt;= m; ++k) b[j][k] = a[i][k]; ++r; break; } else for (int k = 1; k &lt;= m; ++k) a[i][k] ^= b[j][k]; } printf(&quot;%lld\\n&quot;, (ll)fpow(2, m - 1) * (fpow(2, n) + P - fpow(2, n - r)) % P);} F - Pass&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x95EE;&#x5E8F;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x7684;&#x9898;&#x76EE;&#x7684;&#x5957;&#x8DEF;&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x8003;&#x8651;&#x76F4;&#x63A5;&#x6784;&#x9020;&#x5E8F;&#x5217;&#xFF0C;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x9700;&#x8981;&#x6EE1;&#x8DB3;&#x7684;&#x7279;&#x5F81;&#x3002; &#x2003;&#x2003;&#x53D1;&#x73B0;&#x5BF9;&#x4E8E;&#x5E8F;&#x5217;&#x7684;&#x524D; $i$ &#x9879;&#xFF08;$1 \\leq i \\leq n$ &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E0D;&#x5305;&#x62EC;&#x540E; $n$ &#x9879;&#xFF09;&#xFF0C;&#x4ED6;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x7403;&#x4E00;&#x5B9A;&#x53EA;&#x80FD;&#x6765;&#x81EA;&#x524D; $i$ &#x4E2A;&#x4EBA;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x7EA2;&#x7403;&#x548C;&#x84DD;&#x7403;&#x7684;&#x6570;&#x91CF;&#x90FD;&#x6709;&#x4E86;&#x4E0A;&#x9650;&#xFF0C;&#x4E5F;&#x540C;&#x65F6;&#x56E0;&#x4E3A;&#x5BF9;&#x65B9;&#x7684;&#x4E0A;&#x9650;&#x4E5F;&#x6709;&#x4E86;&#x4E0B;&#x9650;&#x3002; &#x2003;&#x2003;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#x5C31;&#x662F; dp &#x7684;&#x88F8;&#x9898;&#x4E86;&#x3002;&#x8BBE; $dp[i][j]$ &#x8868;&#x793A;&#x524D; $i$ &#x6B65;&#xFF0C;&#x62FF;&#x4E86; $j$ &#x4E2A;&#x84DD;&#x7403;&#x7684;&#x65B9;&#x6848;&#x6570;&#xFF0C;&#x8BA8;&#x8BBA;&#x8FD9;&#x4E00;&#x90E8;&#x62FF;&#x7EA2;&#x7403;&#x8FD8;&#x662F;&#x84DD;&#x7403;&#x8F6C;&#x79FB;&#x4E00;&#x4E0B;&#x5C31;&#x597D;&#x4E86;&#x3002; 12345678910111213141516171819202122232425const int N = 2000 + 7;const int P = 998244353;int n, cntb[N &lt;&lt; 1], dp[N &lt;&lt; 1][N &lt;&lt; 1];char s[N];inline void Inc(int &amp;x, int y) {x += y; x &gt;= P ? x -= P : 0;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif scanf(&quot;%s&quot;, s + 1); n = strlen(s + 1); for (int i = 1; i &lt;= n; ++i) cntb[i] = cntb[i - 1] + s[i] - &apos;0&apos;; for (int i = n + 1; i &lt;= (n &lt;&lt; 1); ++i) cntb[i] = cntb[i - 1]; dp[0][0] = 1; for (int i = 1; i &lt;= (n &lt;&lt; 1); ++i) { for (int j = std::max(cntb[i] - i, 0); j &lt;= std::min(cntb[i], i); ++j) { if (j) dp[i][j] = dp[i - 1][j - 1]; if (i &gt; j) Inc(dp[i][j], dp[i - 1][j]); // dbg(&quot;dp[%d][%d] = %d\\n&quot;, i, j, dp[i][j]); } } printf(&quot;%d\\n&quot;, dp[n &lt;&lt; 1][cntb[n]]);} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"AtCoder","slug":"AtCoder","permalink":"https://www.violetoj.com/categories/AtCoder/"}],"tags":[],"keywords":[{"name":"AtCoder","slug":"AtCoder","permalink":"https://www.violetoj.com/categories/AtCoder/"}]},{"title":"Codeforces Round #538 (Div. 2)(CF1114)","slug":"Codeforces-Round538-(Div. 2)-(CF1114)","date":"2019-02-11T10:56:00.000Z","updated":"2019-03-23T12:01:36.184Z","comments":true,"path":"2019/02/11/Codeforces-Round538-(Div. 2)-(CF1114)/","link":"","permalink":"https://www.violetoj.com/2019/02/11/Codeforces-Round538-(Div. 2)-(CF1114)/","excerpt":"&emsp;&emsp;今天昨天晚上的cf打的非常惨（仅代表淮中最低水平 &emsp;&emsp;先是一路缓慢地才A掉B,C，然后就开始杠D。于是写出了一个O(n^2)的线性dp，然后就wa6，调到结束。结束后发现完全看漏了两句话。噢，起始点！！！ &emsp;&emsp;好吧然后算算自己有可能这一场要变成+0，反正在0左右。结束后开始然后开始写D，顺便思考F。结果写完D发现A怎么fst了，然后。。。因为习惯于对相似的语句复制粘贴，有些东西没有改——三句话都在 -a！！！（这个还能过pt？ &emsp;&emsp;好吧想完F以后又顺便看了一下。发现怎么B也fst了？？？发现好像忘了考虑相同的数的问题。。。 &emsp;&emsp;还好C没有fst。所以大概不多不少，可以把上一场涨的分数给抵掉。 &emsp;&emsp;也是wph学长说的好，这些都是用血换来的教训啊。（但是看错题真的不应该，这是在NOIP就犯过的错啊。","text":"&#x2003;&#x2003;&#x4ECA;&#x5929;&#x6628;&#x5929;&#x665A;&#x4E0A;&#x7684;cf&#x6253;&#x7684;&#x975E;&#x5E38;&#x60E8;&#xFF08;&#x4EC5;&#x4EE3;&#x8868;&#x6DEE;&#x4E2D;&#x6700;&#x4F4E;&#x6C34;&#x5E73; &#x2003;&#x2003;&#x5148;&#x662F;&#x4E00;&#x8DEF;&#x7F13;&#x6162;&#x5730;&#x624D;A&#x6389;B,C&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x5F00;&#x59CB;&#x6760;D&#x3002;&#x4E8E;&#x662F;&#x5199;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;O(n^2)&#x7684;&#x7EBF;&#x6027;dp&#xFF0C;&#x7136;&#x540E;&#x5C31;wa6&#xFF0C;&#x8C03;&#x5230;&#x7ED3;&#x675F;&#x3002;&#x7ED3;&#x675F;&#x540E;&#x53D1;&#x73B0;&#x5B8C;&#x5168;&#x770B;&#x6F0F;&#x4E86;&#x4E24;&#x53E5;&#x8BDD;&#x3002;&#x5662;&#xFF0C;&#x8D77;&#x59CB;&#x70B9;&#xFF01;&#xFF01;&#xFF01; &#x2003;&#x2003;&#x597D;&#x5427;&#x7136;&#x540E;&#x7B97;&#x7B97;&#x81EA;&#x5DF1;&#x6709;&#x53EF;&#x80FD;&#x8FD9;&#x4E00;&#x573A;&#x8981;&#x53D8;&#x6210;+0&#xFF0C;&#x53CD;&#x6B63;&#x5728;0&#x5DE6;&#x53F3;&#x3002;&#x7ED3;&#x675F;&#x540E;&#x5F00;&#x59CB;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x5199;D&#xFF0C;&#x987A;&#x4FBF;&#x601D;&#x8003;F&#x3002;&#x7ED3;&#x679C;&#x5199;&#x5B8C;D&#x53D1;&#x73B0;A&#x600E;&#x4E48;fst&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x3002;&#x3002;&#x3002;&#x56E0;&#x4E3A;&#x4E60;&#x60EF;&#x4E8E;&#x5BF9;&#x76F8;&#x4F3C;&#x7684;&#x8BED;&#x53E5;&#x590D;&#x5236;&#x7C98;&#x8D34;&#xFF0C;&#x6709;&#x4E9B;&#x4E1C;&#x897F;&#x6CA1;&#x6709;&#x6539;&#x2014;&#x2014;&#x4E09;&#x53E5;&#x8BDD;&#x90FD;&#x5728; -a&#xFF01;&#xFF01;&#xFF01;&#xFF08;&#x8FD9;&#x4E2A;&#x8FD8;&#x80FD;&#x8FC7;pt&#xFF1F; &#x2003;&#x2003;&#x597D;&#x5427;&#x60F3;&#x5B8C;F&#x4EE5;&#x540E;&#x53C8;&#x987A;&#x4FBF;&#x770B;&#x4E86;&#x4E00;&#x4E0B;&#x3002;&#x53D1;&#x73B0;&#x600E;&#x4E48;B&#x4E5F;fst&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x5FD8;&#x4E86;&#x8003;&#x8651;&#x76F8;&#x540C;&#x7684;&#x6570;&#x7684;&#x95EE;&#x9898;&#x3002;&#x3002;&#x3002; &#x2003;&#x2003;&#x8FD8;&#x597D;C&#x6CA1;&#x6709;fst&#x3002;&#x6240;&#x4EE5;&#x5927;&#x6982;&#x4E0D;&#x591A;&#x4E0D;&#x5C11;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x4E0A;&#x4E00;&#x573A;&#x6DA8;&#x7684;&#x5206;&#x6570;&#x7ED9;&#x62B5;&#x6389;&#x3002; &#x2003;&#x2003;&#x4E5F;&#x662F;wph&#x5B66;&#x957F;&#x8BF4;&#x7684;&#x597D;&#xFF0C;&#x8FD9;&#x4E9B;&#x90FD;&#x662F;&#x7528;&#x8840;&#x6362;&#x6765;&#x7684;&#x6559;&#x8BAD;&#x554A;&#x3002;&#xFF08;&#x4F46;&#x662F;&#x770B;&#x9519;&#x9898;&#x771F;&#x7684;&#x4E0D;&#x5E94;&#x8BE5;&#xFF0C;&#x8FD9;&#x662F;&#x5728;NOIP&#x5C31;&#x72AF;&#x8FC7;&#x7684;&#x9519;&#x554A;&#x3002; A. Got Any Grapes?&#x2003;&#x2003;&#x8FD9;&#x79CD;&#x9898;&#x76EE;&#x76F4;&#x63A5;&#x505A;&#xFF0C;&#x663E;&#x7136;&#x662F;&#x5148;&#x5C3D;&#x91CF;&#x4F9B;&#x7ED9;Andrew&#xFF0C;&#x7136;&#x540E;&#x662F;Dmitry&#xFF0C;&#x6700;&#x540E;&#x662F;Michal&#x3002; &#x2003;&#x2003;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x4E0D;&#x8981;&#x72AF;&#x6211;&#x72AF;&#x8FC7;&#x7684;&#x9519;&#x8BEF;&#x3002;&#xFF08;&#x4EE5;&#x540E;&#x8BB0;&#x5F97;&#x590D;&#x5236;&#x7C98;&#x8D34;&#x76F8;&#x4F3C;&#x5185;&#x5BB9;&#x7684;&#x65F6;&#x5019;&#x6CE8;&#x610F;&#x4FEE;&#x6539;&#x5168;&#x6240;&#x6709;&#x8BE5;&#x4FEE;&#x6539;&#x7684;&#x4E1C;&#x897F;&#x554A;&#xFF09; 1234567891011121314int x, y, z, a, b, c;inline void End() {puts(&quot;NO&quot;); exit(0);}int main() { read(a), read(b), read(c); read(x), read(y), read(z); if (x &lt; a) End(); else x -= a; y += x; if (y &lt; b) End(); else y -= b; z += y; if (z &lt; c) End(); else z -= c; puts(&quot;YES&quot;);} B. Yet Another Array Partitioning Task&#x2003;&#x2003;CF&#x4E0A;&#x7684;B&#x9898;&#x4E00;&#x822C;&#x90FD;&#x662F;&#x5927;&#x80C6;&#x731C;&#x7ED3;&#x8BBA;&#x9898;&#x76EE;&#x3002; &#x2003;&#x2003;&#x76F4;&#x63A5;&#x731C;&#x7ED3;&#x8BBA;&#xFF1A; &#x4E00;&#x5B9A;&#x53EF;&#x4EE5;&#x9009;&#x9F50;&#x524D; $m \\cdot k$ &#x5927;&#x7684;&#x6570;&#x3002;&#x7136;&#x540E;&#x5206;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x8981;&#x51D1;&#x9F50; $m$ &#x4E2A;&#x5728;&#x524D; $m \\cdot k$ &#x5927;&#x7684;&#x6570;&#x4E2D;&#x7684;&#x6570;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5207;&#x4E00;&#x5757;&#x3002; &#x2003;&#x2003;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;&#xFF08;&#x4E5F;&#x662F;&#x6211;fst&#x7684;&#x539F;&#x56E0;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x524D; $m \\cdot k$ &#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x6CA1;&#x6709;&#x88AB;&#x9009;&#x5168;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x5206;&#x7684;&#x65F6;&#x5019;&#x8981;&#x6CE8;&#x610F;&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x90A3;&#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x9009;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#xFF0C;&#x4E0D;&#x591F;&#x9009;&#x4E86;&#x5C31;&#x4E0D;&#x8981;&#x628A;&#x5B83;&#x7B97;&#x4E0A;&#x53BB;&#x3002; 1234567891011121314151617const int N = 2e5 + 7;int n, m, k, p, a[N], b[N];ll ans;std::map&lt;int, int&gt; mp;int main() { read(n), read(m), read(k); p = m * k; --k; for (int i = 1; i &lt;= n; ++i) read(a[i]), b[i] = a[i]; std::sort(b + 1, b + n + 1); for (int i = n - p + 1; i &lt;= n; ++i) ans += b[i], mp[b[i]]++; printf(&quot;%I64d\\n&quot;, ans); for (int i = 1, cnt = 0; i &lt;= n; ++i) { if (mp.count(a[i]) &amp;&amp; mp[a[i]]) ++cnt, --mp[a[i]]; if (cnt == m) --k, printf(&quot;%d%c&quot;, i, &quot; \\n&quot;[k == 0]), cnt = 0; if (!k) return 0; }} C. Trailing Loves (or L&#x2019;oeufs?)&#x2003;&#x2003;&#x5728; $b$ &#x8FDB;&#x5236;&#x4E0B;&#x672B;&#x5C3E;&#x6709; $k$ &#x4E2A;0&#xFF0C;&#x90A3;&#x4E48;&#x8BF4;&#x660E; \\quad b ^ k | n!&#x2003;&#x2003;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x628A; $b$ &#x5206;&#x89E3;&#x8D28;&#x56E0;&#x6570; (p_1^{k_1} \\cdot p_2^{k_2} \\cdot \\cdots) ^k | n!&#x2003;&#x2003;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x53D1;&#x73B0; k = \\min\\{\\log_{p_1} n!,\\ \\log_{p_2}{n!},\\ \\cdots\\ \\}&#x2003;&#x2003;&#x81F3;&#x4E8E;&#x8BF4; $\\log_p{n!}$ &#x600E;&#x4E48;&#x6C42;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x662F;&#x666E;&#x53CA;&#x7EC4;&#x77E5;&#x8BC6;&#x4E86;&#x3002; \\log_p n!= \\sum_{i = 1} \\lfloor \\frac n {p ^ i} \\rfloor12345678910111213141516171819202122232425262728293031const int N = 1e6 + 7;ll n, m, ans = 0x7fffffffffffffff;int np[N], p[N], prt, cnt[N];inline void Make_Prime(int n ){ np[0] = np[1] = 1; for (int i = 2; i &lt;= n; ++i) { if (!np[i]) p[++prt] = i; for (int j = 1; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j) { np[i * p[j]] = 1; if (i % p[j]) break; } }}inline ll GetNum(ll n, ll x) { ll ans = 0; while (n) ans += n /= x; return ans;}int main() { read(n), read(m); Make_Prime(sqrt(m)); ll hkk = m; for (int i = 1; i &lt;= prt; ++i) while (hkk % p[i] == 0) hkk /= p[i], ++cnt[i]; for (int i = 1; i &lt;= prt; ++i) if (cnt[i]) SMIN(ans, GetNum(n, p[i]) / cnt[i]); if (hkk &gt; 1) SMIN(ans, GetNum(n, hkk)); printf(&quot;%I64d\\n&quot;, ans);} D. Flood Fill&#x2003;&#x2003;&#x8FD9;&#x9053;&#x9898;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x770B;&#x89C1;&#x8D77;&#x59CB;&#x65B9;&#x5757;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#xFF0C;&#x4E00;&#x76F4;wa6&#x3002; &#x2003;&#x2003;&#x5982;&#x679C;&#x6709;&#x8D77;&#x59CB;&#x70B9;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x533A;&#x95F4;dp&#x6A21;&#x677F;&#x4E86;&#x3002; &#x2003;&#x2003;&#x8BBE; $dp[i][j]$ &#x8868;&#x793A; $i..j$ &#x7684;&#x8FD9;&#x6BB5;&#x533A;&#x95F4;&#x5168;&#x90E8;&#x5316;&#x6210;&#x4E00;&#x79CD;&#x989C;&#x8272;&#x7684;&#x4EE3;&#x4EF7;&#x3002; dp[i][j] = \\left\\{ \\begin{align*} &dp[i+1][j-1] &&c[i] = c[j]\\\\ &\\min\\{dp[i][j-1], dp[i][j+1]\\} + 1 &&c[i] \\neq c[j] \\end{align*} \\right.123456789101112131415const int N = 5000 + 7;const int INF = 0x3f3f3f3f;int n, m, c[N], dp[N][N];int main() { read(n); for (int i = 1; i &lt;= n; ++i) read(c[i]), SMAX(m, c[i]); n = std::unique(c + 1, c + n +1) - c - 1; for (int i = n; i; --i) for (int j = i + 1; j &lt;= n; ++j) if(c[i] == c[j]) dp[i][j] = dp[i + 1][j - 1] + 1; else dp[i][j] = std::min(dp[i][j - 1], dp[i + 1][j]) + 1; printf(&quot;%d\\n&quot;, dp[1][n]);} E. Arithmetic Progression&#x2003;&#x2003;&#x4EA4;&#x4E92;&#x9898;&#x5A31;&#x4E50;&#x8EAB;&#x5FC3;&#x3002; &#x2003;&#x2003;&#x663E;&#x7136;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x4E8C;&#x5206;&#x5C31;&#x53EF;&#x4EE5;&#x5F88;&#x5F00;&#x5FC3;&#x5730;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x503C;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x53D1;&#x73B0;&#xFF0C;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x5DEE;&#x90FD;&#x5E94;&#x8BE5;&#x662F;&#x516C;&#x5DEE;&#x7684;&#x500D;&#x6570;&#x3002;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x591A;&#x968F;&#x673A;&#x4E00;&#x4E9B;&#x4F4D;&#x7F6E;&#xFF0C;&#x56E0;&#x4E3A;&#x524D;&#x9762;&#x4E8C;&#x5206;&#x8FC7;&#xFF0C;&#x6240;&#x4EE5;&#x540E;&#x9762;&#x6700;&#x591A;&#x95EE;30&#x6B21;&#x5DE6;&#x53F3;&#xFF08;&#x5F53;&#x7136;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x95EE;&#x524D;30&#x4E2A;&#xFF0C;&#x9632;&#x6B62;&#x6BD2;&#x7624;&#x4F1A;&#x5361;&#xFF09;&#xFF0C;&#x628A;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x503C;&#x4E0E;&#x6700;&#x5927;&#x503C;&#x7684;&#x5DEE;&#x7B97;&#x51FA;&#x6765;&#xFF0C;&#x90A3;&#x4E48;&#x516C;&#x5DEE;&#x4E00;&#x5B9A;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x7EA6;&#x6570;&#xFF0C;&#x6709;&#x5F88;&#x5927;&#x7684;&#x6982;&#x7387;&#x662F; $\\gcd$ &#x3002; &#x2003;&#x2003;&#x4E0D;&#x4F1A;&#x8BC1;&#x660E;&#x6B63;&#x786E;&#x7387;&#x3002; 12345678910111213141516171819202122232425const int N = 1e6 + 7;int n, L, R, stp, used[N];int main() { read(n); srand(time(0)); int l = 0, r = 1e9; while (l &lt; r) { int mid = (l + r) &gt;&gt; 1, get; printf(&quot;&gt; %d\\n&quot;, mid); fflush(stdout); read(get); if(get) l = mid + 1; else r = mid; } R = l; for (int i = 1, get = 0; i &lt;= 30 &amp;&amp; i &lt;= n; ++i) { int pos = rand() % n + 1; while(used[pos]) pos = rand() % n + 1; used[pos] = 1; printf(&quot;? %d\\n&quot;, pos); fflush(stdout); read(get); stp = std::__gcd(stp, R - get); } printf(&quot;! %d %d\\n&quot;, R - (n - 1) * stp, stp); fflush(stdout);} F. Please, another Queries on Array?&#x2003;&#x2003;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x6B27;&#x62C9;&#x51FD;&#x6570;&#x7684;&#x516C;&#x5F0F;&#x3002; \\varphi(n) = n \\sum_{p\\text{是}n\\text{质因数}} 1-\\frac1p&#x2003;&#x2003;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x7EBF;&#x6BB5;&#x6811;&#x7EF4;&#x62A4;&#x533A;&#x95F4;&#x4E58;&#x79EF;&#xFF0C;&#x4EE5;&#x53CA;&#x6BCF;&#x4E2A;&#x8D28;&#x6570;&#x51FA;&#x6CA1;&#x51FA;&#x73B0;&#x8FC7;&#x3002; &#x2003;&#x2003;&#x4E00;&#x5F00;&#x59CB;&#x6253;&#x7B97;&#x7528;bitset&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0; $300$ &#x4EE5;&#x5185;&#x8D28;&#x6570;&#x53EA;&#x6709; $62$ &#x4E2A;&#xFF0C;&#x4E0D;&#x591A;&#x4E0D;&#x5C11;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5; ull&#x5B58;&#x3002;&#x5927;&#x6982; ll&#x4E5F;&#x5C31;&#x591F;&#x4E86;&#x3002; &#x2003;&#x2003;&#x6CE8;&#x610F;&#x533A;&#x95F4;&#x4E58;&#x79EF;&#xFF0C;&#x4E58;&#x6807;&#x8BB0;&#x5728;&#x533A;&#x95F4;&#x4E0A;&#x7B97;&#x8D21;&#x732E;&#x8981;&#x4EE5;&#x5E42;&#x7684;&#x5F62;&#x5F0F;&#x7B97;&#x4E0A;&#x53BB;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x50CF;&#x6C42;&#x533A;&#x95F4;&#x548C;&#x90A3;&#x6837;&#x76F4;&#x63A5;&#x4E58;&#x3002;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x6B7B;&#x6D3B;&#x8FC7;&#x4E0D;&#x53BB;&#x3002;&#x8FD8;&#x6709;&#x5982;&#x679C;&#x662F;&#x7528; ull&#x538B;&#x4F4D;&#x7684;&#xFF0C;&#x6CE8;&#x610F;&#x7B97;&#x96C6;&#x5408;&#x7684;&#x65F6;&#x5019; 1 &lt;&lt; i&#x8981;&#x5199;&#x6210;1ull &lt;&lt; i&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#define lc o &lt;&lt; 1#define rc o &lt;&lt; 1 | 1typedef std::pair&lt;ull, int&gt; pli;const int N = 4e5 + 7;const int M = 300 + 7;const int P = 1e9 + 7;int n, m, x, y, z, a[N];char opt[15];int prt, p[M], np[M], inv[N], id[N];inline void Make_Prime(int n) { np[0] = np[1] = inv[1] = 1; for (int i = 2; i &lt;= n; ++i) { inv[i] = (ll)(P - P / i) * inv[P % i] % P; if (!np[i]) p[++prt] = i, id[i] = prt; for (int j = 1; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j){ np[i * p[j]] = j; if (i % p[j] == 0) break; } }}inline pli operator + (const pli &amp;a, const pli &amp;b) {return pli(a.fi | b.fi, (ll)a.se * b.se % P);}inline int fpow(int x, int y) { int ans = 1; for (; y; y &gt;&gt;= 1, x= (ll)x * x % P) if(y &amp; 1) ans = (ll)ans * x % P; return ans;}struct Node { ull val, add; int mul, tag;} t[N &lt;&lt; 2];inline void Build(int o, int L, int R) { t[o].tag = 1; if (L == R) { int x = a[L]; t[o].mul = a[L]; while (x &gt; 1 &amp;&amp; np[x]) t[o].val |= 1ull &lt;&lt; (np[x] - 1), x /= p[np[x]]; if (x &gt; 1) t[o].val |= 1ull &lt;&lt; (id[x] - 1); return; } int M = (L + R) &gt;&gt; 1; Build(lc, L, M); Build(rc, M + 1, R); t[o].val = t[lc].val | t[rc].val; t[o].mul = (ll)t[lc].mul * t[rc].mul % P;}inline void Mul(int o, int L, int R, int l, int r, int x, ull y) { if (l &lt;= L &amp;&amp; R &lt;= r) { t[o].tag = (ll)t[o].tag * x % P; t[o].mul = (ll)t[o].mul * fpow(x, R - L + 1) % P; t[o].add |= y; t[o].val |= t[o].add; return; } int M = (L + R) &gt;&gt; 1; if (l &lt;= M) Mul(lc, L, M, l, r, x, y); if (r &gt; M) Mul(rc, M + 1, R, l, r, x, y); t[o].val = t[lc].val | t[rc].val | t[o].add; t[o].mul = (ll)t[lc].mul * t[rc].mul % P *fpow(t[o].tag, R - L + 1) % P;}inline pli Get(int o, int L, int R, int l, int r, pli add = pli(0, 1)) { if (l &lt;= L &amp;&amp; R &lt;= r) return pli(t[o].val, t[o].mul) + pli(add.fi, fpow(add.se, R - L + 1)); int M = (L + R) &gt;&gt; 1; pli hkk = add + pli(t[o].add, t[o].tag); if (r &lt;= M) return Get(lc, L, M, l, r, hkk); if (l &gt; M) return Get(rc, M + 1, R, l, r, hkk); return Get(lc, L, M, l, r, hkk) + Get(rc, M + 1, R, l, r, hkk);}inline int GetAns(pli x) { int ans = x.se; ull S = x.fi; for (int i = 1; i &lt;= prt; ++i) if((S &gt;&gt; (i - 1)) &amp; 1) ans = (ll)ans * inv[p[i]] % P * (p[i] - 1) % P; return ans;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); Make_Prime(300); for (int i = 1; i &lt;= n; ++i) read(a[i]); Build(1, 1, n); for (int i = 1; i &lt;= m; ++i) { scanf(&quot;%s&quot;, opt); read(x), read(y); if (*opt == &apos;M&apos;) { read(z); ull hkk = 0; int r = z; while (r &gt; 1 &amp;&amp; np[r]) hkk |= 1ull &lt;&lt; (np[r] - 1), r /= p[np[r]]; if (r &gt; 1) hkk |= 1ull &lt;&lt; (id[r] - 1); Mul(1, 1, n, x, y, z, hkk); } else printf(&quot;%d\\n&quot;, GetAns(Get(1, 1, n, x, y))); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Codeforces","slug":"Codeforces","permalink":"https://www.violetoj.com/categories/Codeforces/"}],"tags":[],"keywords":[{"name":"Codeforces","slug":"Codeforces","permalink":"https://www.violetoj.com/categories/Codeforces/"}]}]}