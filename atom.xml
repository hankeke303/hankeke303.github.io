<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hankeke</title>
  
  <subtitle>一面风情深有韵，半笺娇恨寄幽怀。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.violetoj.com/"/>
  <updated>2019-03-18T10:44:31.472Z</updated>
  <id>https://www.violetoj.com/</id>
  
  <author>
    <name>hankeke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卡常者π酱 题解</title>
    <link href="https://www.violetoj.com/2019/03/14/%E5%8D%A1%E5%B8%B8%E8%80%85%CF%80%E9%85%B1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.violetoj.com/2019/03/14/卡常者π酱-题解/</id>
    <published>2019-03-14T02:14:00.000Z</published>
    <updated>2019-03-18T10:44:31.472Z</updated>
    
    <content type="html"><![CDATA[<p>现在终于可以公布一下这道题目的改编来源了。</p><p><a href="http://codeforces.com/contest/1120/problem/C" target="_blank" rel="noopener">http://codeforces.com/contest/1120/problem/C</a></p><p>CF1120 C 的数据范围就是 $n \leq 5000$ 。</p><p>大概把 CF 上原题的代码复制粘贴过来可以获得 $15-20\ pts$。</p><a id="more"></a><p>现在是吐槽环节。</p><p>以下是几个出题人的代号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hkk     =   hankeke</span><br><span class="line">zcr     =   憧憬未来    =    ForwardFuture</span><br><span class="line">yy      =   isunny    =     fluttersunny</span><br></pre></td></tr></table></figure><p>这是来自出题人的吐槽。</p><p>首先这道题是上个星期 CF 的题目了，本来写了一个 $O(n^2\log n)$ 我就没有管了。</p><p>但是一个星期以后，zcr 突然想知道了我是怎么做的。于是又讨论起来了这道题。</p><p>讨论讨论着，就发现了一些单调性，一开始以为没有什么用，没有管。但是后来突然觉得，好像把我的方法通过这些单调性扩展一下，可以做到 $O(n\log n)$ 。于是，我们联系了一下这场比赛的出题人，这道题的雏形（一开始的数据范围）就出来了。</p><p>一开始，$15\%$ 是给的原题数据范围，这个一直都没有变。一开始是 $n \leq 50000$ 的。</p><p>但是第二天发现了 zcr 的刷表法也可以通过单调性扩展。而且由于这种算法不需要线段树合并，虽然复杂度没有变，但是常数比较小。</p><p>随后，下午，zcr 发现这道题可以用单调队列维护，于是就出现了 $O(n)$ 的算法。于是，这道题的 $n$ 由 $500000$ 扩大成了 $5000000​$。</p><p>之所以不开 $10 ^ 6$，是因为怕常数小的树状数组或者手写二叉堆的做法卡过去。但是这样线性做法的 SAM 就会 MLE 了。于是我们把字符集缩小成了 $a-g$。这也就导致了随机数据这一项目似乎根本不存在的尴尬局面。</p><p>而且还有一个情况没有预料到的情况，就是本来按照我们最初的设想，这道题可能会用到 SAM + 线段树合并 + 单调队列优化 DP，要想到可能也要稍微花一些时间。但是随着我们后来的一步步研究，似乎越来越简单了。第二个算法先是把把线段树合并给去掉了，单调队列也不用了，变成一个线段树区间修改，而且似乎这个算法只需要在暴力的基础上稍微扩展一下就能想到，这下子就变成了了 NOIP D2T1 难度了。然后再优化，结果干脆把线段树都去掉了，变成单调队列优化 DP —— 这不是普及组内容吗？但是似乎已经不怎么来得及把这道题撤回来了，于是就变成了整场比赛最简单的题目了。</p><p>还有一个情况就是按照剧本，时间限制应该是 std 的两倍以上。可惜洛谷在有 $40​$ 个点的情况下最多只能开 $3s​$。</p><p>这里向大家道歉。</p><p>以下是题解。</p><h2 id="n-leq-5000-以及-随机数据"><a href="#n-leq-5000-以及-随机数据" class="headerlink" title="$n \leq 5000$ 以及 随机数据"></a>$n \leq 5000$ <del>以及 随机数据</del></h2><p>这个数据范围显然是 $O(n^2)$。可能会带一个 $\log$。</p><p>我提供一个 憧憬未来 神仙在 CF 上的做法。我的做法一会儿再讲。</p><p>我们设 $dp[i]$ 表示前 $i$ 位的最小花费。我们采用刷表法来更新后续状态。</p><script type="math/tex; mode=display">dp[i] + b \rightarrow dp[j]\ |\ i < j , s_{i+1..j} \subseteq s_{1..i}</script><p>怎么判断 $s_{i + 1..j}​$ 怎么判断是不是前面 $1..i​$ 的字串呢？我们只需要对前 $i​$ 的字符建立 SAM，然后在上面跑就可以了，一直到无法继续向下走就可以了。</p><p>这样的时间复杂度是 $O(n^2)​$。但是如果数据随机的话，那么不会跑太长的串就会被断掉，所以是可以通过随机数据的。</p><h2 id="n-leq-50000"><a href="#n-leq-50000" class="headerlink" title="$n \leq 50000$"></a>$n \leq 50000$</h2><p>我们暂时先不介绍 $n \leq 50000$ 的做法。先来讲一下我在 CF 上的写法。</p><p>因为我对于刷表不太熟悉，所以直接考虑了怎么填表，所以方法相比于上一种略微繁琐。</p><p>我们发现问题就是判断 $j + 1$ 到 $i$ 的部分是不是 $1$ 到 $j$ 部分的字串，$i$ 是固定的。</p><p>如果能够在 parent 树上找到 $j + 1$ 到 $i$ 部分对应的点的话，那么其实就是判断这个点的 $endpos$ 集合（也叫 $right$ 集合，两种不同的叫法）里面是否有 $1$ 到 $j$ 区间内的点。这个可以用线段树合并解决。</p><p>但是现在的问题就只剩一个了。如何找到 $j + 1$ 到 $i$ 的串在 parent 树上的点。我们发现，如果把 $j$ 从 $i - 1$ 到 $0$ 倒序循环，那么就相当于每次在一个串的前面加上一个字符。这个过程实际上就是在 parent 树上向下走的过程。如果现在这个串的长度仍然小于等于当前节点的 $maxlen​$，那么就应该停留在原地。如果大于了，那么需要选择一个合适的孩子向下走。具体的选择方法可以参考这个串上的对应位置的字符。</p><p>我们可以 $O(n^2\log n)$ 解决这个 $n \leq 5000​$ 的问题，但是显然会被上面的吊打。</p><p>但是我们发现，肯定存在一个位置 $p​$ 使得 $\forall j \in [1, p]​$，$j + 1​$ 到 $i​$ 的串不是 $1​$ 到 $j​$ 的子串，而 $\forall j \in (p, i)​$ 都有 $j + 1​$ 到 $i​$ 的串是 $1​$ 到 $j​$ 的子串。也就是说，是否是字串这一条件是单调的。</p><p>于是我们可以二分或者倍增地求出这个 $p​$ 值，然后通过线段树查询 $(p, i)​$ 区间内的 $dp​$ 值的最小值，转移即可。</p><p>时间复杂度 $O(n \log^2 n)$。如果常数小也许能过 $n \leq 500000$ 吧，没有试过。<del>一个 $\log​$ 的 std-force 对于 $n \leq 50000$ 都很卡常了。。。</del></p><h2 id="n-leq-500000"><a href="#n-leq-500000" class="headerlink" title="$n \leq 500000$"></a>$n \leq 500000$</h2><p>其实正解与 $n \leq 50000$ 的部分分相差不大，因为是第一次出题，所以不太会配置部分分，所有导致严重不合理。</p><p>我们发现，当 $i$ 向右移动到 $i + 1$ 的时候，$p$ 点的位置应该是非严格单调增的。证明的话可以伪证一下：</p><ul><li>假设 $p$  点移动到了 $p’$，那么就是说 $\forall j \in (p’, i + 1)$，都有 $j + 1$ 到 $i + 1$ 的串是 $1$ 到 $j$ 的子串。</li><li>又因为 $j + 1$ 到 $i$ 是 $j + 1$ 到 $i + 1$ 的字串，所以可以$\forall j \in (p’, i)$，都有 $j + 1$ 到 $i$ 的串 $1$ 到 $j$ 的子串。</li><li>因此 $(p’, i) \subseteq (p, i)$ ，即 $p’ \geq p$。</li></ul><p>那么有了这个性质，我们可以每次更新 $i$ 的时候把 $p$ 向右移动直到能够匹配，然后单调队列或者线段树维护一下就可以了。这样就不需要每次重新算了，$p$ 的位置最多一共向右移动 $n$ 次，时间复杂度 $O(n\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(#x<span class="meta-string">".in"</span>, <span class="meta-string">"r"</span>, stdin), freopen(#x<span class="meta-string">".out"</span>, <span class="meta-string">"w"</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">SMAX</span><span class="params">(A &amp;a, <span class="keyword">const</span> B &amp;b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a = b , <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">SMIN</span><span class="params">(A &amp;a, <span class="keyword">const</span> B &amp;b)</span> </span>&#123;<span class="keyword">return</span> b &lt; a ? a = b , <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> I&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(I &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">0</span>, c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar())) c == <span class="string">'-'</span> ? f = <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">x = c &amp; <span class="number">15</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = getchar())) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c &amp; <span class="number">15</span>);</span><br><span class="line">f ? x = -x : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF_ll = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, hd, tl, tax[N], q[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> c[<span class="number">26</span>], len, fa;&#125; t[N &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> nod = <span class="number">1</span>, last = <span class="number">1</span>, edp[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Extend</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = ++nod; t[np].len = t[p].len + <span class="number">1</span>; edp[np] = id;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np;</span><br><span class="line"><span class="keyword">if</span> (!p) t[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> q = t[p].c[x];</span><br><span class="line"><span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>) t[np].fa = q;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">t[q].fa = t[np].fa = nq; <span class="keyword">for</span> (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125; last = np;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Resort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nod; ++i) ++tax[t[i].len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) tax[i] += tax[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nod; ++i) q[tax[t[i].len]--] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span>&#123;</span><span class="keyword">int</span> lc, rc, val;&#125; t[N * <span class="number">40</span>]; <span class="keyword">int</span> nod, rt[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!o) o = ++nod; ++t[o].val;</span><br><span class="line"><span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= M) Insert(t[o].lc, L, M, x); <span class="keyword">else</span> Insert(t[o].rc, M + <span class="number">1</span>, R, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> t[o].val;</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= M) <span class="keyword">return</span> Query(t[o].lc, L, M, l, r); <span class="keyword">if</span> (l &gt; M) <span class="keyword">return</span> Query(t[o].rc, M + <span class="number">1</span>, R, l, r);</span><br><span class="line"><span class="keyword">return</span> Query(t[o].lc, L, M, l, r) + Query(t[o].rc, M + <span class="number">1</span>, R, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!o || !p) <span class="keyword">return</span> o ^ p;</span><br><span class="line"><span class="keyword">int</span> np = ++nod;</span><br><span class="line">t[np].lc = Merge(t[o].lc, t[p].lc);</span><br><span class="line">t[np].rc = Merge(t[o].rc, t[p].rc);</span><br><span class="line">t[np].val = t[t[np].lc].val + t[t[np].rc].val;</span><br><span class="line"><span class="keyword">return</span> np;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> SGT::Insert;</span><br><span class="line"><span class="keyword">using</span> SGT::Query;</span><br><span class="line"><span class="keyword">using</span> SGT::rt;</span><br><span class="line"><span class="keyword">using</span> SGT::Merge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">File(<span class="built_in">string</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;n, &amp;a, &amp;b, s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Extend(s[i] - <span class="string">'a'</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nod; ++i) <span class="keyword">if</span> (edp[i]) Insert(rt[i], <span class="number">1</span>, n, edp[i]);</span><br><span class="line">Resort();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = nod; i; --i) rt[t[q[i]].fa] = Merge(rt[t[q[i]].fa], rt[q[i]]), SMAX(edp[t[q[i]].fa], edp[q[i]]);</span><br><span class="line"><span class="keyword">int</span> o = <span class="number">1</span>, p = <span class="number">0</span>; hd = <span class="number">1</span>, tl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dp[i] = INF_ll;</span><br><span class="line">o = t[o].c[s[i] - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i - p &lt;= t[t[o].fa].len) o = t[o].fa;</span><br><span class="line"><span class="keyword">if</span> (p == i - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (o &amp;&amp; Query(rt[o], <span class="number">1</span>, n, <span class="number">1</span>, p)) <span class="keyword">break</span>;</span><br><span class="line">++p;</span><br><span class="line">&#125;</span><br><span class="line">SMIN(dp[i], dp[i - <span class="number">1</span>] + a);</span><br><span class="line"><span class="keyword">if</span> (Query(rt[o], <span class="number">1</span>, n, <span class="number">1</span>, p)) &#123;</span><br><span class="line"><span class="keyword">while</span> (hd &lt;= tl &amp;&amp; q[hd] &lt; o) ++hd;</span><br><span class="line">SMIN(dp[i], dp[p] + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (hd &lt;= tl &amp;&amp; dp[i] &gt;= dp[q[tl]]) --tl;</span><br><span class="line">q[++tl] = i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="由一个字符构成"><a href="#由一个字符构成" class="headerlink" title="由一个字符构成"></a>由一个字符构成</h2><p>如果 $b \leq a$，那么策略很显然。</p><p>第一个字符花费 $a​$，第二个字符花费 $b​$，第 $3-4​$ 个字符组成的字符串花费 $b​$，第 $5-9​$ 个字符组成的字符串花费 $b​$ ……像这样倍增下去即可。</p><p>但是如果 $b &gt; a​$ ，那么 $b​$ 就不是在任何情况下都是最优的了。令 $k = \lceil\frac ba\rceil​$，那么就应该对于前 $k​$ 个字符每一个都花费 $a​$ 元。后面继续向上面一样每次花费 $b​$ 倍增即可。</p><h2 id="n-leq-5000000"><a href="#n-leq-5000000" class="headerlink" title="$n \leq 5000000$"></a>$n \leq 5000000$</h2><p>我们回过去考虑一下 ForwardFuture 神仙在 CF 上的做法。因为他是刷表法，所以只需要现在的 SAM 的状态就可以确定后续是不是字串的问题了。这是此题刷表法最大的优势。</p><p>我们之前在 $n \leq 500000$ 里面曾经伪证了那里的 $p$ 是具有单调性的。那么我们不妨改变 $p$ 的定义，把 $p$ 在这里定义为：</p><p>对于一个固定的 $i$，位置 $p$ 满足 $\forall j \in (i, p]$ 有 $i + 1$ 到 $j$ 组成的串是 $1$ 到 $i$ 的字串，而 $\forall j \in (p, n]$ 则均不满足。</p><p>那么由相同的方法，可以伪证出这里的 $p$ 随着 $i$ 的增大，也是单调递增的。</p><p>于是，我们也可以用线段树对一个区间取 $\min$ 的操作，依然实现 $O(n \log n)$  的算法。</p><p>这个操作也可以用一个优先队列来维护所有的取 $\min$ 操作，但是复杂度依然是 $O(n \log n)$。</p><p>但是受到这个方法的启发，我们用 $(pos, val)$ 来维护现在的所有取 $\min$ 操作，那么如果存在 $pos_1 &lt; pos_2, val_1 &gt; val_2$ 的情况，那么 $1$ 这个取 $\min$ 操作就完全没有用了。基于这个性质，完全可以用单调队列维护。</p><p>时间复杂度 $O(n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbg(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> File(x) freopen(#x<span class="meta-string">".in"</span>, <span class="meta-string">"r"</span>, stdin), freopen(#x<span class="meta-string">".out"</span>, <span class="meta-string">"w"</span>, stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">SMAX</span><span class="params">(A &amp;a, <span class="keyword">const</span> B &amp;b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a = b , <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">SMIN</span><span class="params">(A &amp;a, <span class="keyword">const</span> B &amp;b)</span> </span>&#123;<span class="keyword">return</span> b &lt; a ? a = b , <span class="number">1</span> : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> I&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(I &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">0</span>, c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar())) c == <span class="string">'-'</span> ? f = <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">x = c &amp; <span class="number">15</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = getchar())) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c &amp; <span class="number">15</span>);</span><br><span class="line">f ? x = -x : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF_ll = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b, hd, tl;</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">pii q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> c[<span class="number">7</span>], len, fa;&#125; t[N &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> nod = <span class="number">1</span>, last = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Extend</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = ++nod; t[np].len = t[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np;</span><br><span class="line"><span class="keyword">if</span> (!p) t[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> q = t[p].c[x];</span><br><span class="line"><span class="keyword">if</span> (t[q].len == t[p].len + <span class="number">1</span>) t[np].fa = q;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + <span class="number">1</span>;</span><br><span class="line">t[q].fa = t[np].fa = nq; <span class="keyword">for</span> (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125; last = np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;n, &amp;a, &amp;b, s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> o = <span class="number">1</span>, p = <span class="number">0</span>; hd = <span class="number">1</span>, tl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">Extend(s[i] - <span class="string">'a'</span>);dp[i] = dp[i - <span class="number">1</span>] + a;</span><br><span class="line"><span class="keyword">if</span> (p &lt; i) p = i;</span><br><span class="line"><span class="keyword">while</span> (o &gt; <span class="number">1</span> &amp;&amp; p - i &lt;= t[t[o].fa].len) o = t[o].fa;</span><br><span class="line"><span class="keyword">if</span> (!o) o = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &lt; n &amp;&amp; t[o].c[s[p + <span class="number">1</span>] - <span class="string">'a'</span>]; ++p) o = t[o].c[s[p + <span class="number">1</span>] - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">while</span> (hd &lt;= tl &amp;&amp; q[hd].se &lt; i) ++hd;</span><br><span class="line"><span class="keyword">if</span> (hd &lt;= tl) SMIN(dp[i], dp[q[hd].fi] + b);</span><br><span class="line"><span class="keyword">while</span> (hd &lt;= tl &amp;&amp; dp[q[tl].fi] &gt;= dp[i]) --tl;</span><br><span class="line">q[++tl] = pii(i, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在终于可以公布一下这道题目的改编来源了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1120/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1120/problem/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CF1120 C 的数据范围就是 $n \leq 5000$ 。&lt;/p&gt;
&lt;p&gt;大概把 CF 上原题的代码复制粘贴过来可以获得 $15-20\ pts$。&lt;/p&gt;
    
    </summary>
    
      <category term="洛谷" scheme="https://www.violetoj.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
      <category term="后缀自动机" scheme="https://www.violetoj.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="单调队列" scheme="https://www.violetoj.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="线段树合并" scheme="https://www.violetoj.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 1 (CF1110)（A-F）</title>
    <link href="https://www.violetoj.com/2019/02/15/Codeforces-Global-Round-1-CF1110-%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%8C%E5%8F%AA%E6%9C%89-A-F%EF%BC%89/"/>
    <id>https://www.violetoj.com/2019/02/15/Codeforces-Global-Round-1-CF1110-（未完结，只有-A-F）/</id>
    <published>2019-02-15T02:55:00.000Z</published>
    <updated>2019-03-18T10:41:55.714Z</updated>
    
    <content type="html"><![CDATA[<p>继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。</p><p>因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。</p><a id="more"></a><hr><h2 id="A-Parity"><a href="#A-Parity" class="headerlink" title="A. Parity"></a>A. Parity</h2><p>保存 <code>%2</code> 的值就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b, k, a[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(b), read(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) read(a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k, p = <span class="number">1</span>; i; --i, p = p * b % <span class="number">2</span>) (ans += a[i] * p) %= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (ans) <span class="built_in">puts</span>(<span class="string">"odd"</span>); <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"even"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Tape"><a href="#B-Tape" class="headerlink" title="B. Tape"></a>B. Tape</h2><p>一开始准备二分，然后发现他要的是最小的总长度，不太好二分。然后发现我们在断的时候，应该尽量把间隙比较大的优先断掉，所以直接贪心，排个序就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, a[N], b[N], c[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n), read(m), read(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), b[i - <span class="number">1</span>] = a[i] - a[i - <span class="number">1</span>], c[i] = i;</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">1</span>, c + n, [](<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)&#123;<span class="keyword">return</span> b[x] &gt; b[y];&#125;);</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">1</span>, c + k); c[k] = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) ans += a[c[i]] - a[c[i - <span class="number">1</span>] + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Meaningless-Operations"><a href="#C-Meaningless-Operations" class="headerlink" title="C. Meaningless Operations"></a>C. Meaningless Operations</h2><p>好一道打表题。</p><p>想得百无聊赖之下开始打表，然后就有惊喜了。</p><p>发现除了 $2^k-1$ 外的数，答案都是比他大的最小的 $2^k-1$ 。</p><p>那么 $2^k-1$ 自己呢？一开始没有把表打全，以为就是如果 $k$ 是偶数，就是 $a/3$ ，否则就是 $1$ ，结果交上去 wa2.</p><p>于是继续打 $2^k-1$，其实这个时候可以直接把所有的表直接复制上去。可我偏要找出规律来。好像答案都是原数的因数，而且——而且似乎还是最大的因数啊。</p><p>于是就可以 A 掉了。</p><script type="math/tex; mode=display">f(a) = \max_{0 < b < a}{gcd(a \oplus b, a \> \& \> b)}.</script><p>仔细想一下，对于这个式子，如果 $a \neq 2^k-1$ ，那么 $a$ 就不是所有位都为 $1$ ，那么令 $b = ~a$ ，那么 $a \oplus b = 2 ^ k - 1, a  > \&amp;  > b = 0$ 。于是 $gcd$ 就是 $2^k-1$。</p><p>否则呢，如果 $a$ 的二进制位全是 $1$ ，那么这里的 $b$ 应该是 $0$ ，显然不满足要求。发现当 $a$ 二进制位都是 $1$ 时， $a \oplus b = a - b$， $a > \&amp; > b = b$ 。于是原式可化为 $f(a) = \max \limits_{0 &lt; b &lt; a}{gcd(a - b, b)} = \max \limits_{0 &lt; b &lt; a}{gcd(a, b)}$ 。显然当 $b | a$ 时 $f(a)$ 最大，于是 $b$ 就是 $a$ 最大的因数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> q, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x) ++ans, x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, p = <span class="built_in">sqrt</span>(x); i &lt;= p; ++i)</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> x / i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">read(x); <span class="keyword">int</span> p = Get(x), s = (<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (s != x) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Get2(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h2><p>我感觉这道题比 E,F 都难。可能是因为太菜了才会这样想。（因为目前这六道题里面只有这道题是看题解做的。。。）</p><p>首先最重要的结论是 $(i, i + 1, i + 2)$ 这样的顺子最多取两个，否则可以自己先把对子 $(i , i, i)$取完是不会比原方案差的。</p><p>于是我们限制一下顺子取的个数就可以了。</p><p>设 $dp[i][j][k]$ 表示 dp 到第 $i$ 个数，保证对子 $(i - 1, i, i + 1)$ 取 $j$ 个，对子 $(i, i + 1, i + 2)$ 取 $k$ 个。</p><p>那么有</p><script type="math/tex; mode=display">dp[i][j][k] = \max_{l = 0} ^ 2 {dp[i][l][j] + k + \lfloor \frac{num[i] - j - k - l}3 \rfloor}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, a[N], dp[N][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n); read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(x), ++a[x];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">2</span>; ++l)</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= j + k + l) SMAX(dp[i][j][k], dp[i - <span class="number">1</span>][l][j] + k + (a[i] - j - k - l) / <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h2><p>一开始捣鼓了半天推出了一堆奇怪的没有用的性质。于是后来干脆直接划掉重新换个思路思考。</p><p>记得好像对于序列上进行变化的题目好多都是用差分来做的，所以我开始从差分上考虑。</p><p>然后发现好像差分完就没了。</p><script type="math/tex; mode=display">c_i' = c_{i + 1} + c_{i - 1} - c_i\\\text{可以推得}\\c_{i + 1} - c_i' = c_i - c_{i - 1}\\c_i' - c_{i - 1} = c_{i + 1} - c_i</script><p>也就是说一次操作其实是把差分数组上两个数交换一下。</p><p>注意要特判一下两端的原数据，因为两端不可以进行操作。一开始没有注意，就wa4了一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, c[N], t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(t[i]);</span><br><span class="line"><span class="keyword">if</span> (c[<span class="number">1</span>] != t[<span class="number">1</span>] || c[n] != t[n]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) c[i] = c[i] - c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) t[i] = t[i] - t[i - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">2</span>, c + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::sort(t + <span class="number">2</span>, t + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">memcmp</span>(c + <span class="number">2</span>, t + <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n - <span class="number">1</span>))) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h2><p>映象中这道题好像是我们学校学长暑假讲过的原题，但是记不起来了，去翻 ppt 却很神奇地没有找到。</p><p>但是不影响这道题确实不难。</p><p>显然是离线，把询问挂在 $v$ 上，假设 $dis[i]$ 表示 $v$ 到 $i$ 的距离，可以发现，从父亲跳到儿子，会把儿子的子树内的点的 $dis$ 值加上 $w$ ( $w$ 是边权)，其余的点减上 $w$ 。</p><p>直接线段树维护即可。</p><p>注意代码里面的 $dis$ 数组和上面的分析里面的 $dis$ 不是一个东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, z, dfc, fa[N], dfn[N], num[N], w[N];</span><br><span class="line">ll dis[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> to, ne, w;&#125; g[N &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;g[++tot].to = y; g[tot].w = z; g[tot].ne = head[x]; head[x] = tot;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span>&#123;</span><span class="keyword">int</span> l, r; ll *ans;&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Question&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>ll val, add;&#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) <span class="keyword">return</span> (<span class="keyword">void</span>)(t[o].val = dis[L]);</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Build(lc, L, M); Build(rc, M + <span class="number">1</span>, R);</span><br><span class="line">t[o].val = min(t[lc].val, t[rc].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll k)</span> </span>&#123;</span><br><span class="line"><span class="comment">// dbg("o = %d, L = %d, R = %d, l = %d, r = %d, k = %d\n", o, L, R, l, r, k);</span></span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> (<span class="keyword">void</span>)(t[o].add += k, t[o].val += k);</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= M) Add(lc, L, M, l, r, k);</span><br><span class="line"><span class="keyword">if</span> (r &gt; M) Add(rc, M + <span class="number">1</span>, R, l, r, k);</span><br><span class="line">t[o].val = min(t[lc].val, t[rc].val) + t[o].add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Qmin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> t[o].val;</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= M) <span class="keyword">return</span> Qmin(lc, L, M, l, r) + t[o].add;</span><br><span class="line"><span class="keyword">if</span> (l &gt; M) <span class="keyword">return</span> Qmin(rc, M + <span class="number">1</span>, R, l, r) + t[o].add;</span><br><span class="line"><span class="keyword">return</span> min(Qmin(lc, L, M, l, r), Qmin(rc, M + <span class="number">1</span>, R, l, r)) + t[o].add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">num[x] = <span class="number">1</span>;</span><br><span class="line">for fec(i, x, y) dfs_pre(y), num[x] += num[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, w[x]);</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, x, x + num[x] - <span class="number">1</span>, -w[x] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : q[x]) *i.ans = Qmin(<span class="number">1</span>, <span class="number">1</span>, n, i.l, i.r);</span><br><span class="line"><span class="function"><span class="keyword">for</span> <span class="title">fec</span><span class="params">(i, x, y)</span> <span class="title">dfs</span><span class="params">(y)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, -w[x]);</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, x, x + num[x] - <span class="number">1</span>, w[x] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) read(y), read(z), dis[i] = dis[y] + z,  Addedge(fa[i] = y, i, w[i] = z);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) dis[fa[i]] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(x), read(y), read(z), q[x].pb((Question)&#123;y, z, ans + i&#125;);</span><br><span class="line">Build(<span class="number">1</span>, <span class="number">1</span>, n); dfs_pre(<span class="number">1</span>); dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。&lt;/p&gt;
&lt;p&gt;因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://www.violetoj.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>[AtCoder] NIKKEI Programming Contest 2019 (暂缺F)</title>
    <link href="https://www.violetoj.com/2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-%E6%9A%82%E7%BC%BAF/"/>
    <id>https://www.violetoj.com/2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-暂缺F/</id>
    <published>2019-02-13T11:41:00.000Z</published>
    <updated>2019-03-18T10:42:10.627Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。</p><a id="more"></a><hr><h2 id="A-Subscribers"><a href="#A-Subscribers" class="headerlink" title="A - Subscribers"></a>A - Subscribers</h2><p>&emsp;&emsp;首先始终 $max = \min(A, B)$ ，$min$ 的话如果 $A + B \leq N$ ，那么就是 $0$ ，否则就是 $A + B - N$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(a), read(b);</span><br><span class="line"><span class="keyword">if</span> (a + b &lt;= n) <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, <span class="built_in">std</span>::min(a, b));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="built_in">std</span>::min(a, b), a + b - n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Touitsu"><a href="#B-Touitsu" class="headerlink" title="B - Touitsu"></a>B - Touitsu</h2><p>&emsp;&emsp;直接枚举每一位，看看有几个相同的就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s%s%s"</span>, &amp;n, a + <span class="number">1</span>, b + <span class="number">1</span>, c + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == b[i] &amp;&amp; b[i] == c[i]) ;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] != b[i] &amp;&amp; a[i] != c[i] &amp;&amp; b[i] != c[i]) ans += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Different-Strokes"><a href="#C-Different-Strokes" class="headerlink" title="C - Different Strokes"></a>C - Different Strokes</h2><p>&emsp;&emsp;挺好一道题，就是有点简单。</p><p>&emsp;&emsp;我们考虑对于每一个人来说，假设他选的集合是 $S$ ，他要最大化这个东西：</p><script type="math/tex; mode=display">\sum_{i \in S} a[i] - \sum_{i \notin S} b[i]</script><p>&emsp;&emsp;如果我们假设 $B = \sum \limits_{i = 1} ^ n b[i]$ ，那么上式可化为：</p><script type="math/tex; mode=display">(\sum_{i \in S} a[i] +b[i]) -B</script><p>&emsp;&emsp;因此不管是谁，都应该尽量选择 $a[i]+b[i]$ 大的位置上的数。直接用一个堆维护一下就可了。（不过好像可以直接排一下序就可以啦，我似乎傻掉了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[x] + b[x] &lt; a[y] +b[y]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), read(b[i]), q.push(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (i &amp; <span class="number">1</span>) ans += a[q.top()], q.pop(); <span class="keyword">else</span> ans -= b[q.top()], q.pop();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Restore-the-Tree"><a href="#D-Restore-the-Tree" class="headerlink" title="D - Restore the Tree"></a>D - Restore the Tree</h2><p>&emsp;&emsp;怎么感觉 D 比 C 还简单啊。至少 C 还要想一会儿列个式子， 这道题好像是读完题就可以开始写了。</p><p>&emsp;&emsp;因为保证新加的边始终是从祖先连向孩子的，所以图里面的边实际上表示了深度的大小关系，因此根肯定还是入度为 0 的。找到根以后拓扑排序一下就可了，最后一个拓扑到 $i$ 的点就是 $i$ 的父亲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, rt, idg[N], fa[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> to, ne;&#125; g[N]; <span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;g[++tot].to = y; g[tot].ne = head[x]; head[x] = tot;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[N], hd, tl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">q[++tl] = rt;</span><br><span class="line"><span class="keyword">while</span> (hd &lt; tl) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q[++hd];</span><br><span class="line">for fec(i, x, y) if (!--idg[y]) fa[y] = x, q[++tl] = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span> + m; ++i) read(x), read(y), Addedge(x, y), ++idg[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!idg[i]) rt = i;</span><br><span class="line">BFS();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fa[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Weights-on-Vertices-and-Edges"><a href="#E-Weights-on-Vertices-and-Edges" class="headerlink" title="E - Weights on Vertices and Edges"></a>E - Weights on Vertices and Edges</h2><p>&emsp;&emsp;好题啊。</p><p>&emsp;&emsp;一开始我想的是肯定要从大到小枚举边要不要删。然后可以发现不在最小生成树上的边不管怎么删都不影响原图的连通性，于是可以直接把原图变成一棵树的时候，那么可以直接上 LCT 来维护连通性以及一些信息。但是似乎方法是成立的，只是额在AtCoder上如果还要写LCT，是真的不敢想啊。</p><p>&emsp;&emsp;于是又思考了一个小时，也没什么新思路，只能去看了一下题解。</p><p>&emsp;&emsp;是这样的，我们对于删边发过来，变成从小到大加边，用并查集来维护一下每个联通块的点权和。但是我们会发现，有些边可能之前是不能加的，但是随着后续的加边，联通块扩大了，那些边就可以加入了！</p><p>&emsp;&emsp;题解提供了一种很巧妙的办法，我们对于那样的边，我们把它们的联通块先连起来，但是并查集要记录所有并没有真正加进去的边的数量，显然后面如果我们真正加边的时候，就可以把该联通块并完以后，里面没有加的边都加进去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, w[N], ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> x, y, z;&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N], num[N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fa[x] == x ? x : fa[x] = Find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">fa[y = Find(y)] = x = Find(x);</span><br><span class="line">num[x] += num[y], num[y] = <span class="number">0</span>;</span><br><span class="line">sum[x] += sum[y], sum[y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(w[i]), fa[i] = i, sum[i] = w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(g[i].x), read(g[i].y), read(g[i].z);</span><br><span class="line"><span class="built_in">std</span>::sort(g + <span class="number">1</span>, g + m +<span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b)&#123;<span class="keyword">return</span> a.z &lt; b.z;&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Find(g[i].x), y = Find(g[i].y), z = g[i].z;</span><br><span class="line"><span class="keyword">if</span> (Find(x) != Find(y)) Union(x, y);</span><br><span class="line">++num[x];</span><br><span class="line"><span class="keyword">if</span> (sum[x] &gt;= z) ans += num[x], num[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m - ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;后来到网上又翻了一会儿题解，发现我之前的方法还是有救的，而且还有两种解救的办法。</p><p>&emsp;&emsp;第一种是通过不带路径压缩，只用按秩合并来做的并查集，这种并查集的单次操作的时间复杂度是 $O(\log n)$ 的，而且因为没有路径压缩，可以很方便地实现 Cut 操作，比 LCT 好写，当然也就只适合这道题了，并查集扩展性没有 LCT 好。</p><p>&emsp;&emsp;第二种是建立 Kruskal 重构树。那么在从小到大枚举最小生成树里面的边的时候，对于一条边，如果其父亲没有被删除，那么显然他自己也不需要被删除了。因此如果判断的话，首先判断其父亲有没有被删，然后再看看其所在联通块的点权和——其现在所在联通块就是在重构树上的子树！这样的方法，因为删边时一定是从根山道这条边的，所以不需要更该其祖先的子树和的信息。</p><p>&emsp;&emsp;此上三中方法的时间复杂度都是 $O(m\log n)$ 。我就只写了第一种。</p><hr><h2 id="F-Jewels"><a href="#F-Jewels" class="headerlink" title="F - Jewels"></a>F - Jewels</h2><p>&emsp;&emsp;想了两个小时也不会做，上网找题解也找不到，看来我可能需要去研读一下官方的英文题解。但是由于我英语比较烂，所以F可能要咕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。&lt;/p&gt;
    
    </summary>
    
      <category term="AtCoder" scheme="https://www.violetoj.com/categories/AtCoder/"/>
    
    
  </entry>
  
  <entry>
    <title>[AtCoder] Yahoo Programming Contest 2019</title>
    <link href="https://www.violetoj.com/2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/"/>
    <id>https://www.violetoj.com/2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/</id>
    <published>2019-02-12T02:31:00.000Z</published>
    <updated>2019-03-18T12:55:07.786Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2003;&#x2003;&#x5F88;&#x9057;&#x61BE;&#x9519;&#x8FC7;&#x4E86;&#x4E00;&#x573A; AtCoder &#x3002;&#x542C;&#x8BF4;&#x8FD9;&#x573A;&#x662F;&#x6DA8;&#x5206;&#x573A;&#x5462;&#xFF0C;&#x4E8E;&#x662F;&#x7279;&#x610F;&#x6765;&#x8865;&#x4E00;&#x4E0B;&#x9898;&#x3002;</p><a id="more"></a><hr><h2 id="A-Anti-Adjacency"><a href="#A-Anti-Adjacency" class="headerlink" title="A - Anti-Adjacency"></a>A - Anti-Adjacency</h2><p>&#x2003;&#x2003;&#x663E;&#x7136; $K \leq \frac{N + 1}2$</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(k);</span><br><span class="line"><span class="keyword">if</span> (k &lt;= (n + <span class="number">1</span> &gt;&gt; <span class="number">1</span>)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="B-Path"><a href="#B-Path" class="headerlink" title="B - Path"></a>B - Path</h2><p>&#x2003;&#x2003;&#x6B27;&#x62C9;&#x8DEF;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">4</span>, x, y, deg[N], jcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) read(x), read(y), ++deg[x], ++deg[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(deg[i] &amp; <span class="number">1</span>) ++jcnt;</span><br><span class="line"><span class="keyword">if</span> (jcnt == <span class="number">0</span> ||jcnt == <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="C-When-I-hit-my-pocket&#x2026;"><a href="#C-When-I-hit-my-pocket&#x2026;" class="headerlink" title="C - When I hit my pocket&#x2026;"></a>C - When I hit my pocket&#x2026;</h2><p>&#x2003;&#x2003;&#x5982;&#x679C; $B-A\leq 2$&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x76F4;&#x63A5;&#x62CD;&#x997C;&#x5E72;&#x80AF;&#x5B9A;&#x4E0D;&#x6BD4;&#x505A;&#x4EA4;&#x6613;&#x5DEE;&#x3002;</p><p>&#x2003;&#x2003;&#x5426;&#x5219;&#xFF0C;&#x5C31;&#x5148;&#x628A;&#x997C;&#x5E72;&#x6570;&#x62CD;&#x5230; $A$ &#xFF0C;&#x7136;&#x540E;&#x5C31;&#x5356;&#x4E00;&#x6B21;&#x4E70;&#x4E00;&#x6B21;&#xFF0C;&#x6700;&#x540E;&#x5982;&#x679C;&#x8FD8;&#x6709;&#x5355;&#x72EC;&#x7684;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x5C31;&#x62CD;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(k), read(a), read(b);</span><br><span class="line"><span class="keyword">if</span> (b - a &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k + <span class="number">1</span>), <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= a - <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k + <span class="number">1</span>), <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line">ans += a - <span class="number">1</span>; k -= a - <span class="number">1</span>;</span><br><span class="line">ans += (ll)(k &gt;&gt; <span class="number">1</span>) * (b - a);</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) ++ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="D-Ears"><a href="#D-Ears" class="headerlink" title="D - Ears"></a>D - Ears</h2><p>&#x2003;&#x2003;D&#x9898;&#x5C31;&#x5F00;&#x59CB;&#x6BD4; A, B, C &#x6709;&#x601D;&#x7EF4;&#x5566;&#x3002;</p><p>&#x2003;&#x2003;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728;&#x8D70;&#x8DEF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x4EE5;&#x4E00;&#x76F4;&#x91CD;&#x590D;&#x6765;&#x56DE;&#x8D70;&#x4E00;&#x4E2A;&#x683C;&#x5B50;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4E0D;&#x6539;&#x53D8;&#x683C;&#x5B50;&#x7684;&#x503C;&#x5F97;&#x5947;&#x5076;&#x6027;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4EFB;&#x610F;&#x6539;&#x53D8;&#x4E0A;&#x9762;&#x7684;&#x6570;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x8054;&#x60F3;&#x5230;&#x5947;&#x5076;&#x6027;&#x4EE5;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5C06;&#x8D70;&#x5076;&#x6570;&#x6B21;&#x89C6;&#x4E3A;&#x6CA1;&#x6709;&#x8D70;&#x7684;&#x8BDD;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E2A;&#x8F68;&#x8FF9;&#x6700;&#x540E;&#x5C31;&#x662F;&#x4E00;&#x6761;&#x76F4;&#x7EBF;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; &#x5076;&#x2014;&#x2014;&#x5947;&#x2014;&#x2014;&#x5076;&#x3002;</p><p>&#x2003;&#x2003;&#x7136;&#x540E;&#x6211;&#x5C31;&#x5F88;&#x5929;&#x771F;&#x5730;&#x5F00;&#x59CB;&#x5199;&#x2014;&#x2014;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x4F8B;&#x6B7B;&#x6D3B;&#x8FC7;&#x4E0D;&#x53BB;&#x3002;&#x597D;&#x5427;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x60F3;&#x8981;&#x67D0;&#x4E2A;&#x683C;&#x5B50;&#x8D70;0&#x6B21;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x4E0D;&#x6EE1;&#x8DB3;&#x4E0A;&#x9762;&#x7684;&#x89C4;&#x5F8B;&#x4E86;&#x2014;&#x2014;&#x56E0;&#x4E3A;0&#x6B21;&#x9700;&#x8981;&#x4E25;&#x683C;&#x5730;&#x4E0D;&#x8D70;&#x3002;&#x6240;&#x4EE5;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; 0&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5947;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;0&#x3002;&#x5176;&#x4E2D;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x7684;&#x4EFB;&#x4F55;&#x4E00;&#x9879;&#x90FD;&#x53EF;&#x4EE5;&#x4E0D;&#x5B58;&#x5728;&#x3002;</p><p>&#x2003;&#x2003;&#x7136;&#x540E;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x5904;&#x5728;&#x90A3;&#x4E00;&#x6BB5;&#xFF0C;&#x76F4;&#x63A5;dp&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line">ll dp[N][<span class="number">5</span>], ans = INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = dp[<span class="number">0</span>][<span class="number">4</span>] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) {</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">1</span>] = <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + (a[i] ? (a[i] &amp; <span class="number">1</span>) : <span class="number">2</span>);</span><br><span class="line">dp[i][<span class="number">2</span>] = <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]), dp[i - <span class="number">1</span>][<span class="number">0</span>]) + (a[i] &amp; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">dp[i][<span class="number">3</span>] = <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>]) + (a[i] ? (a[i] &amp; <span class="number">1</span>) : <span class="number">2</span>);</span><br><span class="line">dp[i][<span class="number">4</span>] = <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]), <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">4</span>])) + a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) SMIN(ans, dp[n][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="E-Odd-Subrectangles"><a href="#E-Odd-Subrectangles" class="headerlink" title="E - Odd Subrectangles"></a>E - Odd Subrectangles</h2><p>&#x2003;&#x2003;&#x6211;&#x4E2A;&#x4EBA;&#x611F;&#x89C9;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x8FD9;&#x4E00;&#x573A;&#x91CC;&#x9762;&#x6700;&#x96BE;&#x7684;&#xFF0C;&#x6BD4;F&#x8FD8;&#x8981;&#x96BE;&#x3002;&#x6211;&#x4E00;&#x5F00;&#x59CB;&#x60F3;dp&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x4E0D;&#x592A;&#x884C;&#x3002;&#x7136;&#x540E;&#x60F3;&#x4E86;&#x534A;&#x5929;&#x60F3;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x53EA;&#x80FD;&#x770B;&#x4E86;&#x4E00;&#x773C;&#x9898;&#x89E3;&#x7684;&#x524D;&#x51E0;&#x53E5;&#x8BDD;&#x3002;&#x76F4;&#x63A5;&#x628A;&#x90A3;&#x4E24;&#x53E5;&#x8BDD;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x5427;&#x3002;</p><p>&#x2003;&#x2003;&#x201D;&#x5982;&#x679C;&#x9009;&#x7684;&#x884C;&#x6570;&#x786E;&#x5B9A;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x9009;&#x67D0;&#x4E00;&#x5217;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E5F;&#x4F1A;&#x786E;&#x5B9A;&#x3002;&#x201C;&#x4E3B;&#x8981;get&#x5230;&#x5047;&#x8BBE;&#x9009;&#x7684;&#x884C;&#x5148;&#x786E;&#x5B9A;&#x7684;&#x601D;&#x8DEF;&#x3002;</p><p>&#x2003;&#x2003;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x63A8;&#xFF0C;&#x90A3;&#x4E48;&#x60F3;&#x8981;&#x8BA9;&#x9009;&#x7684;&#x5217;&#x52A0;&#x8D77;&#x6765;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E3A;&#x5076;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x80FD;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x548C;&#x662F;&#x5947;&#x6570;&#x5217;&#xFF0C;&#x548C;&#x662F;&#x5076;&#x6570;&#x7684;&#x968F;&#x4FBF;&#x9009;&#x591A;&#x5C11;&#x3002;</p><p>&#x2003;&#x2003;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x6709; $a$ &#x4E2A;&#x5076;&#x6570;&#x5217;&#xFF0C; $b$ &#x4E2A;&#x5947;&#x6570;&#x5217;&#x3002;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x9009;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F; $&#x4E14;&#x662F;&#x5947;&#x6570;2^a \cdot \sum \limits_{i\leq b\text{&#x4E14;}i&#x662F;&#x5947;&#x6570;}{C_b^{i}} = 2^a \cdot 2^{b-1} = 2^{m-1}$&#x3002;&#x6240;&#x4EE5;&#x4E0D;&#x7BA1;&#x600E;&#x4E48;&#x9009;&#x884C;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x603B;&#x662F; $2^{m-1}$ &#x2014;&#x2014;&#x4F46;&#x662F;&#xFF0C;$b$ &#x5982;&#x679C;&#x662F; $0$ &#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x6CA1;&#x529E;&#x6CD5;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x5947;&#x6570;&#x5217;&#x4E86;&#xFF01;&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x4E00;&#x884C;&#x770B;&#x505A;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9009;&#x7684;&#x8FD9;&#x4E9B;&#x884C;&#x7684;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x5E94;&#x8BE5;&#x4E3A; $0$&#xFF01;</p><p>&#x200B;    &#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5957;&#x8DEF;&#x4E86;&#x3002;&#x8BC1;&#x660E;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x767E;&#x5EA6;&#xFF0C;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8FD9;&#x91CC;&#x7ED9;&#x51FA;&#x7ED3;&#x8BBA;&#xFF1A;&#x5982;&#x679C;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5927;&#x5C0F;&#x662F;$r$ &#xFF0C;&#x539F;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x4E3A; $n$&#xFF0C;&#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x4E3A; $2^n - 2^{n-r}$&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N][N], b[N][N], r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = (ll)x * x % P) <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = (ll)ans * x % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) read(a[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i){</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (a[i][j])</span><br><span class="line"><span class="keyword">if</span> (!b[j][j]) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) b[j][k] = a[i][k];</span><br><span class="line">++r;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) a[i][k] ^= b[j][k];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (ll)fpow(<span class="number">2</span>, m - <span class="number">1</span>) * (fpow(<span class="number">2</span>, n) + P - fpow(<span class="number">2</span>, n - r)) % P);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="F-Pass"><a href="#F-Pass" class="headerlink" title="F - Pass"></a>F - Pass</h2><p>&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x95EE;&#x5E8F;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x7684;&#x9898;&#x76EE;&#x7684;&#x5957;&#x8DEF;&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x8003;&#x8651;&#x76F4;&#x63A5;&#x6784;&#x9020;&#x5E8F;&#x5217;&#xFF0C;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x9700;&#x8981;&#x6EE1;&#x8DB3;&#x7684;&#x7279;&#x5F81;&#x3002;</p><p>&#x2003;&#x2003;&#x53D1;&#x73B0;&#x5BF9;&#x4E8E;&#x5E8F;&#x5217;&#x7684;&#x524D; $i$ &#x9879;&#xFF08;$1 \leq i \leq n$ &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E0D;&#x5305;&#x62EC;&#x540E; $n$ &#x9879;&#xFF09;&#xFF0C;&#x4ED6;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x7403;&#x4E00;&#x5B9A;&#x53EA;&#x80FD;&#x6765;&#x81EA;&#x524D; $i$ &#x4E2A;&#x4EBA;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x7EA2;&#x7403;&#x548C;&#x84DD;&#x7403;&#x7684;&#x6570;&#x91CF;&#x90FD;&#x6709;&#x4E86;&#x4E0A;&#x9650;&#xFF0C;&#x4E5F;&#x540C;&#x65F6;&#x56E0;&#x4E3A;&#x5BF9;&#x65B9;&#x7684;&#x4E0A;&#x9650;&#x4E5F;&#x6709;&#x4E86;&#x4E0B;&#x9650;&#x3002;</p><p>&#x2003;&#x2003;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#x5C31;&#x662F; dp &#x7684;&#x88F8;&#x9898;&#x4E86;&#x3002;&#x8BBE; $dp[i][j]$ &#x8868;&#x793A;&#x524D; $i$ &#x6B65;&#xFF0C;&#x62FF;&#x4E86; $j$ &#x4E2A;&#x84DD;&#x7403;&#x7684;&#x65B9;&#x6848;&#x6570;&#xFF0C;&#x8BA8;&#x8BBA;&#x8FD9;&#x4E00;&#x90E8;&#x62FF;&#x7EA2;&#x7403;&#x8FD8;&#x662F;&#x84DD;&#x7403;&#x8F6C;&#x79FB;&#x4E00;&#x4E0B;&#x5C31;&#x597D;&#x4E86;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cntb[N &lt;&lt; <span class="number">1</span>], dp[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inc</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>{x += y; x &gt;= P ? x -= P : <span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>); n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cntb[i] = cntb[i - <span class="number">1</span>] + s[i] - <span class="string">&apos;0&apos;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i) cntb[i] = cntb[i - <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">std</span>::max(cntb[i] - i, <span class="number">0</span>); j &lt;= <span class="built_in">std</span>::min(cntb[i], i); ++j) {</span><br><span class="line"><span class="keyword">if</span> (j) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (i &gt; j) Inc(dp[i][j], dp[i - <span class="number">1</span>][j]);</span><br><span class="line"><span class="comment">//  dbg(&quot;dp[%d][%d] = %d\n&quot;, i, j, dp[i][j]);</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[n &lt;&lt; <span class="number">1</span>][cntb[n]]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;很遗憾错过了一场 AtCoder 。听说这场是涨分场呢，于是特意来补一下题。&lt;/p&gt;
    
    </summary>
    
      <category term="AtCoder" scheme="https://www.violetoj.com/categories/AtCoder/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round #538 (Div. 2)(CF1114)</title>
    <link href="https://www.violetoj.com/2019/02/11/Codeforces-Round538-(Div.%202)-(CF1114)/"/>
    <id>https://www.violetoj.com/2019/02/11/Codeforces-Round538-(Div. 2)-(CF1114)/</id>
    <published>2019-02-11T10:56:00.000Z</published>
    <updated>2019-03-18T13:05:20.722Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2003;&#x2003;<del>&#x4ECA;&#x5929;</del>&#x6628;&#x5929;&#x665A;&#x4E0A;&#x7684;cf&#x6253;&#x7684;&#x975E;&#x5E38;&#x60E8;&#xFF08;&#x4EC5;&#x4EE3;&#x8868;&#x6DEE;&#x4E2D;&#x6700;&#x4F4E;&#x6C34;&#x5E73;</p><p>&#x2003;&#x2003;&#x5148;&#x662F;&#x4E00;&#x8DEF;&#x7F13;&#x6162;&#x5730;&#x624D;A&#x6389;B,C&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x5F00;&#x59CB;&#x6760;D&#x3002;&#x4E8E;&#x662F;&#x5199;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;O(n^2)&#x7684;&#x7EBF;&#x6027;dp&#xFF0C;&#x7136;&#x540E;&#x5C31;wa6&#xFF0C;&#x8C03;&#x5230;&#x7ED3;&#x675F;&#x3002;&#x7ED3;&#x675F;&#x540E;&#x53D1;&#x73B0;&#x5B8C;&#x5168;&#x770B;&#x6F0F;&#x4E86;&#x4E24;&#x53E5;&#x8BDD;&#x3002;&#x5662;&#xFF0C;&#x8D77;&#x59CB;&#x70B9;&#xFF01;&#xFF01;&#xFF01;</p><p>&#x2003;&#x2003;&#x597D;&#x5427;&#x7136;&#x540E;&#x7B97;&#x7B97;&#x81EA;&#x5DF1;&#x6709;&#x53EF;&#x80FD;&#x8FD9;&#x4E00;&#x573A;&#x8981;&#x53D8;&#x6210;+0&#xFF0C;&#x53CD;&#x6B63;&#x5728;0&#x5DE6;&#x53F3;&#x3002;<br>&#x7ED3;&#x675F;&#x540E;&#x5F00;&#x59CB;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x5199;D&#xFF0C;&#x987A;&#x4FBF;&#x601D;&#x8003;F&#x3002;&#x7ED3;&#x679C;&#x5199;&#x5B8C;D&#x53D1;&#x73B0;A&#x600E;&#x4E48;fst&#x4E86;&#xFF0C;&#x7136;&#x540E;&#x3002;&#x3002;&#x3002;&#x56E0;&#x4E3A;&#x4E60;&#x60EF;&#x4E8E;&#x5BF9;&#x76F8;&#x4F3C;&#x7684;&#x8BED;&#x53E5;&#x590D;&#x5236;&#x7C98;&#x8D34;&#xFF0C;&#x6709;&#x4E9B;&#x4E1C;&#x897F;&#x6CA1;&#x6709;&#x6539;&#x2014;&#x2014;&#x4E09;&#x53E5;&#x8BDD;&#x90FD;&#x5728; -a&#xFF01;&#xFF01;&#xFF01;&#xFF08;&#x8FD9;&#x4E2A;&#x8FD8;&#x80FD;&#x8FC7;pt&#xFF1F;</p><p>&#x2003;&#x2003;&#x597D;&#x5427;&#x60F3;&#x5B8C;F&#x4EE5;&#x540E;&#x53C8;&#x987A;&#x4FBF;&#x770B;&#x4E86;&#x4E00;&#x4E0B;&#x3002;&#x53D1;&#x73B0;&#x600E;&#x4E48;B&#x4E5F;fst&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x5FD8;&#x4E86;&#x8003;&#x8651;&#x76F8;&#x540C;&#x7684;&#x6570;&#x7684;&#x95EE;&#x9898;&#x3002;&#x3002;&#x3002;</p><p>&#x2003;&#x2003;&#x8FD8;&#x597D;C&#x6CA1;&#x6709;fst&#x3002;&#x6240;&#x4EE5;&#x5927;&#x6982;&#x4E0D;&#x591A;&#x4E0D;&#x5C11;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x4E0A;&#x4E00;&#x573A;&#x6DA8;&#x7684;&#x5206;&#x6570;&#x7ED9;&#x62B5;&#x6389;&#x3002;</p><p>&#x2003;&#x2003;&#x4E5F;&#x662F;wph&#x5B66;&#x957F;&#x8BF4;&#x7684;&#x597D;&#xFF0C;&#x8FD9;&#x4E9B;&#x90FD;&#x662F;&#x7528;&#x8840;&#x6362;&#x6765;&#x7684;&#x6559;&#x8BAD;&#x554A;&#x3002;&#xFF08;&#x4F46;&#x662F;&#x770B;&#x9519;&#x9898;&#x771F;&#x7684;&#x4E0D;&#x5E94;&#x8BE5;&#xFF0C;&#x8FD9;&#x662F;&#x5728;NOIP&#x5C31;&#x72AF;&#x8FC7;&#x7684;&#x9519;&#x554A;&#x3002;</p><a id="more"></a><hr><h2 id="A-Got-Any-Grapes"><a href="#A-Got-Any-Grapes" class="headerlink" title="A. Got Any Grapes?"></a>A. Got Any Grapes?</h2><p>&#x2003;&#x2003;&#x8FD9;&#x79CD;&#x9898;&#x76EE;&#x76F4;&#x63A5;&#x505A;&#xFF0C;&#x663E;&#x7136;&#x662F;&#x5148;&#x5C3D;&#x91CF;&#x4F9B;&#x7ED9;Andrew&#xFF0C;&#x7136;&#x540E;&#x662F;Dmitry&#xFF0C;&#x6700;&#x540E;&#x662F;Michal&#x3002;</p><p>&#x2003;&#x2003;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x4E0D;&#x8981;&#x72AF;&#x6211;&#x72AF;&#x8FC7;&#x7684;&#x9519;&#x8BEF;&#x3002;&#xFF08;&#x4EE5;&#x540E;&#x8BB0;&#x5F97;&#x590D;&#x5236;&#x7C98;&#x8D34;&#x76F8;&#x4F3C;&#x5185;&#x5BB9;&#x7684;&#x65F6;&#x5019;&#x6CE8;&#x610F;&#x4FEE;&#x6539;&#x5168;&#x6240;&#x6709;&#x8BE5;&#x4FEE;&#x6539;&#x7684;&#x4E1C;&#x897F;&#x554A;&#xFF09;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x, y, z, a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">End</span><span class="params">()</span> </span>{<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">read(a), read(b), read(c);</span><br><span class="line">read(x), read(y), read(z);</span><br><span class="line"><span class="keyword">if</span> (x &lt; a) End(); <span class="keyword">else</span> x -= a;</span><br><span class="line">y += x;</span><br><span class="line"><span class="keyword">if</span> (y &lt; b) End(); <span class="keyword">else</span> y -= b;</span><br><span class="line">z += y;</span><br><span class="line"><span class="keyword">if</span> (z &lt; c) End(); <span class="keyword">else</span> z -= c;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="B-Yet-Another-Array-Partitioning-Task"><a href="#B-Yet-Another-Array-Partitioning-Task" class="headerlink" title="B. Yet Another Array Partitioning Task"></a>B. Yet Another Array Partitioning Task</h2><p>&#x2003;&#x2003;CF&#x4E0A;&#x7684;B&#x9898;&#x4E00;&#x822C;&#x90FD;&#x662F;&#x5927;&#x80C6;&#x731C;&#x7ED3;&#x8BBA;&#x9898;&#x76EE;&#x3002;</p><p>&#x2003;&#x2003;&#x76F4;&#x63A5;&#x731C;&#x7ED3;&#x8BBA;&#xFF1A; &#x4E00;&#x5B9A;&#x53EF;&#x4EE5;&#x9009;&#x9F50;&#x524D; $m \cdot k$ &#x5927;&#x7684;&#x6570;&#x3002;&#x7136;&#x540E;&#x5206;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x8981;&#x51D1;&#x9F50; $m$ &#x4E2A;&#x5728;&#x524D; $m \cdot k$ &#x5927;&#x7684;&#x6570;&#x4E2D;&#x7684;&#x6570;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5207;&#x4E00;&#x5757;&#x3002;</p><p>&#x2003;&#x2003;&#x6CE8;&#x610F;&#x4E00;&#x4E0B;&#xFF08;&#x4E5F;&#x662F;&#x6211;fst&#x7684;&#x539F;&#x56E0;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x524D; $m \cdot k$ &#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x6CA1;&#x6709;&#x88AB;&#x9009;&#x5168;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x5206;&#x7684;&#x65F6;&#x5019;&#x8981;&#x6CE8;&#x610F;&#x5224;&#x65AD;&#x4E00;&#x4E0B;&#x90A3;&#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x9009;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#xFF0C;&#x4E0D;&#x591F;&#x9009;&#x4E86;&#x5C31;&#x4E0D;&#x8981;&#x628A;&#x5B83;&#x7B97;&#x4E0A;&#x53BB;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, p, a[N], b[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">read(n), read(m), read(k); p = m * k; --k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), b[i] = a[i];</span><br><span class="line"><span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - p + <span class="number">1</span>; i &lt;= n; ++i) ans += b[i], mp[b[i]]++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cnt = <span class="number">0</span>; i &lt;= n; ++i) {</span><br><span class="line"><span class="keyword">if</span> (mp.count(a[i]) &amp;&amp; mp[a[i]]) ++cnt, --mp[a[i]];</span><br><span class="line"><span class="keyword">if</span> (cnt == m) --k, <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, i, <span class="string">&quot; \n&quot;</span>[k == <span class="number">0</span>]), cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="C-Trailing-Loves-or-L&#x2019;oeufs"><a href="#C-Trailing-Loves-or-L&#x2019;oeufs" class="headerlink" title="C. Trailing Loves (or L&#x2019;oeufs?)"></a>C. Trailing Loves (or L&#x2019;oeufs?)</h2><p>&#x2003;&#x2003;&#x5728; $b$ &#x8FDB;&#x5236;&#x4E0B;&#x672B;&#x5C3E;&#x6709; $k$ &#x4E2A;0&#xFF0C;&#x90A3;&#x4E48;&#x8BF4;&#x660E;</p><script type="math/tex; mode=display">\quad b ^ k | n!</script><p>&#x2003;&#x2003;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x628A; $b$ &#x5206;&#x89E3;&#x8D28;&#x56E0;&#x6570;</p><script type="math/tex; mode=display">(p_1^{k_1} \cdot p_2^{k_2} \cdot \cdots) ^k | n!</script><p>&#x2003;&#x2003;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x53D1;&#x73B0;</p><script type="math/tex; mode=display">k = \min\{\log_{p_1} n!,\ \log_{p_2}{n!},\ \cdots\ \}</script><p>&#x2003;&#x2003;&#x81F3;&#x4E8E;&#x8BF4; $\log_p{n!}$ &#x600E;&#x4E48;&#x6C42;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x662F;&#x666E;&#x53CA;&#x7EC4;&#x77E5;&#x8BC6;&#x4E86;&#x3002;</p><script type="math/tex; mode=display">\log_p n!= \sum_{i = 1} \lfloor \frac n {p ^ i} \rfloor</script><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line">ll n, m, ans = <span class="number">0x7fffffffffffffff</span>;</span><br><span class="line"><span class="keyword">int</span> np[N], p[N], prt, cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make_Prime</span><span class="params">(<span class="keyword">int</span> n )</span></span>{</span><br><span class="line">np[<span class="number">0</span>] = np[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line"><span class="keyword">if</span> (!np[i]) p[++prt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j) {</span><br><span class="line">np[i * p[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % p[j]) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">GetNum</span><span class="params">(ll n, ll x)</span> </span>{</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n) ans += n /= x;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">read(n), read(m);</span><br><span class="line">Make_Prime(<span class="built_in">sqrt</span>(m));</span><br><span class="line">ll hkk = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i)</span><br><span class="line"><span class="keyword">while</span> (hkk % p[i] == <span class="number">0</span>) hkk /= p[i], ++cnt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i) <span class="keyword">if</span> (cnt[i]) SMIN(ans, GetNum(n, p[i]) / cnt[i]);</span><br><span class="line"><span class="keyword">if</span> (hkk &gt; <span class="number">1</span>) SMIN(ans, GetNum(n, hkk));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>, ans);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="D-Flood-Fill"><a href="#D-Flood-Fill" class="headerlink" title="D. Flood Fill"></a>D. Flood Fill</h2><p>&#x2003;&#x2003;&#x8FD9;&#x9053;&#x9898;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x770B;&#x89C1;&#x8D77;&#x59CB;&#x65B9;&#x5757;&#x8FD9;&#x4E2A;&#x4E1C;&#x897F;&#xFF0C;&#x4E00;&#x76F4;wa6&#x3002;</p><p>&#x2003;&#x2003;&#x5982;&#x679C;&#x6709;&#x8D77;&#x59CB;&#x70B9;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x533A;&#x95F4;dp&#x6A21;&#x677F;&#x4E86;&#x3002;</p><p>&#x2003;&#x2003;&#x8BBE; $dp[i][j]$ &#x8868;&#x793A; $i..j$ &#x7684;&#x8FD9;&#x6BB5;&#x533A;&#x95F4;&#x5168;&#x90E8;&#x5316;&#x6210;&#x4E00;&#x79CD;&#x989C;&#x8272;&#x7684;&#x4EE3;&#x4EF7;&#x3002;</p><script type="math/tex; mode=display">dp[i][j] = \left\{\begin{align*}&dp[i+1][j-1] &&c[i] = c[j]\\&\min\{dp[i][j-1], dp[i][j+1]\} + 1 &&c[i] \neq c[j]\end{align*}\right.</script><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, c[N], dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(c[i]), SMAX(m, c[i]);</span><br><span class="line">n = <span class="built_in">std</span>::unique(c + <span class="number">1</span>, c + n +<span class="number">1</span>) - c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">if</span>(c[i] == c[j]) dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">std</span>::min(dp[i][j - <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][n]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="E-Arithmetic-Progression"><a href="#E-Arithmetic-Progression" class="headerlink" title="E. Arithmetic Progression"></a>E. Arithmetic Progression</h2><p>&#x2003;&#x2003;<del>&#x4EA4;&#x4E92;&#x9898;&#x5A31;&#x4E50;&#x8EAB;&#x5FC3;&#x3002;</del></p><p>&#x2003;&#x2003;&#x663E;&#x7136;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x4E8C;&#x5206;&#x5C31;&#x53EF;&#x4EE5;&#x5F88;&#x5F00;&#x5FC3;&#x5730;&#x6C42;&#x51FA;&#x6700;&#x5927;&#x503C;&#x3002;</p><p>&#x2003;&#x2003;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x53D1;&#x73B0;&#xFF0C;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x5DEE;&#x90FD;&#x5E94;&#x8BE5;&#x662F;&#x516C;&#x5DEE;&#x7684;&#x500D;&#x6570;&#x3002;&#x4E8E;&#x662F;&#x6211;&#x4EEC;&#x591A;&#x968F;&#x673A;&#x4E00;&#x4E9B;&#x4F4D;&#x7F6E;&#xFF0C;&#x56E0;&#x4E3A;&#x524D;&#x9762;&#x4E8C;&#x5206;&#x8FC7;&#xFF0C;&#x6240;&#x4EE5;&#x540E;&#x9762;&#x6700;&#x591A;&#x95EE;30&#x6B21;&#x5DE6;&#x53F3;&#xFF08;&#x5F53;&#x7136;&#x4E0D;&#x80FD;&#x76F4;&#x63A5;&#x95EE;&#x524D;30&#x4E2A;&#xFF0C;&#x9632;&#x6B62;&#x6BD2;&#x7624;&#x4F1A;&#x5361;&#xFF09;&#xFF0C;&#x628A;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x503C;&#x4E0E;&#x6700;&#x5927;&#x503C;&#x7684;&#x5DEE;&#x7B97;&#x51FA;&#x6765;&#xFF0C;&#x90A3;&#x4E48;&#x516C;&#x5DEE;&#x4E00;&#x5B9A;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x7EA6;&#x6570;&#xFF0C;&#x6709;&#x5F88;&#x5927;&#x7684;&#x6982;&#x7387;&#x662F; $\gcd$ &#x3002;</p><p>&#x2003;&#x2003;&#x4E0D;&#x4F1A;&#x8BC1;&#x660E;&#x6B63;&#x786E;&#x7387;&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, L, R, stp, used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">read(n); srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) {</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, get;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt; %d\n&quot;</span>, mid); fflush(<span class="built_in">stdout</span>);</span><br><span class="line">read(get);</span><br><span class="line"><span class="keyword">if</span>(get) l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">}</span><br><span class="line">R = l;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, get = <span class="number">0</span>; i &lt;= <span class="number">30</span> &amp;&amp; i &lt;= n; ++i) {</span><br><span class="line"><span class="keyword">int</span> pos = rand() % n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(used[pos]) pos = rand() % n + <span class="number">1</span>;</span><br><span class="line">used[pos] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d\n&quot;</span>, pos); fflush(<span class="built_in">stdout</span>);</span><br><span class="line">read(get);</span><br><span class="line">stp = <span class="built_in">std</span>::__gcd(stp, R - get);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;! %d %d\n&quot;</span>, R - (n - <span class="number">1</span>) * stp, stp);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="F-Please-another-Queries-on-Array"><a href="#F-Please-another-Queries-on-Array" class="headerlink" title="F. Please, another Queries on Array?"></a>F. Please, another Queries on Array?</h2><p>&#x2003;&#x2003;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x6B27;&#x62C9;&#x51FD;&#x6570;&#x7684;&#x516C;&#x5F0F;&#x3002;</p><script type="math/tex; mode=display">\varphi(n) = n \sum_{p\text{是}n\text{质因数}} 1-\frac1p</script><p>&#x2003;&#x2003;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x7EBF;&#x6BB5;&#x6811;&#x7EF4;&#x62A4;&#x533A;&#x95F4;&#x4E58;&#x79EF;&#xFF0C;&#x4EE5;&#x53CA;&#x6BCF;&#x4E2A;&#x8D28;&#x6570;&#x51FA;&#x6CA1;&#x51FA;&#x73B0;&#x8FC7;&#x3002;</p><p>&#x2003;&#x2003;&#x4E00;&#x5F00;&#x59CB;&#x6253;&#x7B97;&#x7528;bitset&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0; $300$ &#x4EE5;&#x5185;&#x8D28;&#x6570;&#x53EA;&#x6709; $62$ &#x4E2A;&#xFF0C;&#x4E0D;&#x591A;&#x4E0D;&#x5C11;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5; <code>ull</code>&#x5B58;&#x3002;&#x5927;&#x6982; <code>ll</code>&#x4E5F;&#x5C31;&#x591F;&#x4E86;&#x3002;</p><p>&#x2003;&#x2003;&#x6CE8;&#x610F;&#x533A;&#x95F4;&#x4E58;&#x79EF;&#xFF0C;&#x4E58;&#x6807;&#x8BB0;&#x5728;&#x533A;&#x95F4;&#x4E0A;&#x7B97;&#x8D21;&#x732E;&#x8981;&#x4EE5;&#x5E42;&#x7684;&#x5F62;&#x5F0F;&#x7B97;&#x4E0A;&#x53BB;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x50CF;&#x6C42;&#x533A;&#x95F4;&#x548C;&#x90A3;&#x6837;&#x76F4;&#x63A5;&#x4E58;&#x3002;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x6B7B;&#x6D3B;&#x8FC7;&#x4E0D;&#x53BB;&#x3002;&#x8FD8;&#x6709;&#x5982;&#x679C;&#x662F;&#x7528; <code>ull</code>&#x538B;&#x4F4D;&#x7684;&#xFF0C;&#x6CE8;&#x610F;&#x7B97;&#x96C6;&#x5408;&#x7684;&#x65F6;&#x5019; <code>1 &lt;&lt; i</code>&#x8981;&#x5199;&#x6210;<code>1ull &lt;&lt; i</code>&#x3002;</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;ull, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">300</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, z, a[N];</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prt, p[M], np[M], inv[N], id[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make_Prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">np[<span class="number">0</span>] = np[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) {</span><br><span class="line">inv[i] = (ll)(P - P / i) * inv[P % i] % P;</span><br><span class="line"><span class="keyword">if</span> (!np[i]) p[++prt] = i, id[i] = prt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j){</span><br><span class="line">np[i * p[j]] = j;</span><br><span class="line"><span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> pli <span class="keyword">operator</span> + (<span class="keyword">const</span> pli &amp;a, <span class="keyword">const</span> pli &amp;b) {<span class="keyword">return</span> pli(a.fi | b.fi, (ll)a.se * b.se % P);}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x= (ll)x * x % P) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ans = (ll)ans * x % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">ull val, add;</span><br><span class="line"><span class="keyword">int</span> mul, tag;</span><br><span class="line">} t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>{</span><br><span class="line">t[o].tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L == R) {</span><br><span class="line"><span class="keyword">int</span> x = a[L]; t[o].mul = a[L];</span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">1</span> &amp;&amp; np[x]) t[o].val |= <span class="number">1u</span>ll &lt;&lt; (np[x] - <span class="number">1</span>), x /= p[np[x]];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">1</span>) t[o].val |= <span class="number">1u</span>ll &lt;&lt; (id[x] - <span class="number">1</span>); <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Build(lc, L, M); Build(rc, M + <span class="number">1</span>, R);</span><br><span class="line">t[o].val = t[lc].val | t[rc].val; t[o].mul = (ll)t[lc].mul * t[rc].mul % P;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, ull y)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) {</span><br><span class="line">t[o].tag = (ll)t[o].tag * x % P;</span><br><span class="line">t[o].mul = (ll)t[o].mul * fpow(x, R - L + <span class="number">1</span>) % P;</span><br><span class="line">t[o].add |= y; t[o].val |= t[o].add; <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= M) Mul(lc, L, M, l, r, x, y);</span><br><span class="line"><span class="keyword">if</span> (r &gt; M) Mul(rc, M + <span class="number">1</span>, R, l, r, x, y);</span><br><span class="line">t[o].val = t[lc].val | t[rc].val | t[o].add;</span><br><span class="line">t[o].mul = (ll)t[lc].mul * t[rc].mul % P *fpow(t[o].tag, R - L + <span class="number">1</span>) % P;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pli <span class="title">Get</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, pli add = pli(<span class="number">0</span>, <span class="number">1</span>))</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> pli(t[o].val, t[o].mul) + pli(add.fi, fpow(add.se, R - L + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>; pli hkk = add + pli(t[o].add, t[o].tag);</span><br><span class="line"><span class="keyword">if</span> (r &lt;= M) <span class="keyword">return</span> Get(lc, L, M, l, r, hkk);</span><br><span class="line"><span class="keyword">if</span> (l &gt; M) <span class="keyword">return</span> Get(rc, M + <span class="number">1</span>, R, l, r, hkk);</span><br><span class="line"><span class="keyword">return</span> Get(lc, L, M, l, r, hkk) + Get(rc, M + <span class="number">1</span>, R, l, r, hkk);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetAns</span><span class="params">(pli x)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> ans = x.se; ull S = x.fi;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i)</span><br><span class="line"><span class="keyword">if</span>((S &gt;&gt; (i - <span class="number">1</span>)) &amp; <span class="number">1</span>) ans = (ll)ans * inv[p[i]] % P * (p[i] - <span class="number">1</span>) % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">&quot;hkk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m); Make_Prime(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">Build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) {</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt); read(x), read(y);</span><br><span class="line"><span class="keyword">if</span> (*opt == <span class="string">&apos;M&apos;</span>) {</span><br><span class="line">read(z); ull hkk = <span class="number">0</span>; <span class="keyword">int</span> r = z;</span><br><span class="line"><span class="keyword">while</span> (r &gt; <span class="number">1</span> &amp;&amp; np[r]) hkk |= <span class="number">1u</span>ll &lt;&lt; (np[r] - <span class="number">1</span>), r /= p[np[r]];</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">1</span>) hkk |= <span class="number">1u</span>ll &lt;&lt; (id[r] - <span class="number">1</span>);</span><br><span class="line">Mul(<span class="number">1</span>, <span class="number">1</span>, n, x, y, z, hkk);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, GetAns(Get(<span class="number">1</span>, <span class="number">1</span>, n, x, y)));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&lt;del&gt;今天&lt;/del&gt;昨天晚上的cf打的非常惨（仅代表淮中最低水平&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;先是一路缓慢地才A掉B,C，然后就开始杠D。于是写出了一个O(n^2)的线性dp，然后就wa6，调到结束。结束后发现完全看漏了两句话。噢，起始点！！！&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好吧然后算算自己有可能这一场要变成+0，反正在0左右。&lt;br&gt;结束后开始然后开始写D，顺便思考F。结果写完D发现A怎么fst了，然后。。。因为习惯于对相似的语句复制粘贴，有些东西没有改——三句话都在 -a！！！（这个还能过pt？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好吧想完F以后又顺便看了一下。发现怎么B也fst了？？？发现好像忘了考虑相同的数的问题。。。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;还好C没有fst。所以大概不多不少，可以把上一场涨的分数给抵掉。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;也是wph学长说的好，这些都是用血换来的教训啊。（但是看错题真的不应该，这是在NOIP就犯过的错啊。&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://www.violetoj.com/categories/Codeforces/"/>
    
    
  </entry>
  
</feed>
