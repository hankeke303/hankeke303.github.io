<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hankeke</title>
  
  <subtitle>一面风情深有韵，半笺娇恨寄幽怀。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.violetoj.com/"/>
  <updated>2019-03-14T02:36:46.098Z</updated>
  <id>https://www.violetoj.com/</id>
  
  <author>
    <name>hankeke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卡常者π酱 题解</title>
    <link href="https://www.violetoj.com/2019/03/14/%E5%8D%A1%E5%B8%B8%E8%80%85%CF%80%E9%85%B1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.violetoj.com/2019/03/14/卡常者π酱-题解/</id>
    <published>2019-03-14T02:14:53.000Z</published>
    <updated>2019-03-14T02:36:46.098Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      卡常者π酱 题解
    
    </summary>
    
    
      <category term="后缀自动机" scheme="https://www.violetoj.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="单调队列" scheme="https://www.violetoj.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="线段树合并" scheme="https://www.violetoj.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 1 (CF1110)（A-F）</title>
    <link href="https://www.violetoj.com/2019/02/15/Codeforces-Global-Round-1-CF1110-%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%8C%E5%8F%AA%E6%9C%89-A-F%EF%BC%89/"/>
    <id>https://www.violetoj.com/2019/02/15/Codeforces-Global-Round-1-CF1110-（未完结，只有-A-F）/</id>
    <published>2019-02-15T02:55:00.000Z</published>
    <updated>2019-03-13T11:04:54.747Z</updated>
    
    <content type="html"><![CDATA[<p>继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。</p><p>因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。</p><a id="more"></a><hr><h2 id="A-Parity"><a href="#A-Parity" class="headerlink" title="A. Parity"></a>A. Parity</h2><p>保存 <code>%2</code> 的值就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b, k, a[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(b), read(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) read(a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k, p = <span class="number">1</span>; i; --i, p = p * b % <span class="number">2</span>) (ans += a[i] * p) %= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (ans) <span class="built_in">puts</span>(<span class="string">"odd"</span>); <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"even"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Tape"><a href="#B-Tape" class="headerlink" title="B. Tape"></a>B. Tape</h2><p>一开始准备二分，然后发现他要的是最小的总长度，不太好二分。然后发现我们在断的时候，应该尽量把间隙比较大的优先断掉，所以直接贪心，排个序就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, a[N], b[N], c[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">read(n), read(m), read(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), b[i - <span class="number">1</span>] = a[i] - a[i - <span class="number">1</span>], c[i] = i;</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">1</span>, c + n, [](<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)&#123;<span class="keyword">return</span> b[x] &gt; b[y];&#125;);</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">1</span>, c + k); c[k] = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) ans += a[c[i]] - a[c[i - <span class="number">1</span>] + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Meaningless-Operations"><a href="#C-Meaningless-Operations" class="headerlink" title="C. Meaningless Operations"></a>C. Meaningless Operations</h2><p>好一道打表题。</p><p>想得百无聊赖之下开始打表，然后就有惊喜了。</p><p>发现除了 $2^k-1$ 外的数，答案都是比他大的最小的 $2^k-1$ 。</p><p>那么 $2^k-1$ 自己呢？一开始没有把表打全，以为就是如果 $k$ 是偶数，就是 $a/3$ ，否则就是 $1$ ，结果交上去 wa2.</p><p>于是继续打 $2^k-1$，其实这个时候可以直接把所有的表直接复制上去。可我偏要找出规律来。好像答案都是原数的因数，而且——而且似乎还是最大的因数啊。</p><p>于是就可以 A 掉了。</p><script type="math/tex; mode=display">f(a) = \max_{0 < b < a}{gcd(a \oplus b, a \> \& \> b)}.</script><p>仔细想一下，对于这个式子，如果 $a \neq 2^k-1$ ，那么 $a$ 就不是所有位都为 $1$ ，那么令 $b = ~a$ ，那么 $a \oplus b = 2 ^ k - 1, a  > \&amp;  > b = 0$ 。于是 $gcd$ 就是 $2^k-1$。</p><p>否则呢，如果 $a$ 的二进制位全是 $1$ ，那么这里的 $b$ 应该是 $0$ ，显然不满足要求。发现当 $a$ 二进制位都是 $1$ 时， $a \oplus b = a - b$， $a > \&amp; > b = b$ 。于是原式可化为 $f(a) = \max \limits_{0 &lt; b &lt; a}{gcd(a - b, b)} = \max \limits_{0 &lt; b &lt; a}{gcd(a, b)}$ 。显然当 $b | a$ 时 $f(a)$ 最大，于是 $b$ 就是 $a$ 最大的因数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> q, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x) ++ans, x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, p = <span class="built_in">sqrt</span>(x); i &lt;= p; ++i)</span><br><span class="line"><span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> x / i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">read(x); <span class="keyword">int</span> p = Get(x), s = (<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (s != x) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Get2(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h2><p>我感觉这道题比 E,F 都难。可能是因为太菜了才会这样想。（因为目前这六道题里面只有这道题是看题解做的。。。）</p><p>首先最重要的结论是 $(i, i + 1, i + 2)$ 这样的顺子最多取两个，否则可以自己先把对子 $(i , i, i)$取完是不会比原方案差的。</p><p>于是我们限制一下顺子取的个数就可以了。</p><p>设 $dp[i][j][k]$ 表示 dp 到第 $i$ 个数，保证对子 $(i - 1, i, i + 1)$ 取 $j$ 个，对子 $(i, i + 1, i + 2)$ 取 $k$ 个。</p><p>那么有</p><script type="math/tex; mode=display">dp[i][j][k] = \max_{l = 0} ^ 2 {dp[i][l][j] + k + \lfloor \frac{num[i] - j - k - l}3 \rfloor}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, a[N], dp[N][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n); read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(x), ++a[x];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">2</span>; ++l)</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= j + k + l) SMAX(dp[i][j][k], dp[i - <span class="number">1</span>][l][j] + k + (a[i] - j - k - l) / <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h2><p>一开始捣鼓了半天推出了一堆奇怪的没有用的性质。于是后来干脆直接划掉重新换个思路思考。</p><p>记得好像对于序列上进行变化的题目好多都是用差分来做的，所以我开始从差分上考虑。</p><p>然后发现好像差分完就没了。</p><script type="math/tex; mode=display">c_i' = c_{i + 1} + c_{i - 1} - c_i\\\text{可以推得}\\c_{i + 1} - c_i' = c_i - c_{i - 1}\\c_i' - c_{i - 1} = c_{i + 1} - c_i</script><p>也就是说一次操作其实是把差分数组上两个数交换一下。</p><p>注意要特判一下两端的原数据，因为两端不可以进行操作。一开始没有注意，就wa4了一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, c[N], t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(t[i]);</span><br><span class="line"><span class="keyword">if</span> (c[<span class="number">1</span>] != t[<span class="number">1</span>] || c[n] != t[n]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) c[i] = c[i] - c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; --i) t[i] = t[i] - t[i - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::sort(c + <span class="number">2</span>, c + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::sort(t + <span class="number">2</span>, t + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">memcmp</span>(c + <span class="number">2</span>, t + <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n - <span class="number">1</span>))) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h2><p>映象中这道题好像是我们学校学长暑假讲过的原题，但是记不起来了，去翻 ppt 却很神奇地没有找到。</p><p>但是不影响这道题确实不难。</p><p>显然是离线，把询问挂在 $v$ 上，假设 $dis[i]$ 表示 $v$ 到 $i$ 的距离，可以发现，从父亲跳到儿子，会把儿子的子树内的点的 $dis$ 值加上 $w$ ( $w$ 是边权)，其余的点减上 $w$ 。</p><p>直接线段树维护即可。</p><p>注意代码里面的 $dis$ 数组和上面的分析里面的 $dis$ 不是一个东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, z, dfc, fa[N], dfn[N], num[N], w[N];</span><br><span class="line">ll dis[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> to, ne, w;&#125; g[N &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;g[++tot].to = y; g[tot].w = z; g[tot].ne = head[x]; head[x] = tot;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Question</span>&#123;</span><span class="keyword">int</span> l, r; ll *ans;&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Question&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>ll val, add;&#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) <span class="keyword">return</span> (<span class="keyword">void</span>)(t[o].val = dis[L]);</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Build(lc, L, M); Build(rc, M + <span class="number">1</span>, R);</span><br><span class="line">t[o].val = min(t[lc].val, t[rc].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll k)</span> </span>&#123;</span><br><span class="line"><span class="comment">// dbg("o = %d, L = %d, R = %d, l = %d, r = %d, k = %d\n", o, L, R, l, r, k);</span></span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> (<span class="keyword">void</span>)(t[o].add += k, t[o].val += k);</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= M) Add(lc, L, M, l, r, k);</span><br><span class="line"><span class="keyword">if</span> (r &gt; M) Add(rc, M + <span class="number">1</span>, R, l, r, k);</span><br><span class="line">t[o].val = min(t[lc].val, t[rc].val) + t[o].add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Qmin</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> t[o].val;</span><br><span class="line"><span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= M) <span class="keyword">return</span> Qmin(lc, L, M, l, r) + t[o].add;</span><br><span class="line"><span class="keyword">if</span> (l &gt; M) <span class="keyword">return</span> Qmin(rc, M + <span class="number">1</span>, R, l, r) + t[o].add;</span><br><span class="line"><span class="keyword">return</span> min(Qmin(lc, L, M, l, r), Qmin(rc, M + <span class="number">1</span>, R, l, r)) + t[o].add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">num[x] = <span class="number">1</span>;</span><br><span class="line">for fec(i, x, y) dfs_pre(y), num[x] += num[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, w[x]);</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, x, x + num[x] - <span class="number">1</span>, -w[x] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : q[x]) *i.ans = Qmin(<span class="number">1</span>, <span class="number">1</span>, n, i.l, i.r);</span><br><span class="line"><span class="function"><span class="keyword">for</span> <span class="title">fec</span><span class="params">(i, x, y)</span> <span class="title">dfs</span><span class="params">(y)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, -w[x]);</span><br><span class="line">Add(<span class="number">1</span>, <span class="number">1</span>, n, x, x + num[x] - <span class="number">1</span>, w[x] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) read(y), read(z), dis[i] = dis[y] + z,  Addedge(fa[i] = y, i, w[i] = z);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) dis[fa[i]] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(x), read(y), read(z), q[x].pb((Question)&#123;y, z, ans + i&#125;);</span><br><span class="line">Build(<span class="number">1</span>, <span class="number">1</span>, n); dfs_pre(<span class="number">1</span>); dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。&lt;/p&gt;
&lt;p&gt;因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://www.violetoj.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoder] NIKKEI Programming Contest 2019 (暂缺F)</title>
    <link href="https://www.violetoj.com/2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-%E6%9A%82%E7%BC%BAF/"/>
    <id>https://www.violetoj.com/2019/02/13/AtCoder-NIKKEI-Programming-Contest-2019-暂缺F/</id>
    <published>2019-02-13T11:41:00.000Z</published>
    <updated>2019-03-12T13:40:34.337Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。</p><a id="more"></a><hr><h2 id="A-Subscribers"><a href="#A-Subscribers" class="headerlink" title="A - Subscribers"></a>A - Subscribers</h2><p>&emsp;&emsp;首先始终 $max = \min(A, B)$ ，$min$ 的话如果 $A + B \leq N$ ，那么就是 $0$ ，否则就是 $A + B - N$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(a), read(b);</span><br><span class="line"><span class="keyword">if</span> (a + b &lt;= n) <span class="built_in">printf</span>(<span class="string">"%d 0\n"</span>, <span class="built_in">std</span>::min(a, b));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="built_in">std</span>::min(a, b), a + b - n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Touitsu"><a href="#B-Touitsu" class="headerlink" title="B - Touitsu"></a>B - Touitsu</h2><p>&emsp;&emsp;直接枚举每一位，看看有几个相同的就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s%s%s"</span>, &amp;n, a + <span class="number">1</span>, b + <span class="number">1</span>, c + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == b[i] &amp;&amp; b[i] == c[i]) ;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] != b[i] &amp;&amp; a[i] != c[i] &amp;&amp; b[i] != c[i]) ans += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Different-Strokes"><a href="#C-Different-Strokes" class="headerlink" title="C - Different Strokes"></a>C - Different Strokes</h2><p>&emsp;&emsp;挺好一道题，就是有点简单。</p><p>&emsp;&emsp;我们考虑对于每一个人来说，假设他选的集合是 $S$ ，他要最大化这个东西：</p><script type="math/tex; mode=display">\sum_{i \in S} a[i] - \sum_{i \notin S} b[i]</script><p>&emsp;&emsp;如果我们假设 $B = \sum \limits_{i = 1} ^ n b[i]$ ，那么上式可化为：</p><script type="math/tex; mode=display">(\sum_{i \in S} a[i] +b[i]) -B</script><p>&emsp;&emsp;因此不管是谁，都应该尽量选择 $a[i]+b[i]$ 大的位置上的数。直接用一个堆维护一下就可了。（不过好像可以直接排一下序就可以啦，我似乎傻掉了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[x] + b[x] &lt; a[y] +b[y]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), read(b[i]), q.push(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (i &amp; <span class="number">1</span>) ans += a[q.top()], q.pop(); <span class="keyword">else</span> ans -= b[q.top()], q.pop();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Restore-the-Tree"><a href="#D-Restore-the-Tree" class="headerlink" title="D - Restore the Tree"></a>D - Restore the Tree</h2><p>&emsp;&emsp;怎么感觉 D 比 C 还简单啊。至少 C 还要想一会儿列个式子， 这道题好像是读完题就可以开始写了。</p><p>&emsp;&emsp;因为保证新加的边始终是从祖先连向孩子的，所以图里面的边实际上表示了深度的大小关系，因此根肯定还是入度为 0 的。找到根以后拓扑排序一下就可了，最后一个拓扑到 $i$ 的点就是 $i$ 的父亲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, rt, idg[N], fa[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> to, ne;&#125; g[N]; <span class="keyword">int</span> head[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;g[++tot].to = y; g[tot].ne = head[x]; head[x] = tot;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[N], hd, tl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">q[++tl] = rt;</span><br><span class="line"><span class="keyword">while</span> (hd &lt; tl) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q[++hd];</span><br><span class="line">for fec(i, x, y) if (!--idg[y]) fa[y] = x, q[++tl] = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span> + m; ++i) read(x), read(y), Addedge(x, y), ++idg[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!idg[i]) rt = i;</span><br><span class="line">BFS();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fa[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Weights-on-Vertices-and-Edges"><a href="#E-Weights-on-Vertices-and-Edges" class="headerlink" title="E - Weights on Vertices and Edges"></a>E - Weights on Vertices and Edges</h2><p>&emsp;&emsp;好题啊。</p><p>&emsp;&emsp;一开始我想的是肯定要从大到小枚举边要不要删。然后可以发现不在最小生成树上的边不管怎么删都不影响原图的连通性，于是可以直接把原图变成一棵树的时候，那么可以直接上 LCT 来维护连通性以及一些信息。但是似乎方法是成立的，只是额在AtCoder上如果还要写LCT，是真的不敢想啊。</p><p>&emsp;&emsp;于是又思考了一个小时，也没什么新思路，只能去看了一下题解。</p><p>&emsp;&emsp;是这样的，我们对于删边发过来，变成从小到大加边，用并查集来维护一下每个联通块的点权和。但是我们会发现，有些边可能之前是不能加的，但是随着后续的加边，联通块扩大了，那些边就可以加入了！</p><p>&emsp;&emsp;题解提供了一种很巧妙的办法，我们对于那样的边，我们把它们的联通块先连起来，但是并查集要记录所有并没有真正加进去的边的数量，显然后面如果我们真正加边的时候，就可以把该联通块并完以后，里面没有加的边都加进去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, w[N], ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> x, y, z;&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N], num[N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> fa[x] == x ? x : fa[x] = Find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">fa[y = Find(y)] = x = Find(x);</span><br><span class="line">num[x] += num[y], num[y] = <span class="number">0</span>;</span><br><span class="line">sum[x] += sum[y], sum[y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(w[i]), fa[i] = i, sum[i] = w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(g[i].x), read(g[i].y), read(g[i].z);</span><br><span class="line"><span class="built_in">std</span>::sort(g + <span class="number">1</span>, g + m +<span class="number">1</span>, [](<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b)&#123;<span class="keyword">return</span> a.z &lt; b.z;&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Find(g[i].x), y = Find(g[i].y), z = g[i].z;</span><br><span class="line"><span class="keyword">if</span> (Find(x) != Find(y)) Union(x, y);</span><br><span class="line">++num[x];</span><br><span class="line"><span class="keyword">if</span> (sum[x] &gt;= z) ans += num[x], num[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m - ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;后来到网上又翻了一会儿题解，发现我之前的方法还是有救的，而且还有两种解救的办法。</p><p>&emsp;&emsp;第一种是通过不带路径压缩，只用按秩合并来做的并查集，这种并查集的单次操作的时间复杂度是 $O(\log n)$ 的，而且因为没有路径压缩，可以很方便地实现 Cut 操作，比 LCT 好写，当然也就只适合这道题了，并查集扩展性没有 LCT 好。</p><p>&emsp;&emsp;第二种是建立 Kruskal 重构树。那么在从小到大枚举最小生成树里面的边的时候，对于一条边，如果其父亲没有被删除，那么显然他自己也不需要被删除了。因此如果判断的话，首先判断其父亲有没有被删，然后再看看其所在联通块的点权和——其现在所在联通块就是在重构树上的子树！这样的方法，因为删边时一定是从根山道这条边的，所以不需要更该其祖先的子树和的信息。</p><p>&emsp;&emsp;此上三中方法的时间复杂度都是 $O(m\log n)$ 。我就只写了第一种。</p><hr><h2 id="F-Jewels"><a href="#F-Jewels" class="headerlink" title="F - Jewels"></a>F - Jewels</h2><p>&emsp;&emsp;想了两个小时也不会做，上网找题解也找不到，看来我可能需要去研读一下官方的英文题解。但是由于我英语比较烂，所以F可能要咕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AtCoder" scheme="https://www.violetoj.com/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoder] Yahoo Programming Contest 2019</title>
    <link href="https://www.violetoj.com/2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/"/>
    <id>https://www.violetoj.com/2019/02/12/AtCoder-Yahoo-Programming-Contest-2019/</id>
    <published>2019-02-12T02:31:00.000Z</published>
    <updated>2019-03-12T13:40:49.060Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;很遗憾错过了一场 AtCoder 。听说这场是涨分场呢，于是特意来补一下题。</p><a id="more"></a><hr><h2 id="A-Anti-Adjacency"><a href="#A-Anti-Adjacency" class="headerlink" title="A - Anti-Adjacency"></a>A - Anti-Adjacency</h2><p>&emsp;&emsp;显然 $K \leq \frac{N + 1}2$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(k);</span><br><span class="line"><span class="keyword">if</span> (k &lt;= (n + <span class="number">1</span> &gt;&gt; <span class="number">1</span>)) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Path"><a href="#B-Path" class="headerlink" title="B - Path"></a>B - Path</h2><p>&emsp;&emsp;欧拉路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">4</span>, x, y, deg[N], jcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) read(x), read(y), ++deg[x], ++deg[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(deg[i] &amp; <span class="number">1</span>) ++jcnt;</span><br><span class="line"><span class="keyword">if</span> (jcnt == <span class="number">0</span> ||jcnt == <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-When-I-hit-my-pocket…"><a href="#C-When-I-hit-my-pocket…" class="headerlink" title="C - When I hit my pocket…"></a>C - When I hit my pocket…</h2><p>&emsp;&emsp;如果 $B-A\leq 2$的话，那么直接拍饼干肯定不比做交易差。</p><p>&emsp;&emsp;否则，就先把饼干数拍到 $A$ ，然后就卖一次买一次，最后如果还有单独的一次操作机会就拍一下就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(k), read(a), read(b);</span><br><span class="line"><span class="keyword">if</span> (b - a &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k + <span class="number">1</span>), <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= a - <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k + <span class="number">1</span>), <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line">ans += a - <span class="number">1</span>; k -= a - <span class="number">1</span>;</span><br><span class="line">ans += (ll)(k &gt;&gt; <span class="number">1</span>) * (b - a);</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) ++ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Ears"><a href="#D-Ears" class="headerlink" title="D - Ears"></a>D - Ears</h2><p>&emsp;&emsp;D题就开始比 A, B, C 有思维啦。</p><p>&emsp;&emsp;我们发现在走路的过程中可以一直重复来回走一个格子，这样可以不改变格子的值得奇偶性的情况下，任意改变上面的数。于是，我们联想到奇偶性以后，可以发现，如果我们将走偶数次视为没有走的话，可以发现，这个轨迹最后就是一条直线。也就是说，整个轨迹应该是 偶——奇——偶。</p><p>&emsp;&emsp;然后我就很天真地开始写——但是这样例死活过不去。好吧，因为如果想要某个格子走0次的话，就不满足上面的规律了——因为0次需要严格地不走。所以整个轨迹应该是 0——（偶）——（奇）——（偶）——0。其中括号里面的任何一项都可以不存在。</p><p>&emsp;&emsp;然后记录一下处在那一段，直接dp就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line">ll dp[N][<span class="number">5</span>], ans = INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = dp[<span class="number">0</span>][<span class="number">4</span>] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + a[i];</span><br><span class="line">dp[i][<span class="number">1</span>] = <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + (a[i] ? (a[i] &amp; <span class="number">1</span>) : <span class="number">2</span>);</span><br><span class="line">dp[i][<span class="number">2</span>] = <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]), dp[i - <span class="number">1</span>][<span class="number">0</span>]) + (a[i] &amp; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">dp[i][<span class="number">3</span>] = <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>]) + (a[i] ? (a[i] &amp; <span class="number">1</span>) : <span class="number">2</span>);</span><br><span class="line">dp[i][<span class="number">4</span>] = <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]), <span class="built_in">std</span>::min(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">4</span>])) + a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) SMIN(ans, dp[n][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Odd-Subrectangles"><a href="#E-Odd-Subrectangles" class="headerlink" title="E - Odd Subrectangles"></a>E - Odd Subrectangles</h2><p>&emsp;&emsp;我个人感觉这道题是这一场里面最难的，比F还要难。我一开始想dp，但是发现好像不太行。然后想了半天想不出来，只能看了一眼题解的前几句话。直接把那两句话复制过来吧。</p><p>&emsp;&emsp;”如果选的行数确定了，那么选某一列的奇偶性也会确定。“主要get到假设选的行先确定的思路。</p><p>&emsp;&emsp;然后继续推，那么想要让选的列加起来的奇偶性为偶数，那么只能选奇数个和是奇数列，和是偶数的随便选多少。</p><p>&emsp;&emsp;那么我们假设有 $a$ 个偶数列， $b$ 个奇数列。那么就是选的列的方案数就是 $且是奇数2^a \cdot \sum \limits_{i\leq b\text{且}i是奇数}{C_b^{i}} = 2^a \cdot 2^{b-1} = 2^{m-1}$。所以不管怎么选行，对应的列的方案数总是 $2^{m-1}$ ——但是，$b$ 如果是 $0$ 的话，那么没办法选奇数个奇数列了！那么也就是说，如果我们把一行看做一个数，那么我们选的这些行的异或和不应该为 $0$！</p><p>​    那么异或和不为 $0$ 的方案数就是线性基的套路了。证明可以自己百度，也很简单，这里给出结论：如果线性基的大小是$r$ ，原序列的长度为 $n$，那么异或和不为 $0$ 的方案数为 $2^n - 2^{n-r}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N][N], b[N][N], r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x = (ll)x * x % P) <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = (ll)ans * x % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) read(a[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line"><span class="keyword">if</span> (a[i][j])</span><br><span class="line"><span class="keyword">if</span> (!b[j][j]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) b[j][k] = a[i][k];</span><br><span class="line">++r;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) a[i][k] ^= b[j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ll)fpow(<span class="number">2</span>, m - <span class="number">1</span>) * (fpow(<span class="number">2</span>, n) + P - fpow(<span class="number">2</span>, n - r)) % P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-Pass"><a href="#F-Pass" class="headerlink" title="F - Pass"></a>F - Pass</h2><p>&emsp;&emsp;对于问序列的方案数的题目的套路，一般是考虑直接构造序列，考虑这个序列需要满足的特征。</p><p>&emsp;&emsp;发现对于序列的前 $i$ 项（$1 \leq i \leq n$ 也就是说不包括后 $n$ 项），他能拿到的球一定只能来自前 $i$ 个人。这样的话，红球和蓝球的数量都有了上限，也同时因为对方的上限也有了下限。</p><p>&emsp;&emsp;这样的话就是 dp 的裸题了。设 $dp[i][j]$ 表示前 $i$ 步，拿了 $j$ 个蓝球的方案数，讨论这一部拿红球还是蓝球转移一下就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cntb[N &lt;&lt; <span class="number">1</span>], dp[N &lt;&lt; <span class="number">1</span>][N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inc</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;x += y; x &gt;= P ? x -= P : <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>); n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cntb[i] = cntb[i - <span class="number">1</span>] + s[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i) cntb[i] = cntb[i - <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">std</span>::max(cntb[i] - i, <span class="number">0</span>); j &lt;= <span class="built_in">std</span>::min(cntb[i], i); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (i &gt; j) Inc(dp[i][j], dp[i - <span class="number">1</span>][j]);</span><br><span class="line"><span class="comment">//  dbg("dp[%d][%d] = %d\n", i, j, dp[i][j]);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n &lt;&lt; <span class="number">1</span>][cntb[n]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;很遗憾错过了一场 AtCoder 。听说这场是涨分场呢，于是特意来补一下题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AtCoder" scheme="https://www.violetoj.com/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #538 (Div. 2)(CF1114)</title>
    <link href="https://www.violetoj.com/2019/02/11/Codeforces-Round538-(Div.%202)-(CF1114)/"/>
    <id>https://www.violetoj.com/2019/02/11/Codeforces-Round538-(Div. 2)-(CF1114)/</id>
    <published>2019-02-11T10:56:00.000Z</published>
    <updated>2019-03-12T13:40:56.321Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;<del>今天</del>昨天晚上的cf打的非常惨（仅代表淮中最低水平</p><p>&emsp;&emsp;先是一路缓慢地才A掉B,C，然后就开始杠D。于是写出了一个O(n^2)的线性dp，然后就wa6，调到结束。结束后发现完全看漏了两句话。噢，起始点！！！</p><p>&emsp;&emsp;好吧然后算算自己有可能这一场要变成+0，反正在0左右。<br>结束后开始然后开始写D，顺便思考F。结果写完D发现A怎么fst了，然后。。。因为习惯于对相似的语句复制粘贴，有些东西没有改——三句话都在 -a！！！（这个还能过pt？</p><p>&emsp;&emsp;好吧想完F以后又顺便看了一下。发现怎么B也fst了？？？发现好像忘了考虑相同的数的问题。。。</p><p>&emsp;&emsp;还好C没有fst。所以大概不多不少，可以把上一场涨的分数给抵掉。</p><p>&emsp;&emsp;也是wph学长说的好，这些都是用血换来的教训啊。（但是看错题真的不应该，这是在NOIP就犯过的错啊。</p><a id="more"></a><hr><h2 id="A-Got-Any-Grapes"><a href="#A-Got-Any-Grapes" class="headerlink" title="A. Got Any Grapes?"></a>A. Got Any Grapes?</h2><p>&emsp;&emsp;这种题目直接做，显然是先尽量供给Andrew，然后是Dmitry，最后是Michal。</p><p>&emsp;&emsp;希望大家不要犯我犯过的错误。（以后记得复制粘贴相似内容的时候注意修改全所有该修改的东西啊）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x, y, z, a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">End</span><span class="params">()</span> </span>&#123;<span class="built_in">puts</span>(<span class="string">"NO"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(a), read(b), read(c);</span><br><span class="line">read(x), read(y), read(z);</span><br><span class="line"><span class="keyword">if</span> (x &lt; a) End(); <span class="keyword">else</span> x -= a;</span><br><span class="line">y += x;</span><br><span class="line"><span class="keyword">if</span> (y &lt; b) End(); <span class="keyword">else</span> y -= b;</span><br><span class="line">z += y;</span><br><span class="line"><span class="keyword">if</span> (z &lt; c) End(); <span class="keyword">else</span> z -= c;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Yet-Another-Array-Partitioning-Task"><a href="#B-Yet-Another-Array-Partitioning-Task" class="headerlink" title="B. Yet Another Array Partitioning Task"></a>B. Yet Another Array Partitioning Task</h2><p>&emsp;&emsp;CF上的B题一般都是大胆猜结论题目。</p><p>&emsp;&emsp;直接猜结论： 一定可以选齐前 $m \cdot k$ 大的数。然后分的时候只要凑齐 $m$ 个在前 $m \cdot k$ 大的数中的数，就可以切一块。</p><p>&emsp;&emsp;注意一下（也是我fst的原因），如果前 $m \cdot k$ 中最小的数没有被选全的话，那么分的时候要注意判断一下那个数已经选了多少个，不够选了就不要把它算上去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, p, a[N], b[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(m), read(k); p = m * k; --k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), b[i] = a[i];</span><br><span class="line"><span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - p + <span class="number">1</span>; i &lt;= n; ++i) ans += b[i], mp[b[i]]++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cnt = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (mp.count(a[i]) &amp;&amp; mp[a[i]]) ++cnt, --mp[a[i]];</span><br><span class="line"><span class="keyword">if</span> (cnt == m) --k, <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i, <span class="string">" \n"</span>[k == <span class="number">0</span>]), cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Trailing-Loves-or-L’oeufs"><a href="#C-Trailing-Loves-or-L’oeufs" class="headerlink" title="C. Trailing Loves (or L’oeufs?)"></a>C. Trailing Loves (or L’oeufs?)</h2><p>&emsp;&emsp;在 $b$ 进制下末尾有 $k$ 个0，那么说明</p><script type="math/tex; mode=display">\quad b ^ k | n!</script><p>&emsp;&emsp;于是我们把 $b$ 分解质因数</p><script type="math/tex; mode=display">(p_1^{k_1} \cdot p_2^{k_2} \cdot \cdots) ^k | n!</script><p>&emsp;&emsp;于是我们发现</p><script type="math/tex; mode=display">k = \min\{\log_{p_1} n!,\ \log_{p_2}{n!},\ \cdots\ \}</script><p>&emsp;&emsp;至于说 $\log_p{n!}$ 怎么求，这个应该是普及组知识了。</p><script type="math/tex; mode=display">\log_p n!= \sum_{i = 1} \lfloor \frac n {p ^ i} \rfloor</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line">ll n, m, ans = <span class="number">0x7fffffffffffffff</span>;</span><br><span class="line"><span class="keyword">int</span> np[N], p[N], prt, cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make_Prime</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">np[<span class="number">0</span>] = np[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!np[i]) p[++prt] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j) &#123;</span><br><span class="line">np[i * p[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % p[j]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">GetNum</span><span class="params">(ll n, ll x)</span> </span>&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n) ans += n /= x;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(m);</span><br><span class="line">Make_Prime(<span class="built_in">sqrt</span>(m));</span><br><span class="line">ll hkk = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i)</span><br><span class="line"><span class="keyword">while</span> (hkk % p[i] == <span class="number">0</span>) hkk /= p[i], ++cnt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i) <span class="keyword">if</span> (cnt[i]) SMIN(ans, GetNum(n, p[i]) / cnt[i]);</span><br><span class="line"><span class="keyword">if</span> (hkk &gt; <span class="number">1</span>) SMIN(ans, GetNum(n, hkk));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Flood-Fill"><a href="#D-Flood-Fill" class="headerlink" title="D. Flood Fill"></a>D. Flood Fill</h2><p>&emsp;&emsp;这道题一开始没看见起始方块这个东西，一直wa6。</p><p>&emsp;&emsp;如果有起始点，那就是区间dp模板了。</p><p>&emsp;&emsp;设 $dp[i][j]$ 表示 $i..j$ 的这段区间全部化成一种颜色的代价。</p><script type="math/tex; mode=display">dp[i][j] = \left\{\begin{align*}&dp[i+1][j-1] &&c[i] = c[j]\\&\min\{dp[i][j-1], dp[i][j+1]\} + 1 &&c[i] \neq c[j]\end{align*}\right.</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, c[N], dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(c[i]), SMAX(m, c[i]);</span><br><span class="line">n = <span class="built_in">std</span>::unique(c + <span class="number">1</span>, c + n +<span class="number">1</span>) - c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">if</span>(c[i] == c[j]) dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">std</span>::min(dp[i][j - <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Arithmetic-Progression"><a href="#E-Arithmetic-Progression" class="headerlink" title="E. Arithmetic Progression"></a>E. Arithmetic Progression</h2><p>&emsp;&emsp;<del>交互题娱乐身心。</del></p><p>&emsp;&emsp;显然我们一个二分就可以很开心地求出最大值。</p><p>&emsp;&emsp;然后我们就可发现，任意两个数的差都应该是公差的倍数。于是我们多随机一些位置，因为前面二分过，所以后面最多问30次左右（当然不能直接问前30个，防止毒瘤会卡），把位置上的值与最大值的差算出来，那么公差一定是它们的约数，有很大的概率是 $\gcd$ 。</p><p>&emsp;&emsp;不会证明正确率。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, L, R, stp, used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n); srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, get;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt; %d\n"</span>, mid); fflush(<span class="built_in">stdout</span>);</span><br><span class="line">read(get);</span><br><span class="line"><span class="keyword">if</span>(get) l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line">R = l;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, get = <span class="number">0</span>; i &lt;= <span class="number">30</span> &amp;&amp; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> pos = rand() % n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(used[pos]) pos = rand() % n + <span class="number">1</span>;</span><br><span class="line">used[pos] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"? %d\n"</span>, pos); fflush(<span class="built_in">stdout</span>);</span><br><span class="line">read(get);</span><br><span class="line">stp = <span class="built_in">std</span>::__gcd(stp, R - get);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"! %d %d\n"</span>, R - (n - <span class="number">1</span>) * stp, stp);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-Please-another-Queries-on-Array"><a href="#F-Please-another-Queries-on-Array" class="headerlink" title="F. Please, another Queries on Array?"></a>F. Please, another Queries on Array?</h2><p>&emsp;&emsp;回顾一下欧拉函数的公式。</p><script type="math/tex; mode=display">\varphi(n) = n \sum_{p\text{是}n\text{质因数}} 1-\frac1p</script><p>&emsp;&emsp;所以我们只需要线段树维护区间乘积，以及每个质数出没出现过。</p><p>&emsp;&emsp;一开始打算用bitset，但是发现 $300$ 以内质数只有 $62$ 个，不多不少，可以直接 <code>ull</code>存。大概 <code>ll</code>也就够了。</p><p>&emsp;&emsp;注意区间乘积，乘标记在区间上算贡献要以幂的形式算上去，而不是像求区间和那样直接乘。一开始没注意到，死活过不去。还有如果是用 <code>ull</code>压位的，注意算集合的时候 <code>1 &lt;&lt; i</code>要写成<code>1ull &lt;&lt; i</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;ull, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">300</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, z, a[N];</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prt, p[M], np[M], inv[N], id[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Make_Prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">np[<span class="number">0</span>] = np[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">inv[i] = (ll)(P - P / i) * inv[P % i] % P;</span><br><span class="line"><span class="keyword">if</span> (!np[i]) p[++prt] = i, id[i] = prt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prt &amp;&amp; i * p[j] &lt;= n; ++j)&#123;</span><br><span class="line">np[i * p[j]] = j;</span><br><span class="line"><span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> pli <span class="keyword">operator</span> + (<span class="keyword">const</span> pli &amp;a, <span class="keyword">const</span> pli &amp;b) &#123;<span class="keyword">return</span> pli(a.fi | b.fi, (ll)a.se * b.se % P);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; y; y &gt;&gt;= <span class="number">1</span>, x= (ll)x * x % P) <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ans = (ll)ans * x % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">ull val, add;</span><br><span class="line"><span class="keyword">int</span> mul, tag;</span><br><span class="line">&#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">t[o].tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123;</span><br><span class="line"><span class="keyword">int</span> x = a[L]; t[o].mul = a[L];</span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">1</span> &amp;&amp; np[x]) t[o].val |= <span class="number">1u</span>ll &lt;&lt; (np[x] - <span class="number">1</span>), x /= p[np[x]];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">1</span>) t[o].val |= <span class="number">1u</span>ll &lt;&lt; (id[x] - <span class="number">1</span>); <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">Build(lc, L, M); Build(rc, M + <span class="number">1</span>, R);</span><br><span class="line">t[o].val = t[lc].val | t[rc].val; t[o].mul = (ll)t[lc].mul * t[rc].mul % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, ull y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) &#123;</span><br><span class="line">t[o].tag = (ll)t[o].tag * x % P;</span><br><span class="line">t[o].mul = (ll)t[o].mul * fpow(x, R - L + <span class="number">1</span>) % P;</span><br><span class="line">t[o].add |= y; t[o].val |= t[o].add; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= M) Mul(lc, L, M, l, r, x, y);</span><br><span class="line"><span class="keyword">if</span> (r &gt; M) Mul(rc, M + <span class="number">1</span>, R, l, r, x, y);</span><br><span class="line">t[o].val = t[lc].val | t[rc].val | t[o].add;</span><br><span class="line">t[o].mul = (ll)t[lc].mul * t[rc].mul % P *fpow(t[o].tag, R - L + <span class="number">1</span>) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pli <span class="title">Get</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, pli add = pli(<span class="number">0</span>, <span class="number">1</span>))</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> pli(t[o].val, t[o].mul) + pli(add.fi, fpow(add.se, R - L + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> M = (L + R) &gt;&gt; <span class="number">1</span>; pli hkk = add + pli(t[o].add, t[o].tag);</span><br><span class="line"><span class="keyword">if</span> (r &lt;= M) <span class="keyword">return</span> Get(lc, L, M, l, r, hkk);</span><br><span class="line"><span class="keyword">if</span> (l &gt; M) <span class="keyword">return</span> Get(rc, M + <span class="number">1</span>, R, l, r, hkk);</span><br><span class="line"><span class="keyword">return</span> Get(lc, L, M, l, r, hkk) + Get(rc, M + <span class="number">1</span>, R, l, r, hkk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetAns</span><span class="params">(pli x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = x.se; ull S = x.fi;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prt; ++i)</span><br><span class="line"><span class="keyword">if</span>((S &gt;&gt; (i - <span class="number">1</span>)) &amp; <span class="number">1</span>) ans = (ll)ans * inv[p[i]] % P * (p[i] - <span class="number">1</span>) % P;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> hzhkk</span></span><br><span class="line">freopen(<span class="string">"hkk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">read(n), read(m); Make_Prime(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">Build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, opt); read(x), read(y);</span><br><span class="line"><span class="keyword">if</span> (*opt == <span class="string">'M'</span>) &#123;</span><br><span class="line">read(z); ull hkk = <span class="number">0</span>; <span class="keyword">int</span> r = z;</span><br><span class="line"><span class="keyword">while</span> (r &gt; <span class="number">1</span> &amp;&amp; np[r]) hkk |= <span class="number">1u</span>ll &lt;&lt; (np[r] - <span class="number">1</span>), r /= p[np[r]];</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">1</span>) hkk |= <span class="number">1u</span>ll &lt;&lt; (id[r] - <span class="number">1</span>);</span><br><span class="line">Mul(<span class="number">1</span>, <span class="number">1</span>, n, x, y, z, hkk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, GetAns(Get(<span class="number">1</span>, <span class="number">1</span>, n, x, y)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&lt;del&gt;今天&lt;/del&gt;昨天晚上的cf打的非常惨（仅代表淮中最低水平&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;先是一路缓慢地才A掉B,C，然后就开始杠D。于是写出了一个O(n^2)的线性dp，然后就wa6，调到结束。结束后发现完全看漏了两句话。噢，起始点！！！&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好吧然后算算自己有可能这一场要变成+0，反正在0左右。&lt;br&gt;结束后开始然后开始写D，顺便思考F。结果写完D发现A怎么fst了，然后。。。因为习惯于对相似的语句复制粘贴，有些东西没有改——三句话都在 -a！！！（这个还能过pt？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好吧想完F以后又顺便看了一下。发现怎么B也fst了？？？发现好像忘了考虑相同的数的问题。。。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;还好C没有fst。所以大概不多不少，可以把上一场涨的分数给抵掉。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;也是wph学长说的好，这些都是用血换来的教训啊。（但是看错题真的不应该，这是在NOIP就犯过的错啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://www.violetoj.com/tags/Codeforces/"/>
    
  </entry>
  
</feed>
