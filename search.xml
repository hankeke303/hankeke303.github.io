<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[钗头凤]]></title>
    <url>%2F2019%2F03%2F23%2F%E9%92%97%E5%A4%B4%E5%87%A4%2F</url>
    <content type="text"><![CDATA[&#x9996;&#x5148;&#x8BF4;&#x4E00;&#x4E9B;&#x53EF;&#x80FD;&#x4F1A;&#x7834;&#x574F;&#x8FD9;&#x91CC;&#x7684;&#x8BD7;&#x8BCD;&#x7684;&#x7F8E;&#x611F;&#x7684;&#x8BDD;&#xFF1A;&#x4ECA;&#x665A;&#x5C3D;&#x7BA1;&#x7701;&#x9009;&#x5FEB;&#x4E34;&#x8FD1;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x8FD8;&#x662F;&#x4E0D;&#x592A;&#x613F;&#x610F;&#x5199;&#x9898;&#x76EE;&#x3002;&#x6211;&#x66FE;&#x7ECF;&#x8BF4;&#x8FC7;&#xFF0C;&#x8BD7;&#x8BCD;&#x662F;&#x552F;&#x4E00;&#x53EF;&#x4EE5;&#x5728;&#x6211;&#x4F24;&#x5FC3;&#x7684;&#x65F6;&#x5019;&#x5B89;&#x6170;&#x6211;&#x7684;&#x4E1C;&#x897F;&#x3002; &#x9646;&#x6E38;&#x662F;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x8BD7;&#x4EBA;&#x4E4B;&#x4E00;&#xFF0C;&#x5C3D;&#x7BA1;&#x4ED6;&#x662F;&#x4EE5;&#x7231;&#x56FD;&#x8BD7;&#x4EBA;&#x7684;&#x8EAB;&#x4EFD;&#x800C;&#x6D41;&#x4F20;&#x81F3;&#x4ECA;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4E5F;&#x5341;&#x5206;&#x611F;&#x52A8;&#x4E8E;&#x4ED6;&#x548C;&#x4ED6;&#x7684;&#x9996;&#x4E2A;&#x59BB;&#x5B50;&#xFF0C;&#x5F53;&#x65F6;&#x4E5F;&#x662F;&#x4E00;&#x4EE3;&#x624D;&#x5973;&#x7684;&#x5510;&#x5A49;&#x7684;&#x6545;&#x4E8B;&#x3002; &#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x6211;&#x662F;&#x4E0D;&#x592A;&#x60F3;&#x8BB2;&#x4E86;&#xFF0C;&#x7F51;&#x7EDC;&#x4E0A;&#x53EF;&#x4EE5;&#x8BF4;&#x662F;&#x5230;&#x5904;&#x90FD;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x4F5C;&#x4E3A;&#x7406;&#x79D1;&#x751F;&#xFF0C;&#x4EE5;&#x6211;&#x7684;&#x6587;&#x91C7;&#x81EA;&#x7136;&#x662F;&#x4E0D;&#x4F1A;&#x8BB2;&#x5F97;&#x592A;&#x51FA;&#x8272;&#x7684;&#x3002;&#x771F;&#x6B63;&#x611F;&#x52A8;&#x6211;&#x7684;&#x8FD8;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x91CC;&#x9762;&#x7684;&#x4E00;&#x9996;&#x9996;&#x8BD7;&#x8BCD;&#x3002; &#x672C;&#x6765;&#xFF0C;&#x5728;&#x521D;&#x4E2D;&#xFF0C;&#x6211;&#x5E76;&#x4E0D;&#x5BF9;&#x8BD7;&#x8BCD;&#x8FD9;&#x79CD;&#x4E1C;&#x897F;&#x6709;&#x592A;&#x591A;&#x7684;&#x7231;&#x597D;&#x7684;&#x3002;&#x4F46;&#x662F;&#x5728;&#x6691;&#x5047;&#xFF0C;&#x95F2;&#x65F6;&#x5076;&#x7136;&#x4E2D;&#x7FFB;&#x5230;&#x5C0F;&#x5347;&#x521D;&#x6691;&#x5047;&#x7684;&#x65F6;&#x5019;&#x4E70;&#x7684;&#x4E00;&#x672C;&#x4E66;&#xFF0C;&#x5F53;&#x65F6;&#x81EA;&#x4ECE;&#x4E70;&#x6765;&#x770B;&#x4E86;&#x51E0;&#x9875;&#xFF0C;&#x5C31;&#x518D;&#x4E5F;&#x6CA1;&#x6709;&#x770B;&#x4E86;&#x3002;&#x8FD9;&#x672C;&#x4E66;&#x5C31;&#x662F;&#x674E;&#x5143;&#x6D1B;&#x7684;&#x300A;&#x5B8B;&#x8BCD;&#x4E4B;&#x65C5;&#x2014;&#x2014;&#x66FE;&#x662F;&#x60CA;&#x9E3F;&#x7167;&#x5F71;&#x6765;&#x300B;&#xFF0C;&#x800C;&#x6211;&#x968F;&#x610F;&#x7FFB;&#x5F00;&#x7684;&#x7B2C;&#x4E00;&#x9875;&#xFF0C;&#x5C31;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x7684;&#x4E00;&#x9875;&#x3002; &#x9497;&#x5934;&#x51E4;&#x63D0;&#x5230;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#xFF0C;&#x81EA;&#x7136;&#x4E5F;&#x5C31;&#x4E0D;&#x5F97;&#x4E0D;&#x63D0;&#x5230;&#x7684;&#x662F;&#x975E;&#x5E38;&#x6709;&#x540D;&#x7684;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#x4E86;&#x3002; &#x7EA2;&#x9165;&#x624B;&#xFF0C;&#x9EC4;&#x85E4;&#x9152;&#xFF0C;&#x6EE1;&#x57CE;&#x6625;&#x8272;&#x5BAB;&#x5899;&#x67F3;&#x3002;&#x4E1C;&#x98CE;&#x6076;&#xFF0C;&#x6B22;&#x60C5;&#x8584;&#xFF0C;&#x4E00;&#x6000;&#x6101;&#x7EEA;&#xFF0C;&#x51E0;&#x5E74;&#x79BB;&#x7D22;&#xFF1F;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x9519;&#xFF01; &#x6625;&#x5982;&#x65E7;&#xFF0C;&#x4EBA;&#x7A7A;&#x7626;&#xFF0C;&#x6CEA;&#x75D5;&#x7EA2;&#x6D65;&#x9C9B;&#x7EE1;&#x900F;&#x3002;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#xFF0C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x3002;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01; &#x8FD9;&#x662F;&#x9646;&#x6E38;&#x7684;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x770B;&#x80CC;&#x666F;&#x6545;&#x4E8B;&#xFF0C;&#x5149;&#x5149;&#x8BFB;&#x4E0A;&#x53BB;&#xFF0C;&#x5C31;&#x8DB3;&#x77E3;&#x8BA9;&#x4EBA;&#x611F;&#x52A8;&#x4E86;&#x3002;&#x8FD9;&#x4EE4;&#x4EBA;&#x4F24;&#x6000;&#x7684;&#x65CB;&#x5F8B;&#xFF0C;&#x548C;&#x53E9;&#x51FB;&#x4EBA;&#x5FC3;&#x7684;&#x6587;&#x5B57;&#x5185;&#x5BB9;&#xFF0C;&#x5C31;&#x5DF2;&#x7ECF;&#x628A;&#x6211;&#x6DF1;&#x6DF1;&#x5730;&#x5438;&#x5F15;&#x5230;&#x4E86;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x91CC;&#x9762;&#x6765;&#x4E86;&#x3002; &#x6211;&#x66F4;&#x662F;&#x4ECE;&#x6765;&#x4E5F;&#x6CA1;&#x6709;&#x60F3;&#x5230;&#xFF0C;&#x8FD9;&#x9996;&#x80FD;&#x4F18;&#x7F8E;&#x7684;&#x5199;&#x7231;&#x60C5;&#x7684;&#x8BCD;&#xFF0C;&#x8BCD;&#x4EBA;&#x7ADF;&#x7136;&#x662F;&#x9646;&#x6E38;&#xFF0C;&#x8FD9;&#x4F4D;&#x4E00;&#x751F;&#x4E3A;&#x56FD;&#x5BB6;&#x4E3A;&#x5FE7;&#x6101;&#x7740;&#x7684;&#x8BD7;&#x4EBA;&#x3002;&#x4F46;&#x8FD9;&#x4E5F;&#x4E0D;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x4E0E;&#x9646;&#x6E38;&#x540C;&#x65F6;&#x671F;&#x7684;&#x4E00;&#x751F;&#x6E34;&#x671B;&#x6297;&#x91D1;&#x7684;&#x7231;&#x56FD;&#x8BCD;&#x4EBA;&#x8F9B;&#x5F03;&#x75BE;&#xFF0C;&#x4E5F;&#x5199;&#x51FA;&#x8FC7;&#x201C;&#x4F17;&#x91CC;&#x5BFB;&#x4ED6;&#x5343;&#x767E;&#x5EA6;&#x201D;&#x8FD9;&#x6837;&#x7684;&#x8BCD;&#x3002; &#x7136;&#x540E;&#x5C31;&#x9759;&#x4E0B;&#x5FC3;&#x6765;&#xFF0C;&#x9605;&#x8BFB;&#x4E86;&#x8FD9;&#x4E00;&#x6BB5;&#x6545;&#x4E8B;&#xFF0C;&#x4E5F;&#x611F;&#x53D7;&#x5230;&#x4E86;&#x90A3;&#x79CD;&#x65E0;&#x6CD5;&#x8A00;&#x8BF4;&#x7684;&#x590D;&#x6742;&#x7684;&#x60C5;&#x611F;&#x3002; &#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x597D;&#x8BF4;&#x8FD9;&#x4EF6;&#x60B2;&#x5267;&#xFF0C;&#x5230;&#x5E95;&#x662F;&#x9646;&#x6E38;&#x3001;&#x5510;&#x5A49;&#x3001;&#x9646;&#x6E38;&#x6BCD;&#x4EB2;&#x3001;&#x8D75;&#x58EB;&#x7A0B;&#x8FD9;&#x56DB;&#x4E2A;&#x4EBA;&#x8C01;&#x7684;&#x9519;&#xFF0C;&#x6BD5;&#x7ADF;&#x662F;&#x5728;&#x54EA;&#x4E2A;&#x793E;&#x4F1A;&#x73AF;&#x5883;&#x4E0A;&#xFF0C;&#x6216;&#x8BB8;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x8BCD;&#x4E2D;&#x7684;&#x6DF1;&#x6DF1;&#x7684;&#x201C;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x9519;&#xFF01;&#x201D;&#x5C31;&#x662F;&#x5728;&#x6168;&#x53F9;&#x5C01;&#x5EFA;&#x73AF;&#x5883;&#x9020;&#x6210;&#x7684;&#x60B2;&#x54C0;&#x5427;&#x3002; &#x8BCD;&#x4EBA;&#x5148;&#x662F;&#x5BF9;&#x5A5A;&#x65F6;&#x7684;&#x7F8E;&#x597D;&#x573A;&#x666F;&#x505A;&#x4E86;&#x63CF;&#x8FF0;&#xFF0C;&#x7136;&#x540E;&#x753B;&#x98CE;&#x9661;&#x8F6C;&#xFF0C;&#x7ACB;&#x523B;&#x5199;&#x51FA;&#x4E86;&#x88AB;&#x8FEB;&#x79BB;&#x5A5A;&#x540E;&#x7684;&#x5FE7;&#x6101;&#x3002;&#x8FD9;&#x79CD;&#x5F3A;&#x70C8;&#x7684;&#x5BF9;&#x6BD4;&#x8DB3;&#x4EE5;&#x8BA9;&#x4EBA;&#x4E3A;&#x4E4B;&#x540C;&#x611F;&#x60B2;&#x54C0;&#x4E86;&#x3002; &#x4F46;&#x662F;&#x968F;&#x540E;&#x7684;&#x63CF;&#x5199;&#x5374;&#x53C8;&#x8DB3;&#x77E3;&#x8BA9;&#x4EBA;&#x843D;&#x6CEA;&#x3002; &#x6625;&#x5982;&#x65E7;&#xFF0C;&#x4EBA;&#x7A7A;&#x7626;&#xFF0C;&#x6CEA;&#x75D5;&#x7EA2;&#x6D65;&#x9C9B;&#x7EE1;&#x900F;&#x3002;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#xFF0C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x3002;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x611F;&#x53D7;&#x5230;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x4E24;&#x4E2A;&#x4EBA;&#x5171;&#x540C;&#x7684;&#x6101;&#x7EEA;&#xFF0C;&#x5374;&#x53C8;&#x65E0;&#x6CD5;&#x5B9E;&#x73B0;&#x7684;&#x60B2;&#x54C0;&#x3002;&#x4E3A;&#x4E00;&#x79CD;&#x65E0;&#x6CD5;&#x8A00;&#x8BF4;&#x7684;&#x5FE7;&#x6101;&#xFF0C;&#x800C;&#x641E;&#x5F97;&#x201C;&#x4EBA;&#x7A7A;&#x7626;&#x201D;&#xFF0C;&#x66F4;&#x662F;&#x53EF;&#x4EE5;&#x6620;&#x886C;&#x540E;&#x9762;&#x7684;&#x201C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#x201D;&#xFF0C;&#x4F46;&#x662F;&#x53C8;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x6C38;&#x8FDC;&#x4E5F;&#x90FD;&#x53EA;&#x6709;&#x65E0;&#x9650;&#x7684;&#x54C0;&#x6101;&#x4E86;&#x5427;&#x3002;&#x60F3;&#x7740;&#x5F53;&#x5E74;&#x7684;&#x59BB;&#x5B50;&#x5982;&#x4ECA;&#x5374;&#x5982;&#x6B64;&#x5730;&#x6D88;&#x7626;&#xFF0C;&#x5374;&#x53C8;&#x65E0;&#x80FD;&#x4E3A;&#x529B;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x5185;&#x5FC3;&#x8BE5;&#x662F;&#x6709;&#x591A;&#x75DB;&#x82E6;&#x554A;&#xFF01; &#x201C;&#x6843;&#x82B1;&#x843D;&#xFF0C;&#x95F2;&#x6C60;&#x9601;&#x201D;&#xFF0C;&#x82B1;&#x843D;&#x7684;&#x65F6;&#x8282;&#xFF0C;&#x6C38;&#x8FDC;&#x90FD;&#x662F;&#x53E4;&#x4EE3;&#x6700;&#x611F;&#x4F24;&#x7684;&#x65F6;&#x8282;&#x3002;&#x6843;&#x82B1;&#x843D;&#x53BB;&#xFF0C;&#x7559;&#x4E0B;&#x7684;&#x53EA;&#x6709;&#x518D;&#x4E5F;&#x4E0D;&#x4F1A;&#x6709;&#x4EBA;&#x5149;&#x987E;&#x7684;&#x6C60;&#x9601;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x201C;&#x6843;&#x82B1;&#x201D;&#xFF0C;&#x53C8;&#x4EC5;&#x4EC5;&#x662F;&#x6307;&#x82B1;&#x5417;&#xFF1F; &#x201C;&#x5C71;&#x76DF;&#x867D;&#x5728;&#xFF0C;&#x9526;&#x4E66;&#x96BE;&#x6258;&#x201D;&#xFF0C;&#x8FD9;&#x6050;&#x6015;&#x662F;&#x7528;&#x4E00;&#x53E5;&#x8BDD;&#xFF0C;&#x6982;&#x62EC;&#x6574;&#x573A;&#x60B2;&#x5267;&#x4E86;&#x3002;&#x5982;&#x679C;&#x8BF4;&#x524D;&#x9762;&#x7684;&#x4EC5;&#x4EC5;&#x662F;&#x6E32;&#x67D3;&#x7684;&#x4E00;&#x79CD;&#x54C0;&#x53F9;&#x7684;&#x6C1B;&#x56F4;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x76F4;&#x63A5;&#x624E;&#x4E86;&#x4EBA;&#x7684;&#x5FC3;&#x91CC;&#xFF0C;&#x4F3C;&#x4E4E;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8BFB;&#x51FA;&#x8BCD;&#x4EBA;&#x5185;&#x5FC3;&#x7684;&#x75DB;&#x82E6;&#x4E0E;&#x65E0;&#x5948;&#x5427;&#x3002; &#x800C;&#x540E;&#x9762;&#x7684;&#x201C;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x83AB;&#xFF01;&#x201D;&#xFF0C;&#x8BCD;&#x4EBA;&#x5185;&#x5FC3;&#x7684;&#x65E0;&#x5948;&#x4E0E;&#x75DB;&#x82E6;&#x90FD;&#x53EF;&#x4EE5;&#x4ECE;&#x8FD9;&#x4E09;&#x4E2A;&#x5B57;&#x91CC;&#x9762;&#x770B;&#x51FA;&#x4E86;&#x3002;&#x8BCD;&#x4EBA;&#x5373;&#x4F7F;&#x5FC3;&#x4E2D;&#x518D;&#x60F3;&#x5FF5;&#x5979;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x80FD;&#x529B;&#x6539;&#x53D8;&#x8FD9;&#x4E00;&#x5207;&#x3002;&#x53EA;&#x6050;&#x6015;&#x8FD9;&#x4E00;&#x8F88;&#x5B50;&#x4E5F;&#x518D;&#x4E0D;&#x80FD;&#x76F8;&#x89C1;&#x4E86;&#x5427;&#x3002; &#x636E;&#x8BF4;&#xFF0C;&#x7B2C;&#x4E8C;&#x5E74;&#xFF0C;&#x5510;&#x5A49;&#x518D;&#x6E38;&#x6C88;&#x56ED;&#xFF0C;&#x770B;&#x89C1;&#x4E86;&#x4E0A;&#x9762;&#x90A3;&#x9996;&#x9646;&#x6E38;&#x9898;&#x5728;&#x58C1;&#x4E0A;&#x7684;&#x8BCD;&#xFF0C;&#x4F24;&#x5FC3;&#x4E4B;&#x611F;&#x518D;&#x6B21;&#x6D8C;&#x4E0A;&#x5FC3;&#x5934;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x4E0D;&#x80FD;&#x5F53;&#x7740;&#x5BB6;&#x4EC6;&#x7684;&#x9762;&#x6D41;&#x6CEA;&#xFF0C;&#x65E0;&#x5948;&#xFF0C;&#x53EA;&#x80FD;&#x5728;&#x5899;&#x58C1;&#x4E0A;&#x4E5F;&#x9898;&#x4E0B;&#x81EA;&#x5DF1;&#x7684;&#x548C;&#x8BCD;&#xFF1A; &#x4E16;&#x60C5;&#x8584;&#xFF0C;&#x4EBA;&#x60C5;&#x6076;&#xFF0C;&#x96E8;&#x9001;&#x9EC4;&#x660F;&#x82B1;&#x6613;&#x843D;&#x3002;&#x6653;&#x98CE;&#x5E72;&#xFF0C;&#x6CEA;&#x75D5;&#x6B8B;&#xFF0C;&#x6B32;&#x7B3A;&#x5FC3;&#x4E8B;&#xFF0C;&#x72EC;&#x8BED;&#x659C;&#x9611;&#x3002;&#x96BE;&#xFF01;&#x96BE;&#xFF01;&#x96BE;&#xFF01; &#x4EBA;&#x6210;&#x5404;&#xFF0C;&#x4ECA;&#x975E;&#x6628;&#xFF0C;&#x75C5;&#x9B42;&#x5E38;&#x4F3C;&#x79CB;&#x5343;&#x7D22;&#x3002;&#x89D2;&#x58F0;&#x5BD2;&#xFF0C;&#x591C;&#x9611;&#x73CA;&#xFF0C;&#x6015;&#x4EBA;&#x5BFB;&#x95EE;&#xFF0C;&#x54BD;&#x6CEA;&#x88C5;&#x6B22;&#x3002;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x7792;&#xFF01; &#x5C3D;&#x7BA1;&#x6709;&#x4EBA;&#x8003;&#x8BC1;&#x8BF4;&#x8FD9;&#x9996;&#x8BCD;&#x4EC5;&#x4EC5;&#x662F;&#x540E;&#x4EBA;&#x4F2A;&#x4F5C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x5B81;&#x613F;&#x76F8;&#x4FE1;&#x8FD9;&#x662F;&#x5510;&#x5A49;&#x7684;&#x771F;&#x624B;&#x7B14;&#x2014;&#x2014;&#x8FD9;&#x662F;&#x8FD9;&#x6BB5;&#x60B2;&#x60E8;&#x7684;&#x7231;&#x60C5;&#x6545;&#x4E8B;&#x7684;&#x4E00;&#x4E2A;&#x9AD8;&#x6F6E;&#x3002; &#x201C;&#x4E16;&#x60C5;&#x8584;&#xFF0C;&#x4EBA;&#x60C5;&#x6076;&#x201D;&#xFF0C;&#x5510;&#x5A49;&#x5728;&#x611F;&#x53F9;&#x4EBA;&#x4E16;&#x7684;&#x4E0D;&#x516C;&#xFF0C;&#x4E5F;&#x80FD;&#x8BFB;&#x51FA;&#x5979;&#x81EA;&#x5DF1;&#x5BF9;&#x4E07;&#x6076;&#x7684;&#x5C01;&#x5EFA;&#x793C;&#x6559;&#x7684;&#x6028;&#x6068;&#x3002;&#x201C;&#x96E8;&#x9001;&#x9EC4;&#x660F;&#x82B1;&#x6613;&#x843D;&#x201D;&#xFF0C;&#x81EA;&#x5DF1;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x793E;&#x4F1A;&#x73AF;&#x5883;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x98CE;&#x96E8;&#x4E2D;&#xFF0C;&#x5C31;&#x50CF;&#x4E00;&#x6735;&#x6447;&#x6447;&#x6B32;&#x5760;&#x7684;&#x82B1;&#x6735;&#xFF0C;&#x5373;&#x4F7F;&#x518D;&#x7F8E;&#x4E3D;&#x3001;&#x6709;&#x624D;&#x534E;&#xFF0C;&#x4E5F;&#x7EC8;&#x5F52;&#x4F1A;&#x98CE;&#x96E8;&#x5439;&#x843D;&#x3002; &#x201C;&#x6653;&#x98CE;&#x5E72;&#xFF0C;&#x6CEA;&#x75D5;&#x6B8B;&#xFF0C;&#x6B32;&#x7B3A;&#x5FC3;&#x4E8B;&#xFF0C;&#x72EC;&#x8BED;&#x659C;&#x9611;&#x3002;&#x201D;&#x5979;&#x5B9B;&#x5982;&#x54ED;&#x4E86;&#x4E00;&#x6574;&#x591C;&#xFF0C;&#x4F46;&#x662F;&#x5230;&#x4E86;&#x521D;&#x6653;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x5F7B;&#x5E95;&#x64E6;&#x5E72;&#x81EA;&#x5DF1;&#x7684;&#x6CEA;&#x6C34;&#x3002;&#x5510;&#x5A49;&#x5BF9;&#x4E8E;&#x8FD9;&#x6BB5;&#x66FE;&#x7ECF;&#x5F88;&#x7F8E;&#x597D;&#x7684;&#x56DE;&#x5FC6;&#xFF0C;&#x73B0;&#x5728;&#x80FD;&#x611F;&#x53D7;&#x5230;&#x7684;&#xFF0C;&#x53EA;&#x6709;&#x65E0;&#x9650;&#x7684;&#x60B2;&#x54C0;&#x548C;&#x6168;&#x53F9;&#x3002;&#x6211;&#x4E00;&#x76F4;&#x89C9;&#x5F97;&#xFF0C;&#x72EC;&#x81EA;&#x51ED;&#x9611;&#xFF0C;&#x662F;&#x4EE5;&#x4E2A;&#x975E;&#x5E38;&#x4F24;&#x611F;&#x7684;&#x610F;&#x8C61;&#x3002; &#x201C;&#x4EBA;&#x6210;&#x5404;&#xFF0C;&#x4ECA;&#x975E;&#x6628;&#xFF0C;&#x75C5;&#x9B42;&#x5E38;&#x4F3C;&#x79CB;&#x5343;&#x7D22;&#x3002;&#x201D;&#x6628;&#x65E5;&#x7684;&#x7F8E;&#x597D;&#x5DF2;&#x7ECF;&#x4E0D;&#x5728;&#xFF0C;&#x7559;&#x4E0B;&#x7684;&#x53EA;&#x6709;&#x81EA;&#x5DF1;&#x5E38;&#x5E74;&#x56E0;&#x5FE7;&#x6101;&#x800C;&#x5E26;&#x75C5;&#x7684;&#x8EAB;&#x4F53;&#x3002;&#x636E;&#x8BF4;&#x5510;&#x5A49;&#x5728;&#x5199;&#x5B8C;&#x8FD9;&#x9996;&#x8BCD;&#x4EE5;&#x540E;&#x4E00;&#x5E74;&#xFF0C;&#x5C31;&#x9999;&#x6D88;&#x7389;&#x635F;&#x4E86;&#x3002; &#x201C;&#x89D2;&#x58F0;&#x5BD2;&#xFF0C;&#x591C;&#x9611;&#x73CA;&#xFF0C;&#x6015;&#x4EBA;&#x5BFB;&#x95EE;&#xFF0C;&#x54BD;&#x6CEA;&#x88C5;&#x6B22;&#x3002;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x7792;&#xFF01;&#x201D;&#x591C;&#x8272;&#x5373;&#x5C06;&#x7ED3;&#x675F;&#xFF0C;&#x5929;&#x5DF2;&#x7ECF;&#x5FEB;&#x8981;&#x7834;&#x6653;&#xFF0C;&#x81EA;&#x5DF1;&#x5374;&#x53EA;&#x80FD;&#x6536;&#x8D77;&#x4F24;&#x5FC3;&#xFF0C;&#x88C5;&#x51FA;&#x4EC0;&#x4E48;&#x90FD;&#x6CA1;&#x53D1;&#x751F;&#x7684;&#x6837;&#x5B50;&#x3002;&#x8FD9;&#x6837;&#x65E0;&#x7591;&#x6700;&#x75DB;&#x82E6;&#x7684;&#x4E8B;&#x60C5;&#x2014;&#x2014;&#x6CA1;&#x6709;&#x673A;&#x4F1A;&#x4E3A;&#x81EA;&#x5DF1;&#x7684;&#x8FC7;&#x53BB;&#x7684;&#x56DE;&#x5FC6;&#x4E3A;&#x72EC;&#x81EA;&#x843D;&#x6CEA;&#x3002; &#x8FD9;&#x9996;&#x8BCD;&#x7684;&#x97F5;&#x5F8B;&#xFF0C;&#x548C;&#x9646;&#x6E38;&#x7684;&#x90A3;&#x9996;&#x4E00;&#x6837;&#x7684;&#x52A8;&#x4EBA;&#xFF0C;&#x672C;&#x6765;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8BCD;&#x724C;&#x7684;&#xFF0C;&#x53C8;&#x662F;&#x4E00;&#x9996;&#x548C;&#x8BCD;&#xFF0C;&#x8FD9;&#x79CD;&#x54C0;&#x5A49;&#x7684;&#x7F8E;&#x611F;&#x4E5F;&#x540C;&#x6837;&#x53EF;&#x4EE5;&#x8BA9;&#x4EBA;&#x4F3C;&#x4E4E;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x6545;&#x4E8B;&#x91CC;&#x7684;&#x4EBA;&#x7684;&#x90A3;&#x79CD;&#x5FE7;&#x4F24;&#x548C;&#x65E0;&#x5948;&#x7684;&#x611F;&#x89C9;&#x5427;&#x3002; &#x8FD9;&#x4E24;&#x9996;&#x8BCD;&#xFF0C;&#x662F;&#x6700;&#x5148;&#x8BA9;&#x6211;&#x7231;&#x4E0A;&#x8BD7;&#x8BCD;&#x7684;&#xFF0C;&#x8BA9;&#x6211;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x8BD7;&#x8BCD;&#x90A3;&#x79CD;&#x611F;&#x4EBA;&#x7684;&#x65CB;&#x5F8B;&#x7F8E;&#xFF0C;&#x4E30;&#x5BCC;&#x7684;&#x610F;&#x5883;&#x7F8E;&#x3002;&#x4E8E;&#x662F;&#x5728;&#x6574;&#x4E2A;&#x6691;&#x5047;&#xFF0C;&#x6211;&#x66F4;&#x662F;&#x4E00;&#x53E3;&#x6C14;&#x5730;&#x628A;&#x90A3;&#x672C;&#x4E66;&#x76F4;&#x63A5;&#x8BFB;&#x5B8C;&#xFF0C;&#x751A;&#x81F3;&#x5FD8;&#x5374;&#x4E86;&#x65F6;&#x95F4;&#x3002; &#x540E;&#x6765;&#xFF0C;&#x5F53;&#x9646;&#x6E38;&#x5728;&#x65E9;&#x5DF2;&#x95FB;&#x540D;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x58EE;&#x5FD7;&#x96BE;&#x916C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x591A;&#x6B21;&#x6765;&#x5230;&#x4E86;&#x6C88;&#x56ED;&#xFF0C;&#x5199;&#x4E0B;&#x4E86;&#x4E0D;&#x5C11;&#x611F;&#x4EBA;&#x7684;&#x8BD7;&#x3002;&#x5177;&#x4F53;&#x7684;&#x5148;&#x540E;&#x987A;&#x5E8F;&#x6211;&#x4E5F;&#x8BB0;&#x4E0D;&#x6E05;&#x695A;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x53EA;&#x6311;&#x51E0;&#x9996;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x3002;&#x4E0D;&#x4F5C;&#x8D4F;&#x6790;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#xFF0C;&#x6709;&#x4E9B;&#x65F6;&#x5019;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x50CF;&#x8FD9;&#x79CD;&#x60B2;&#x54C0;&#x7684;&#x8BD7;&#x8BCD;&#xFF0C;&#x662F;&#x4E0D;&#x5E94;&#x8BE5;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x80FD;&#x591F;&#x505A;&#x51FA;&#x9274;&#x8D4F;&#x7684;&#x3002; 1&#x57CE;&#x4E0A;&#x659C;&#x9633;&#x753B;&#x89D2;&#x54C0;&#xFF0C;&#x6C88;&#x56ED;&#x975E;&#x590D;&#x65E7;&#x6C60;&#x53F0;&#x3002; &#x4F24;&#x5FC3;&#x6865;&#x4E0B;&#x6625;&#x6CE2;&#x7EFF;&#xFF0C;&#x66FE;&#x662F;&#x60CA;&#x9E3F;&#x7167;&#x5F71;&#x6765;&#x3002; 2&#x68A6;&#x65AD;&#x9999;&#x6D88;&#x56DB;&#x5341;&#x5E74;&#xFF0C;&#x6C88;&#x56ED;&#x67F3;&#x8001;&#x4E0D;&#x5439;&#x7EF5;&#x3002; &#x6B64;&#x8EAB;&#x884C;&#x4F5C;&#x7A3D;&#x5C71;&#x571F;&#xFF0C;&#x72B9;&#x540A;&#x9057;&#x8E2A;&#x4E00;&#x6CEB;&#x7136;&#x3002; 3&#x5927;&#x5BB6;&#x77E5;&#x9053;&#xFF0C;&#x9646;&#x6E38;&#x7684;&#x4E00;&#x751F;&#x662F;&#x975E;&#x5E38;&#x559C;&#x7231;&#x6885;&#x82B1;&#x7684;&#x3002; &#x8DEF;&#x8FD1;&#x57CE;&#x5357;&#x5DF2;&#x6015;&#x884C;&#xFF0C;&#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x66F4;&#x4F24;&#x60C5;&#x3002; &#x9999;&#x7A7F;&#x5BA2;&#x8896;&#x6885;&#x82B1;&#x5728;&#xFF0C;&#x7EFF;&#x8638;&#x5BFA;&#x6865;&#x6625;&#x6C34;&#x751F;&#x3002; 4&#x57CE;&#x5357;&#x5C0F;&#x964C;&#x53C8;&#x9022;&#x6625;&#xFF0C;&#x53EA;&#x89C1;&#x6885;&#x82B1;&#x4E0D;&#x89C1;&#x4EBA;&#x3002; &#x7389;&#x9AA8;&#x4E45;&#x6210;&#x6CC9;&#x4E0B;&#x571F;&#xFF0C;&#x58A8;&#x75D5;&#x72B9;&#x9501;&#x58C1;&#x95F4;&#x5C18;&#x3002; 5&#x67AB;&#x53F6;&#x521D;&#x4E39;&#x61C8;&#x53F6;&#x9EC4;&#xFF0C;&#x6CB3;&#x9633;&#x6101;&#x9B13;&#x602F;&#x65B0;&#x971C;&#x3002; &#x6797;&#x4EAD;&#x611F;&#x65E7;&#x7A7A;&#x56DE;&#x9996;&#xFF0C;&#x6CC9;&#x8DEF;&#x51ED;&#x8C01;&#x8BF4;&#x65AD;&#x80A0;&#x3002; &#x574F;&#x58C1;&#x9189;&#x9898;&#x5C18;&#x9ED8;&#x9ED8;&#xFF0C;&#x65AD;&#x4E91;&#x5E7D;&#x68A6;&#x4E8B;&#x832B;&#x832B;&#x3002; &#x5E74;&#x6765;&#x5984;&#x5FF5;&#x6D88;&#x9664;&#x5C3D;&#xFF0C;&#x56DE;&#x5411;&#x7985;&#x9F9B;&#x4E00;&#x70B7;&#x9999;&#x3002; 6&#x8FD9;&#x9996;&#x8BD7;&#x7684;&#x771F;&#x5B9E;&#x6027;&#x6709;&#x5F85;&#x8003;&#x8BC1;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x4E0D;&#x91CD;&#x8981;&#xFF0C;&#x6211;&#x771F;&#x7684;&#x559C;&#x6B22;&#x5440;&#xFF01; &#x53EF;&#x601C;&#x60C5;&#x79CD;&#x5C3D;&#x76F8;&#x601D;&#xFF0C;&#x5343;&#x53E4;&#x4F24;&#x5FC3;&#x5BF9;&#x6B64;&#x6C60;&#x3002; &#x6EF4;&#x4E0B;&#x9497;&#x5934;&#x591A;&#x5C11;&#x6CEA;&#xFF0C;&#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x8349;&#x5C24;&#x60B2;&#x3002; 7&#x6700;&#x559C;&#x6B22;&#x7684;&#x3002; &#x6C88;&#x5BB6;&#x56ED;&#x91CC;&#x82B1;&#x5982;&#x9526;&#xFF0C;&#x534A;&#x662F;&#x5F53;&#x5E74;&#x8BC6;&#x653E;&#x7FC1;&#x3002; &#x4E5F;&#x4FE1;&#x7F8E;&#x4EBA;&#x7EC8;&#x4F5C;&#x571F;&#xFF0C;&#x4E0D;&#x582A;&#x5E7D;&#x68A6;&#x592A;&#x5306;&#x5306;&#x3002; &#x603B;&#x7ED3;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x7684;&#x7231;&#x60C5;&#x53E4;&#x8BD7;&#x65E0;&#x7591;&#x662F;&#x6700;&#x52A8;&#x4EBA;&#x7684;&#x6545;&#x4E8B;&#x4E4B;&#x4E00;&#xFF0C;&#x51E0;&#x767E;&#x5E74;&#x4EE5;&#x6765;&#xFF0C;&#x4E00;&#x4EE3;&#x4EE3;&#x7684;&#x4EBA;&#x4EEC;&#x90FD;&#x5728;&#x4E3A;&#x8FD9;&#x6BB5;&#x51C4;&#x60E8;&#x7684;&#x7231;&#x60C5;&#x53E4;&#x8BD7;&#x800C;&#x611F;&#x53F9;&#x3002; &#x2014;&#x2014;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x65E0;&#x7591;&#x53C8;&#x662F;&#x5E78;&#x8FD0;&#x7684;&#xFF0C;&#x5728;&#x53E4;&#x4EE3;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x88AB;&#x5F3A;&#x884C;&#x62C6;&#x6563;&#x540E;&#x91CD;&#x9022;&#x4E00;&#x6B21;&#x7684;&#x4EBA;&#x5B9E;&#x5728;&#x662F;&#x5C11;&#xFF0C;&#x800C;&#x80FD;&#x88AB;&#x4EBA;&#x4EEC;&#x5343;&#x53E4;&#x4F20;&#x9882;&#x7684;&#xFF0C;&#x4E5F;&#x662F;&#x56E0;&#x4E3A;&#x9646;&#x6E38;&#x548C;&#x5510;&#x5A49;&#x7684;&#x624D;&#x534E;&#x3002;&#x800C;&#x88AB;&#x4EBA;&#x4EEC;&#x79F0;&#x4E3A;&#x201C;&#x5343;&#x53E4;&#x4F24;&#x5FC3;&#x201D;&#x7684;&#x8D75;&#x58EB;&#x7A0B;&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x662F;&#x8FD9;&#x6BB5;&#x6545;&#x4E8B;&#x7684;&#x53D7;&#x5BB3;&#x8005;&#x4E4B;&#x4E00;&#x3002;&#x4ED6;&#x5728;&#x5510;&#x5A49;&#x6700;&#x51C4;&#x60E8;&#x7684;&#x65F6;&#x5019;&#x6C42;&#x52A9;&#x4E86;&#x5979;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x53EA;&#x80FD;&#x770B;&#x7740;&#x59BB;&#x5B50;&#x4E3A;&#x8FD9;&#x524D;&#x4EFB;&#x4E08;&#x592B;&#x800C;&#x4F24;&#x5FC3;&#xFF0C;&#x81EA;&#x5DF1;&#x51FA;&#x4E86;&#x540C;&#x60C5;&#xFF0C;&#x522B;&#x7684;&#x4EC0;&#x4E48;&#x4E5F;&#x505A;&#x4E0D;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x6837;&#x7684;&#x60B2;&#x54C0;&#x554A;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x9646;&#x6E38;&#x4F5C;&#x4E3A;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x8BD7;&#x4EBA;&#x4E4B;&#x4E00;&#xFF0C;&#x4E5F;&#x5F53;&#x7136;&#x4E0D;&#x53EA;&#x662F;&#x56E0;&#x4E3A;&#x4ED6;&#x548C;&#x5510;&#x5A49;&#x7684;&#x6545;&#x4E8B;&#x540E;&#x7684;&#x8BD7;&#x8BCD;&#x3002;&#x4ED6;&#x7684;&#x90A3;&#x4E9B;&#x7231;&#x56FD;&#x8BD7;&#x8BCD;&#xFF0C;&#x4E5F;&#x540C;&#x6837;&#x80FD;&#x591F;&#x6253;&#x52A8;&#x6211;&#x7684;&#x5FC3;&#x7075;&#x3002; &#x6BD4;&#x5982;&#x8BF4;&#xFF1A; &#x955C;&#x91CC;&#x6D41;&#x5E74;&#x4E24;&#x9B13;&#x6B8B;&#xFF0C;&#x5BF8;&#x5FC3;&#x81EA;&#x8BB8;&#x5C1A;&#x5982;&#x4E39;&#x3002; &#x8870;&#x8FDF;&#x7F62;&#x8BD5;&#x620E;&#x8863;&#x7A84;&#xFF0C;&#x60B2;&#x6124;&#x72B9;&#x4E89;&#x5B9D;&#x5251;&#x5BD2;&#x3002; &#x8FDC;&#x620D;&#x5341;&#x5E74;&#x4E34;&#x7684;&#x535A;&#xFF0C;&#x58EE;&#x56FE;&#x4E07;&#x91CC;&#x6218;&#x768B;&#x5170;&#x3002; &#x5173;&#x6CB3;&#x81EA;&#x53E4;&#x65E0;&#x7A77;&#x4E8B;&#xFF0C;&#x8C01;&#x6599;&#x5982;&#x4ECA;&#x8896;&#x624B;&#x770B;&#x3002; &#x8FD9;&#x4E00;&#x9996;&#x300A;&#x4E66;&#x6124;&#x300B;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x611F;&#x53D7;&#x5230;&#x4ED6;&#x7684;&#x90A3;&#x79CD;&#x6740;&#x654C;&#x62A5;&#x56FD;&#x7684;&#x6E34;&#x671B;&#x548C;&#x62A5;&#x56FD;&#x65E0;&#x95E8;&#x7684;&#x65E0;&#x5948;&#x3002; &#x5305;&#x62EC;&#x53E6;&#x4E00;&#x9996;&#x300A;&#x4E66;&#x6124;&#x300B;&#xFF0C;&#x4E5F;&#x662F;&#x6211;&#x6700;&#x559C;&#x6B22;&#x7684;&#x90A3;&#x79CD;&#x3002; &#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x662F;&#x5199;&#x6211;&#x5BF9;&#x4E24;&#x9996;&#x300A;&#x9497;&#x5934;&#x51E4;&#x300B;&#x7684;&#x611F;&#x53D7;&#x7684;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x5728;&#x8FD9;&#x91CC;&#x8BB2;&#x9646;&#x6E38;&#x7684;&#x90A3;&#x4E9B;&#x7231;&#x8FC7;&#x53E4;&#x8BD7;&#x4E0D;&#x592A;&#x597D;&#xFF0C;&#x4E5F;&#x8BB8;&#x4E0B;&#x6B21;&#x53EF;&#x4EE5;&#x518D;&#x5F00;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x6765;&#x5199;&#x3002; &#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x518D;&#x6B21;&#x611F;&#x53D7;&#x4E86;&#x4E00;&#x4E0B;&#x8BD7;&#x8BCD;&#x7684;&#x7F8E;&#x597D;&#xFF0C;&#x5FC3;&#x91CC;&#x9762;&#x597D;&#x53D7;&#x591A;&#x4E86;&#xFF0C;&#x6709;&#x4E9B;&#x4E8B;&#x60C5;&#x4E5F;&#x60F3;&#x660E;&#x767D;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>诗词</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[卡常者π酱 题解]]></title>
    <url>%2F2019%2F03%2F14%2F%E5%8D%A1%E5%B8%B8%E8%80%85%CF%80%E9%85%B1-%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[现在终于可以公布一下这道题目的改编来源了。 http://codeforces.com/contest/1120/problem/C CF1120 C 的数据范围就是 $n \leq 5000$ 。 大概把 CF 上原题的代码复制粘贴过来可以获得 $15-20\ pts$。 现在是吐槽环节。 以下是几个出题人的代号： 123hkk = hankekezcr = 憧憬未来 = ForwardFutureyy = isunny = fluttersunny 这是来自出题人的吐槽。 首先这道题是上个星期 CF 的题目了，本来写了一个 $O(n^2\log n)$ 我就没有管了。 但是一个星期以后，zcr 突然想知道了我是怎么做的。于是又讨论起来了这道题。 讨论讨论着，就发现了一些单调性，一开始以为没有什么用，没有管。但是后来突然觉得，好像把我的方法通过这些单调性扩展一下，可以做到 $O(n\log n)$ 。于是，我们联系了一下这场比赛的出题人，这道题的雏形（一开始的数据范围）就出来了。 一开始，$15\%$ 是给的原题数据范围，这个一直都没有变。一开始是 $n \leq 50000$ 的。 但是第二天发现了 zcr 的刷表法也可以通过单调性扩展。而且由于这种算法不需要线段树合并，虽然复杂度没有变，但是常数比较小。 随后，下午，zcr 发现这道题可以用单调队列维护，于是就出现了 $O(n)$ 的算法。于是，这道题的 $n$ 由 $500000$ 扩大成了 $5000000​$。 之所以不开 $10 ^ 6$，是因为怕常数小的树状数组或者手写二叉堆的做法卡过去。但是这样线性做法的 SAM 就会 MLE 了。于是我们把字符集缩小成了 $a-g$。这也就导致了随机数据这一项目似乎根本不存在的尴尬局面。 而且还有一个情况没有预料到的情况，就是本来按照我们最初的设想，这道题可能会用到 SAM + 线段树合并 + 单调队列优化 DP，要想到可能也要稍微花一些时间。但是随着我们后来的一步步研究，似乎越来越简单了。第二个算法先是把把线段树合并给去掉了，单调队列也不用了，变成一个线段树区间修改，而且似乎这个算法只需要在暴力的基础上稍微扩展一下就能想到，这下子就变成了了 NOIP D2T1 难度了。然后再优化，结果干脆把线段树都去掉了，变成单调队列优化 DP —— 这不是普及组内容吗？但是似乎已经不怎么来得及把这道题撤回来了，于是就变成了整场比赛最简单的题目了。 还有一个情况就是按照剧本，时间限制应该是 std 的两倍以上。可惜洛谷在有 $40​$ 个点的情况下最多只能开 $3s​$。 这里向大家道歉。 以下是题解。 $n \leq 5000$ 以及 随机数据这个数据范围显然是 $O(n^2)$。可能会带一个 $\log$。 我提供一个 憧憬未来 神仙在 CF 上的做法。我的做法一会儿再讲。 我们设 $dp[i]$ 表示前 $i$ 位的最小花费。我们采用刷表法来更新后续状态。 dp[i] + b \rightarrow dp[j]\ |\ i < j , s_{i+1..j} \subseteq s_{1..i}怎么判断 $s_{i + 1..j}​$ 怎么判断是不是前面 $1..i​$ 的字串呢？我们只需要对前 $i​$ 的字符建立 SAM，然后在上面跑就可以了，一直到无法继续向下走就可以了。 这样的时间复杂度是 $O(n^2)​$。但是如果数据随机的话，那么不会跑太长的串就会被断掉，所以是可以通过随机数据的。 $n \leq 50000$我们暂时先不介绍 $n \leq 50000$ 的做法。先来讲一下我在 CF 上的写法。 因为我对于刷表不太熟悉，所以直接考虑了怎么填表，所以方法相比于上一种略微繁琐。 我们发现问题就是判断 $j + 1$ 到 $i$ 的部分是不是 $1$ 到 $j$ 部分的字串，$i$ 是固定的。 如果能够在 parent 树上找到 $j + 1$ 到 $i$ 部分对应的点的话，那么其实就是判断这个点的 $endpos$ 集合（也叫 $right$ 集合，两种不同的叫法）里面是否有 $1$ 到 $j$ 区间内的点。这个可以用线段树合并解决。 但是现在的问题就只剩一个了。如何找到 $j + 1$ 到 $i$ 的串在 parent 树上的点。我们发现，如果把 $j$ 从 $i - 1$ 到 $0$ 倒序循环，那么就相当于每次在一个串的前面加上一个字符。这个过程实际上就是在 parent 树上向下走的过程。如果现在这个串的长度仍然小于等于当前节点的 $maxlen​$，那么就应该停留在原地。如果大于了，那么需要选择一个合适的孩子向下走。具体的选择方法可以参考这个串上的对应位置的字符。 我们可以 $O(n^2\log n)$ 解决这个 $n \leq 5000​$ 的问题，但是显然会被上面的吊打。 但是我们发现，肯定存在一个位置 $p​$ 使得 $\forall j \in [1, p]​$，$j + 1​$ 到 $i​$ 的串不是 $1​$ 到 $j​$ 的子串，而 $\forall j \in (p, i)​$ 都有 $j + 1​$ 到 $i​$ 的串是 $1​$ 到 $j​$ 的子串。也就是说，是否是字串这一条件是单调的。 于是我们可以二分或者倍增地求出这个 $p​$ 值，然后通过线段树查询 $(p, i)​$ 区间内的 $dp​$ 值的最小值，转移即可。 时间复杂度 $O(n \log^2 n)$。如果常数小也许能过 $n \leq 500000$ 吧，没有试过。一个 $\log​$ 的 std-force 对于 $n \leq 50000$ 都很卡常了。。。 $n \leq 500000$其实正解与 $n \leq 50000$ 的部分分相差不大，因为是第一次出题，所以不太会配置部分分，所有导致严重不合理。 我们发现，当 $i$ 向右移动到 $i + 1$ 的时候，$p$ 点的位置应该是非严格单调增的。证明的话可以伪证一下： 假设 $p$ 点移动到了 $p’$，那么就是说 $\forall j \in (p’, i + 1)$，都有 $j + 1$ 到 $i + 1$ 的串是 $1$ 到 $j$ 的子串。 又因为 $j + 1$ 到 $i$ 是 $j + 1$ 到 $i + 1$ 的字串，所以可以$\forall j \in (p’, i)$，都有 $j + 1$ 到 $i$ 的串 $1$ 到 $j$ 的子串。 因此 $(p’, i) \subseteq (p, i)$ ，即 $p’ \geq p$。 那么有了这个性质，我们可以每次更新 $i$ 的时候把 $p$ 向右移动直到能够匹配，然后单调队列或者线段树维护一下就可以了。这样就不需要每次重新算了，$p$ 的位置最多一共向右移动 $n$ 次，时间复杂度 $O(n\log n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)#define dbg(...) fprintf(stderr, __VA_ARGS__)#define File(x) freopen(#x".in", "r", stdin), freopen(#x".out", "w", stdout)#define fi first#define se second#define pb push_backtemplate&lt;typename A, typename B&gt; inline char SMAX(A &amp;a, const B &amp;b) &#123;return a &lt; b ? a = b , 1 : 0;&#125;template&lt;typename A, typename B&gt; inline char SMIN(A &amp;a, const B &amp;b) &#123;return b &lt; a ? a = b , 1 : 0;&#125;typedef long long ll; typedef unsigned long long ull; typedef std::pair&lt;int, int&gt; pii;template&lt;typename I&gt;inline void read(I &amp;x) &#123; int f = 0, c; while (!isdigit(c = getchar())) c == '-' ? f = 1 : 0; x = c &amp; 15; while (isdigit(c = getchar())) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c &amp; 15); f ? x = -x : 0;&#125;const int N = 500000 + 7;const int INF = 0x3f3f3f3f;const ll INF_ll = 0x3f3f3f3f3f3f3f3f;int n, a, b, hd, tl, tax[N], q[N &lt;&lt; 1];ll dp[N];char s[N];struct Node&#123;int c[26], len, fa;&#125; t[N &lt;&lt; 1]; int nod = 1, last = 1, edp[N &lt;&lt; 1];inline void Extend(int x, int id) &#123; int p = last, np = ++nod; t[np].len = t[p].len + 1; edp[np] = id; for (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np; if (!p) t[np].fa = 1; else &#123; int q = t[p].c[x]; if (t[q].len == t[p].len + 1) t[np].fa = q; else &#123; int nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + 1; t[q].fa = t[np].fa = nq; for (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq; &#125; &#125; last = np;&#125;inline void Resort() &#123; for (int i = 1; i &lt;= nod; ++i) ++tax[t[i].len]; for (int i = 1; i &lt;= n; ++i) tax[i] += tax[i - 1]; for (int i = 1; i &lt;= nod; ++i) q[tax[t[i].len]--] = i;&#125;namespace SGT&#123; struct Seg&#123;int lc, rc, val;&#125; t[N * 40]; int nod, rt[N &lt;&lt; 1]; inline void Insert(int &amp;o, int L, int R, int x) &#123; if (!o) o = ++nod; ++t[o].val; if (L == R) return; int M = (L + R) &gt;&gt; 1; if (x &lt;= M) Insert(t[o].lc, L, M, x); else Insert(t[o].rc, M + 1, R, x); &#125; inline int Query(int o, int L, int R, int l, int r) &#123; if (l &gt; r) return 0; if (l &lt;= L &amp;&amp; R &lt;= r) return t[o].val; int M = (L + R) &gt;&gt; 1; if (r &lt;= M) return Query(t[o].lc, L, M, l, r); if (l &gt; M) return Query(t[o].rc, M + 1, R, l, r); return Query(t[o].lc, L, M, l, r) + Query(t[o].rc, M + 1, R, l, r); &#125; inline int Merge(int o, int p) &#123; if (!o || !p) return o ^ p; int np = ++nod; t[np].lc = Merge(t[o].lc, t[p].lc); t[np].rc = Merge(t[o].rc, t[p].rc); t[np].val = t[t[np].lc].val + t[t[np].rc].val; return np; &#125;&#125;using SGT::Insert;using SGT::Query;using SGT::rt;using SGT::Merge;int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #else #ifndef ONLINE_JUDGE File(string); #endif #endif scanf("%d%d%d%s", &amp;n, &amp;a, &amp;b, s + 1); for (int i = 1; i &lt;= n; ++i) Extend(s[i] - 'a', i); for (int i = 1; i &lt;= nod; ++i) if (edp[i]) Insert(rt[i], 1, n, edp[i]); Resort(); for (int i = nod; i; --i) rt[t[q[i]].fa] = Merge(rt[t[q[i]].fa], rt[q[i]]), SMAX(edp[t[q[i]].fa], edp[q[i]]); int o = 1, p = 0; hd = 1, tl = 0; for (int i = 1; i &lt;= n; ++i) &#123; dp[i] = INF_ll; o = t[o].c[s[i] - 'a']; while (1) &#123; if (i - p &lt;= t[t[o].fa].len) o = t[o].fa; if (p == i - 1) break; if (o &amp;&amp; Query(rt[o], 1, n, 1, p)) break; ++p; &#125; SMIN(dp[i], dp[i - 1] + a); if (Query(rt[o], 1, n, 1, p)) &#123; while (hd &lt;= tl &amp;&amp; q[hd] &lt; o) ++hd; SMIN(dp[i], dp[p] + b); &#125; while (hd &lt;= tl &amp;&amp; dp[i] &gt;= dp[q[tl]]) --tl; q[++tl] = i; &#125; printf("%lld\n", dp[n]);&#125; 由一个字符构成如果 $b \leq a$，那么策略很显然。 第一个字符花费 $a​$，第二个字符花费 $b​$，第 $3-4​$ 个字符组成的字符串花费 $b​$，第 $5-9​$ 个字符组成的字符串花费 $b​$ ……像这样倍增下去即可。 但是如果 $b &gt; a​$ ，那么 $b​$ 就不是在任何情况下都是最优的了。令 $k = \lceil\frac ba\rceil​$，那么就应该对于前 $k​$ 个字符每一个都花费 $a​$ 元。后面继续向上面一样每次花费 $b​$ 倍增即可。 $n \leq 5000000$我们回过去考虑一下 ForwardFuture 神仙在 CF 上的做法。因为他是刷表法，所以只需要现在的 SAM 的状态就可以确定后续是不是字串的问题了。这是此题刷表法最大的优势。 我们之前在 $n \leq 500000$ 里面曾经伪证了那里的 $p$ 是具有单调性的。那么我们不妨改变 $p$ 的定义，把 $p$ 在这里定义为： 对于一个固定的 $i$，位置 $p$ 满足 $\forall j \in (i, p]$ 有 $i + 1$ 到 $j$ 组成的串是 $1$ 到 $i$ 的字串，而 $\forall j \in (p, n]$ 则均不满足。 那么由相同的方法，可以伪证出这里的 $p$ 随着 $i$ 的增大，也是单调递增的。 于是，我们也可以用线段树对一个区间取 $\min$ 的操作，依然实现 $O(n \log n)$ 的算法。 这个操作也可以用一个优先队列来维护所有的取 $\min$ 操作，但是复杂度依然是 $O(n \log n)$。 但是受到这个方法的启发，我们用 $(pos, val)$ 来维护现在的所有取 $\min$ 操作，那么如果存在 $pos_1 &lt; pos_2, val_1 &gt; val_2$ 的情况，那么 $1$ 这个取 $\min$ 操作就完全没有用了。基于这个性质，完全可以用单调队列维护。 时间复杂度 $O(n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define fec(i, x, y) (int i = head[x], y = g[i].to; i; i = g[i].ne, y = g[i].to)#define dbg(...) fprintf(stderr, __VA_ARGS__)#define File(x) freopen(#x".in", "r", stdin), freopen(#x".out", "w", stdout)#define fi first#define se second#define pb push_backtemplate&lt;typename A, typename B&gt; inline char SMAX(A &amp;a, const B &amp;b) &#123;return a &lt; b ? a = b , 1 : 0;&#125;template&lt;typename A, typename B&gt; inline char SMIN(A &amp;a, const B &amp;b) &#123;return b &lt; a ? a = b , 1 : 0;&#125;typedef long long ll; typedef unsigned long long ull; typedef std::pair&lt;int, int&gt; pii;template&lt;typename I&gt;inline void read(I &amp;x) &#123; int f = 0, c; while (!isdigit(c = getchar())) c == '-' ? f = 1 : 0; x = c &amp; 15; while (isdigit(c = getchar())) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c &amp; 15); f ? x = -x : 0;&#125;const int N = 5000000 + 7;const int INF = 0x3f3f3f3f;const ll INF_ll = 0x3f3f3f3f3f3f3f3f;int n, a, b, hd, tl;ll dp[N];char s[N];pii q[N];struct Node&#123;int c[7], len, fa;&#125; t[N &lt;&lt; 1]; int nod = 1, last = 1;inline void Extend(int x) &#123; int p = last, np = ++nod; t[np].len = t[p].len + 1; for (; p &amp;&amp; !t[p].c[x]; p = t[p].fa) t[p].c[x] = np; if (!p) t[np].fa = 1; else &#123; int q = t[p].c[x]; if (t[q].len == t[p].len + 1) t[np].fa = q; else &#123; int nq = ++nod; t[nq] = t[q]; t[nq].len = t[p].len + 1; t[q].fa = t[np].fa = nq; for (; p &amp;&amp; t[p].c[x] == q; p = t[p].fa) t[p].c[x] = nq; &#125; &#125; last = np;&#125;int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif scanf("%d%d%d%s", &amp;n, &amp;a, &amp;b, s + 1); int o = 1, p = 0; hd = 1, tl = 0; for (int i = 1; i &lt;= n; ++i) &#123; Extend(s[i] - 'a'); dp[i] = dp[i - 1] + a; if (p &lt; i) p = i; while (o &gt; 1 &amp;&amp; p - i &lt;= t[t[o].fa].len) o = t[o].fa; if (!o) o = 1; for (; p &lt; n &amp;&amp; t[o].c[s[p + 1] - 'a']; ++p) o = t[o].c[s[p + 1] - 'a']; while (hd &lt;= tl &amp;&amp; q[hd].se &lt; i) ++hd; if (hd &lt;= tl) SMIN(dp[i], dp[q[hd].fi] + b); while (hd &lt;= tl &amp;&amp; dp[q[tl].fi] &gt;= dp[i]) --tl; q[++tl] = pii(i, p); &#125; printf("%lld\n", dp[n]);&#125;]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
        <tag>单调队列</tag>
        <tag>线段树合并</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F03%2F12%2FCodeforces-Round538-(Div.%202)-(CF1114)%2F</url>
    <content type="text"><![CDATA[document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Global Round 1 (CF1110)（A-F）]]></title>
    <url>%2F2019%2F02%2F15%2FCodeforces-Global-Round-1-CF1110-%EF%BC%88%E6%9C%AA%E5%AE%8C%E7%BB%93%EF%BC%8C%E5%8F%AA%E6%9C%89-A-F%EF%BC%89%2F</url>
    <content type="text"><![CDATA[继续补题。因为看见同学打了这场，而且涨分还不错，所以觉得这套题目可能会比较有意思。 因为下午要开学了，所以恐怕暂时不能把这套题目补完了，所以先把 A-F 放上来。 A. Parity保存 %2 的值就可以了。 12345678910const int N = 1e5 + 7;int b, k, a[N], ans;int main() &#123; read(b), read(k); for (int i = 1; i &lt;= k; ++i) read(a[i]); for (int i = k, p = 1; i; --i, p = p * b % 2) (ans += a[i] * p) %= 2; if (ans) puts("odd"); else puts("even");&#125; B. Tape一开始准备二分，然后发现他要的是最小的总长度，不太好二分。然后发现我们在断的时候，应该尽量把间隙比较大的优先断掉，所以直接贪心，排个序就可以了。 123456789101112const int N = 1e5 + 7;int n, m, k, a[N], b[N], c[N], ans;int main()&#123; read(n), read(m), read(k); for (int i = 1; i &lt;= n; ++i) read(a[i]), b[i - 1] = a[i] - a[i - 1], c[i] = i; std::sort(c + 1, c + n, [](const int &amp;x, const int &amp;y)&#123;return b[x] &gt; b[y];&#125;); std::sort(c + 1, c + k); c[k] = n; for (int i = 1; i &lt;= k; ++i) ans += a[c[i]] - a[c[i - 1] + 1] + 1; printf("%d\n", ans);&#125; C. Meaningless Operations好一道打表题。 想得百无聊赖之下开始打表，然后就有惊喜了。 发现除了 $2^k-1$ 外的数，答案都是比他大的最小的 $2^k-1$ 。 那么 $2^k-1$ 自己呢？一开始没有把表打全，以为就是如果 $k$ 是偶数，就是 $a/3$ ，否则就是 $1$ ，结果交上去 wa2. 于是继续打 $2^k-1$，其实这个时候可以直接把所有的表直接复制上去。可我偏要找出规律来。好像答案都是原数的因数，而且——而且似乎还是最大的因数啊。 于是就可以 A 掉了。 f(a) = \max_{0 < b < a}{gcd(a \oplus b, a \> \& \> b)}.仔细想一下，对于这个式子，如果 $a \neq 2^k-1$ ，那么 $a$ 就不是所有位都为 $1$ ，那么令 $b = ~a$ ，那么 $a \oplus b = 2 ^ k - 1, a > \&amp; > b = 0$ 。于是 $gcd$ 就是 $2^k-1$。 否则呢，如果 $a$ 的二进制位全是 $1$ ，那么这里的 $b$ 应该是 $0$ ，显然不满足要求。发现当 $a$ 二进制位都是 $1$ 时， $a \oplus b = a - b$， $a > \&amp; > b = b$ 。于是原式可化为 $f(a) = \max \limits_{0 &lt; b &lt; a}{gcd(a - b, b)} = \max \limits_{0 &lt; b &lt; a}{gcd(a, b)}$ 。显然当 $b | a$ 时 $f(a)$ 最大，于是 $b$ 就是 $a$ 最大的因数。 1234567891011121314151617181920212223int q, x;inline int Get(int x) &#123; int ans = 0; while (x) ++ans, x &gt;&gt;= 1; return ans;&#125;inline int Get2(int x) &#123; if (x == 1) return 0; for (int i = 2, p = sqrt(x); i &lt;= p; ++i) if(x % i == 0) return x / i; return 1;&#125;int main() &#123; read(q); for (int i = 1; i &lt;= q; ++i) &#123; read(x); int p = Get(x), s = (1 &lt;&lt; p) - 1; if (s != x) printf("%d\n", s); else printf("%d\n", Get2(s)); &#125;&#125; D. Jongmah我感觉这道题比 E,F 都难。可能是因为太菜了才会这样想。（因为目前这六道题里面只有这道题是看题解做的。。。） 首先最重要的结论是 $(i, i + 1, i + 2)$ 这样的顺子最多取两个，否则可以自己先把对子 $(i , i, i)$取完是不会比原方案差的。 于是我们限制一下顺子取的个数就可以了。 设 $dp[i][j][k]$ 表示 dp 到第 $i$ 个数，保证对子 $(i - 1, i, i + 1)$ 取 $j$ 个，对子 $(i, i + 1, i + 2)$ 取 $k$ 个。 那么有 dp[i][j][k] = \max_{l = 0} ^ 2 {dp[i][l][j] + k + \lfloor \frac{num[i] - j - k - l}3 \rfloor}1234567891011121314151617const int N = 1e6 + 7;int n, m, x, a[N], dp[N][3][3];int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif read(n); read(m); for (int i = 1; i &lt;= n; ++i) read(x), ++a[x]; for (int i = 1; i &lt;= m; ++i) for (int j = 0; j &lt;= 2; ++j) for (int k = 0; k &lt;= 2; ++k) for (int l = 0; l &lt;= 2; ++l) if(a[i] &gt;= j + k + l) SMAX(dp[i][j][k], dp[i - 1][l][j] + k + (a[i] - j - k - l) / 3); printf("%d\n", dp[m][0][0]);&#125; E. Magic Stones一开始捣鼓了半天推出了一堆奇怪的没有用的性质。于是后来干脆直接划掉重新换个思路思考。 记得好像对于序列上进行变化的题目好多都是用差分来做的，所以我开始从差分上考虑。 然后发现好像差分完就没了。 c_i' = c_{i + 1} + c_{i - 1} - c_i\\ \text{可以推得}\\ c_{i + 1} - c_i' = c_i - c_{i - 1}\\ c_i' - c_{i - 1} = c_{i + 1} - c_i也就是说一次操作其实是把差分数组上两个数交换一下。 注意要特判一下两端的原数据，因为两端不可以进行操作。一开始没有注意，就wa4了一次。 12345678910111213141516171819const int N = 1e5 + 7;int n, m, c[N], t[N];int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif read(n); for (int i = 1; i &lt;= n; ++i) read(c[i]); for (int i = 1; i &lt;= n; ++i) read(t[i]); if (c[1] != t[1] || c[n] != t[n]) return puts("No"); for (int i = n; i &gt; 1; --i) c[i] = c[i] - c[i - 1]; for (int i = n; i &gt; 1; --i) t[i] = t[i] - t[i - 1]; std::sort(c + 2, c + n + 1); std::sort(t + 2, t + n + 1); if (!memcmp(c + 2, t + 2, sizeof(int) * (n - 1))) puts("Yes"); else puts("No");&#125; F. Nearest Leaf映象中这道题好像是我们学校学长暑假讲过的原题，但是记不起来了，去翻 ppt 却很神奇地没有找到。 但是不影响这道题确实不难。 显然是离线，把询问挂在 $v$ 上，假设 $dis[i]$ 表示 $v$ 到 $i$ 的距离，可以发现，从父亲跳到儿子，会把儿子的子树内的点的 $dis$ 值加上 $w$ ( $w$ 是边权)，其余的点减上 $w$ 。 直接线段树维护即可。 注意代码里面的 $dis$ 数组和上面的分析里面的 $dis$ 不是一个东西。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768using std::min;#define lc o &lt;&lt; 1#define rc o &lt;&lt; 1 | 1const int N = 5e5 + 7;const ll INF = 0x3f3f3f3f3f3f3f3f;int n, m, x, y, z, dfc, fa[N], dfn[N], num[N], w[N];ll dis[N], ans[N];struct Edge &#123;int to, ne, w;&#125; g[N &lt;&lt; 1]; int head[N], tot;inline void Addedge(int x, int y, int z) &#123;g[++tot].to = y; g[tot].w = z; g[tot].ne = head[x]; head[x] = tot;&#125;struct Question&#123;int l, r; ll *ans;&#125;;std::vector&lt;Question&gt; q[N];struct Node&#123;ll val, add;&#125; t[N &lt;&lt; 2];inline void Build(int o, int L, int R) &#123; if (L == R) return (void)(t[o].val = dis[L]); int M = L + R &gt;&gt; 1; Build(lc, L, M); Build(rc, M + 1, R); t[o].val = min(t[lc].val, t[rc].val);&#125;inline void Add(int o, int L, int R, int l, int r, ll k) &#123; // dbg("o = %d, L = %d, R = %d, l = %d, r = %d, k = %d\n", o, L, R, l, r, k); if (l &lt;= L &amp;&amp; R &lt;= r) return (void)(t[o].add += k, t[o].val += k); int M = L + R &gt;&gt; 1; if (l &lt;= M) Add(lc, L, M, l, r, k); if (r &gt; M) Add(rc, M + 1, R, l, r, k); t[o].val = min(t[lc].val, t[rc].val) + t[o].add;&#125;inline ll Qmin(int o, int L, int R, int l, int r) &#123; if (l &lt;= L &amp;&amp; R &lt;= r) return t[o].val; int M = L + R &gt;&gt; 1; if (r &lt;= M) return Qmin(lc, L, M, l, r) + t[o].add; if (l &gt; M) return Qmin(rc, M + 1, R, l, r) + t[o].add; return min(Qmin(lc, L, M, l, r), Qmin(rc, M + 1, R, l, r)) + t[o].add;&#125;inline void dfs_pre(int x) &#123; num[x] = 1; for fec(i, x, y) dfs_pre(y), num[x] += num[y];&#125;inline void dfs(int x) &#123; if(x &gt; 1) &#123; Add(1, 1, n, 1, n, w[x]); Add(1, 1, n, x, x + num[x] - 1, -w[x] &lt;&lt; 1); &#125; for (auto i : q[x]) *i.ans = Qmin(1, 1, n, i.l, i.r); for fec(i, x, y) dfs(y); if(x &gt; 1) &#123; Add(1, 1, n, 1, n, -w[x]); Add(1, 1, n, x, x + num[x] - 1, w[x] &lt;&lt; 1); &#125;&#125;int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif read(n), read(m); for (int i = 2; i &lt;= n; ++i) read(y), read(z), dis[i] = dis[y] + z, Addedge(fa[i] = y, i, w[i] = z); for (int i = 2; i &lt;= n; ++i) dis[fa[i]] = INF; for (int i = 1; i &lt;= m; ++i) read(x), read(y), read(z), q[x].pb((Question)&#123;y, z, ans + i&#125;); Build(1, 1, n); dfs_pre(1); dfs(1); for (int i = 1; i &lt;= m; ++i) printf("%I64d\n", ans[i]);&#125;]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[[AtCoder] NIKKEI Programming Contest 2019 (暂缺F)]]></title>
    <url>%2F2019%2F02%2F13%2FAtCoder-NIKKEI-Programming-Contest-2019-%E6%9A%82%E7%BC%BAF%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;本来看见这一场的排名的画风比较正常就来补一下题，但是完全没有发现后两题的AC人数远少于我补的上一份AtCoder。 A - Subscribers&emsp;&emsp;首先始终 $max = \min(A, B)$ ，$min$ 的话如果 $A + B \leq N$ ，那么就是 $0$ ，否则就是 $A + B - N$ 。 1234567int n, a, b;int main() &#123; read(n), read(a), read(b); if (a + b &lt;= n) printf("%d 0\n", std::min(a, b)); else printf("%d %d\n", std::min(a, b), a + b - n);&#125; B - Touitsu&emsp;&emsp;直接枚举每一位，看看有几个相同的就行了。 123456789101112int n, ans;char a[N], b[N], c[N];int main() &#123; scanf("%d%s%s%s", &amp;n, a + 1, b + 1, c + 1); for (int i = 1; i &lt;= n; ++i) &#123; if(a[i] == b[i] &amp;&amp; b[i] == c[i]) ; else if(a[i] != b[i] &amp;&amp; a[i] != c[i] &amp;&amp; b[i] != c[i]) ans += 2; else ++ans; &#125; printf("%d\n", ans);&#125; C - Different Strokes&emsp;&emsp;挺好一道题，就是有点简单。 &emsp;&emsp;我们考虑对于每一个人来说，假设他选的集合是 $S$ ，他要最大化这个东西： \sum_{i \in S} a[i] - \sum_{i \notin S} b[i]&emsp;&emsp;如果我们假设 $B = \sum \limits_{i = 1} ^ n b[i]$ ，那么上式可化为： (\sum_{i \in S} a[i] +b[i]) -B&emsp;&emsp;因此不管是谁，都应该尽量选择 $a[i]+b[i]$ 大的位置上的数。直接用一个堆维护一下就可了。（不过好像可以直接排一下序就可以啦，我似乎傻掉了） 123456789101112131415161718const int N = 1e5 + 7;int n, a[N], b[N];ll ans;struct cmp &#123; int operator () (const int &amp;x, const int &amp;y) const &#123; return a[x] + b[x] &lt; a[y] +b[y]; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, cmp&gt; q;int main() &#123; read(n); for (int i = 1; i &lt;= n; ++i) read(a[i]), read(b[i]), q.push(i); for (int i = 1; i &lt;= n; ++i) if (i &amp; 1) ans += a[q.top()], q.pop(); else ans -= b[q.top()], q.pop(); printf("%lld\n", ans);&#125; D - Restore the Tree&emsp;&emsp;怎么感觉 D 比 C 还简单啊。至少 C 还要想一会儿列个式子， 这道题好像是读完题就可以开始写了。 &emsp;&emsp;因为保证新加的边始终是从祖先连向孩子的，所以图里面的边实际上表示了深度的大小关系，因此根肯定还是入度为 0 的。找到根以后拓扑排序一下就可了，最后一个拓扑到 $i$ 的点就是 $i$ 的父亲。 1234567891011121314151617181920212223242526const int N = 1e5 + 7;int n, m, x, y, rt, idg[N], fa[N];struct Edge &#123;int to, ne;&#125; g[N]; int head[N], tot;inline void Addedge(int x, int y) &#123;g[++tot].to = y; g[tot].ne = head[x]; head[x] = tot;&#125;int q[N], hd, tl;inline void BFS() &#123; q[++tl] = rt; while (hd &lt; tl) &#123; int x = q[++hd]; for fec(i, x, y) if (!--idg[y]) fa[y] = x, q[++tl] = y; &#125;&#125;int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n - 1 + m; ++i) read(x), read(y), Addedge(x, y), ++idg[y]; for (int i = 1; i &lt;= n; ++i) if(!idg[i]) rt = i; BFS(); for (int i = 1; i &lt;= n; ++i) printf("%d\n", fa[i]);&#125; E - Weights on Vertices and Edges&emsp;&emsp;好题啊。 &emsp;&emsp;一开始我想的是肯定要从大到小枚举边要不要删。然后可以发现不在最小生成树上的边不管怎么删都不影响原图的连通性，于是可以直接把原图变成一棵树的时候，那么可以直接上 LCT 来维护连通性以及一些信息。但是似乎方法是成立的，只是额在AtCoder上如果还要写LCT，是真的不敢想啊。 &emsp;&emsp;于是又思考了一个小时，也没什么新思路，只能去看了一下题解。 &emsp;&emsp;是这样的，我们对于删边发过来，变成从小到大加边，用并查集来维护一下每个联通块的点权和。但是我们会发现，有些边可能之前是不能加的，但是随着后续的加边，联通块扩大了，那些边就可以加入了！ &emsp;&emsp;题解提供了一种很巧妙的办法，我们对于那样的边，我们把它们的联通块先连起来，但是并查集要记录所有并没有真正加进去的边的数量，显然后面如果我们真正加边的时候，就可以把该联通块并完以后，里面没有加的边都加进去了。 123456789101112131415161718192021222324252627282930const int N = 1e5 + 7;int n, m, w[N], ans;struct Edge&#123;int x, y, z;&#125; g[N];int fa[N], num[N];ll sum[N];inline int Find(int x) &#123;return fa[x] == x ? x : fa[x] = Find(fa[x]);&#125;inline void Union(int x, int y) &#123; fa[y = Find(y)] = x = Find(x); num[x] += num[y], num[y] = 0; sum[x] += sum[y], sum[y] = 0;&#125;int main() &#123; #ifdef hzhkk freopen("hkk.in", "r", stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n; ++i) read(w[i]), fa[i] = i, sum[i] = w[i]; for (int i = 1; i &lt;= m; ++i) read(g[i].x), read(g[i].y), read(g[i].z); std::sort(g + 1, g + m +1, [](const Edge &amp;a, const Edge &amp;b)&#123;return a.z &lt; b.z;&#125;); for (int i = 1; i &lt;= m; ++i) &#123; int x = Find(g[i].x), y = Find(g[i].y), z = g[i].z; if (Find(x) != Find(y)) Union(x, y); ++num[x]; if (sum[x] &gt;= z) ans += num[x], num[x] = 0; &#125; printf("%d\n", m - ans);&#125; &emsp;&emsp;后来到网上又翻了一会儿题解，发现我之前的方法还是有救的，而且还有两种解救的办法。 &emsp;&emsp;第一种是通过不带路径压缩，只用按秩合并来做的并查集，这种并查集的单次操作的时间复杂度是 $O(\log n)$ 的，而且因为没有路径压缩，可以很方便地实现 Cut 操作，比 LCT 好写，当然也就只适合这道题了，并查集扩展性没有 LCT 好。 &emsp;&emsp;第二种是建立 Kruskal 重构树。那么在从小到大枚举最小生成树里面的边的时候，对于一条边，如果其父亲没有被删除，那么显然他自己也不需要被删除了。因此如果判断的话，首先判断其父亲有没有被删，然后再看看其所在联通块的点权和——其现在所在联通块就是在重构树上的子树！这样的方法，因为删边时一定是从根山道这条边的，所以不需要更该其祖先的子树和的信息。 &emsp;&emsp;此上三中方法的时间复杂度都是 $O(m\log n)$ 。我就只写了第一种。 F - Jewels&emsp;&emsp;想了两个小时也不会做，上网找题解也找不到，看来我可能需要去研读一下官方的英文题解。但是由于我英语比较烂，所以F可能要咕。]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[[AtCoder] Yahoo Programming Contest 2019]]></title>
    <url>%2F2019%2F02%2F12%2FAtCoder-Yahoo-Programming-Contest-2019%2F</url>
    <content type="text"><![CDATA[&#x2003;&#x2003;&#x5F88;&#x9057;&#x61BE;&#x9519;&#x8FC7;&#x4E86;&#x4E00;&#x573A; AtCoder &#x3002;&#x542C;&#x8BF4;&#x8FD9;&#x573A;&#x662F;&#x6DA8;&#x5206;&#x573A;&#x5462;&#xFF0C;&#x4E8E;&#x662F;&#x7279;&#x610F;&#x6765;&#x8865;&#x4E00;&#x4E0B;&#x9898;&#x3002; A - Anti-Adjacency&#x2003;&#x2003;&#x663E;&#x7136; $K \leq \frac{N + 1}2$ 12345678910int n, k;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(k); if (k &lt;= (n + 1 &gt;&gt; 1)) puts(&quot;YES&quot;); else puts(&quot;NO&quot;);} B - Path&#x2003;&#x2003;&#x6B27;&#x62C9;&#x8DEF;&#x3002; 123456789101112const int N = 7;int n = 4, x, y, deg[N], jcnt;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif for (int i = 1; i &lt; n; ++i) read(x), read(y), ++deg[x], ++deg[y]; for (int i = 1; i &lt;= n; ++i) if(deg[i] &amp; 1) ++jcnt; if (jcnt == 0 ||jcnt == 2) puts(&quot;YES&quot;); else puts(&quot;NO&quot;);} C - When I hit my pocket&#x2026;&#x2003;&#x2003;&#x5982;&#x679C; $B-A\leq 2$&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x76F4;&#x63A5;&#x62CD;&#x997C;&#x5E72;&#x80AF;&#x5B9A;&#x4E0D;&#x6BD4;&#x505A;&#x4EA4;&#x6613;&#x5DEE;&#x3002; &#x2003;&#x2003;&#x5426;&#x5219;&#xFF0C;&#x5C31;&#x5148;&#x628A;&#x997C;&#x5E72;&#x6570;&#x62CD;&#x5230; $A$ &#xFF0C;&#x7136;&#x540E;&#x5C31;&#x5356;&#x4E00;&#x6B21;&#x4E70;&#x4E00;&#x6B21;&#xFF0C;&#x6700;&#x540E;&#x5982;&#x679C;&#x8FD8;&#x6709;&#x5355;&#x72EC;&#x7684;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x673A;&#x4F1A;&#x5C31;&#x62CD;&#x4E00;&#x4E0B;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 1234567891011121314151617int k, a, b;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(k), read(a), read(b); if (b - a &lt;= 2) return printf(&quot;%d\n&quot;, k + 1), 0; if (k &lt;= a - 1) return printf(&quot;%d\n&quot;, k + 1), 0; else{ ll ans = 1; ans += a - 1; k -= a - 1; ans += (ll)(k &gt;&gt; 1) * (b - a); if (k &amp; 1) ++ans; printf(&quot;%lld\n&quot;, ans); }} D - Ears&#x2003;&#x2003;D&#x9898;&#x5C31;&#x5F00;&#x59CB;&#x6BD4; A, B, C &#x6709;&#x601D;&#x7EF4;&#x5566;&#x3002; &#x2003;&#x2003;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5728;&#x8D70;&#x8DEF;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53EF;&#x4EE5;&#x4E00;&#x76F4;&#x91CD;&#x590D;&#x6765;&#x56DE;&#x8D70;&#x4E00;&#x4E2A;&#x683C;&#x5B50;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4E0D;&#x6539;&#x53D8;&#x683C;&#x5B50;&#x7684;&#x503C;&#x5F97;&#x5947;&#x5076;&#x6027;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4EFB;&#x610F;&#x6539;&#x53D8;&#x4E0A;&#x9762;&#x7684;&#x6570;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x8054;&#x60F3;&#x5230;&#x5947;&#x5076;&#x6027;&#x4EE5;&#x540E;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5C06;&#x8D70;&#x5076;&#x6570;&#x6B21;&#x89C6;&#x4E3A;&#x6CA1;&#x6709;&#x8D70;&#x7684;&#x8BDD;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x8FD9;&#x4E2A;&#x8F68;&#x8FF9;&#x6700;&#x540E;&#x5C31;&#x662F;&#x4E00;&#x6761;&#x76F4;&#x7EBF;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; &#x5076;&#x2014;&#x2014;&#x5947;&#x2014;&#x2014;&#x5076;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x6211;&#x5C31;&#x5F88;&#x5929;&#x771F;&#x5730;&#x5F00;&#x59CB;&#x5199;&#x2014;&#x2014;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x4F8B;&#x6B7B;&#x6D3B;&#x8FC7;&#x4E0D;&#x53BB;&#x3002;&#x597D;&#x5427;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x60F3;&#x8981;&#x67D0;&#x4E2A;&#x683C;&#x5B50;&#x8D70;0&#x6B21;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x4E0D;&#x6EE1;&#x8DB3;&#x4E0A;&#x9762;&#x7684;&#x89C4;&#x5F8B;&#x4E86;&#x2014;&#x2014;&#x56E0;&#x4E3A;0&#x6B21;&#x9700;&#x8981;&#x4E25;&#x683C;&#x5730;&#x4E0D;&#x8D70;&#x3002;&#x6240;&#x4EE5;&#x6574;&#x4E2A;&#x8F68;&#x8FF9;&#x5E94;&#x8BE5;&#x662F; 0&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5947;&#xFF09;&#x2014;&#x2014;&#xFF08;&#x5076;&#xFF09;&#x2014;&#x2014;0&#x3002;&#x5176;&#x4E2D;&#x62EC;&#x53F7;&#x91CC;&#x9762;&#x7684;&#x4EFB;&#x4F55;&#x4E00;&#x9879;&#x90FD;&#x53EF;&#x4EE5;&#x4E0D;&#x5B58;&#x5728;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x5904;&#x5728;&#x90A3;&#x4E00;&#x6BB5;&#xFF0C;&#x76F4;&#x63A5;dp&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; 12345678910111213141516171819202122const int N = 2e5 + 7;const ll INF = 0x3f3f3f3f3f3f3f3f;int n, a[N];ll dp[N][5], ans = INF;int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n); for (int i = 1; i &lt;= n; ++i) read(a[i]); dp[0][1] = dp[0][2] = dp[0][3] = dp[0][4] = INF; for (int i = 1; i &lt;= n; ++i) { dp[i][0] = dp[i - 1][0] + a[i]; dp[i][1] = std::min(dp[i - 1][0], dp[i - 1][1]) + (a[i] ? (a[i] &amp; 1) : 2); dp[i][2] = std::min(std::min(dp[i - 1][1], dp[i - 1][2]), dp[i - 1][0]) + (a[i] &amp; 1 ^ 1); dp[i][3] = std::min(dp[i - 1][2], dp[i - 1][3]) + (a[i] ? (a[i] &amp; 1) : 2); dp[i][4] = std::min(std::min(dp[i - 1][1], dp[i - 1][2]), std::min(dp[i - 1][3], dp[i - 1][4])) + a[i]; } for (int i = 0; i &lt; 5; ++i) SMIN(ans, dp[n][i]); printf(&quot;%lld\n&quot;, ans);} E - Odd Subrectangles&#x2003;&#x2003;&#x6211;&#x4E2A;&#x4EBA;&#x611F;&#x89C9;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x8FD9;&#x4E00;&#x573A;&#x91CC;&#x9762;&#x6700;&#x96BE;&#x7684;&#xFF0C;&#x6BD4;F&#x8FD8;&#x8981;&#x96BE;&#x3002;&#x6211;&#x4E00;&#x5F00;&#x59CB;&#x60F3;dp&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;&#x597D;&#x50CF;&#x4E0D;&#x592A;&#x884C;&#x3002;&#x7136;&#x540E;&#x60F3;&#x4E86;&#x534A;&#x5929;&#x60F3;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x53EA;&#x80FD;&#x770B;&#x4E86;&#x4E00;&#x773C;&#x9898;&#x89E3;&#x7684;&#x524D;&#x51E0;&#x53E5;&#x8BDD;&#x3002;&#x76F4;&#x63A5;&#x628A;&#x90A3;&#x4E24;&#x53E5;&#x8BDD;&#x590D;&#x5236;&#x8FC7;&#x6765;&#x5427;&#x3002; &#x2003;&#x2003;&#x201D;&#x5982;&#x679C;&#x9009;&#x7684;&#x884C;&#x6570;&#x786E;&#x5B9A;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x9009;&#x67D0;&#x4E00;&#x5217;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E5F;&#x4F1A;&#x786E;&#x5B9A;&#x3002;&#x201C;&#x4E3B;&#x8981;get&#x5230;&#x5047;&#x8BBE;&#x9009;&#x7684;&#x884C;&#x5148;&#x786E;&#x5B9A;&#x7684;&#x601D;&#x8DEF;&#x3002; &#x2003;&#x2003;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x63A8;&#xFF0C;&#x90A3;&#x4E48;&#x60F3;&#x8981;&#x8BA9;&#x9009;&#x7684;&#x5217;&#x52A0;&#x8D77;&#x6765;&#x7684;&#x5947;&#x5076;&#x6027;&#x4E3A;&#x5076;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x53EA;&#x80FD;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x548C;&#x662F;&#x5947;&#x6570;&#x5217;&#xFF0C;&#x548C;&#x662F;&#x5076;&#x6570;&#x7684;&#x968F;&#x4FBF;&#x9009;&#x591A;&#x5C11;&#x3002; &#x2003;&#x2003;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x6709; $a$ &#x4E2A;&#x5076;&#x6570;&#x5217;&#xFF0C; $b$ &#x4E2A;&#x5947;&#x6570;&#x5217;&#x3002;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x9009;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F; $&#x4E14;&#x662F;&#x5947;&#x6570;2^a \cdot \sum \limits_{i\leq b\text{&#x4E14;}i&#x662F;&#x5947;&#x6570;}{C_b^{i}} = 2^a \cdot 2^{b-1} = 2^{m-1}$&#x3002;&#x6240;&#x4EE5;&#x4E0D;&#x7BA1;&#x600E;&#x4E48;&#x9009;&#x884C;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x603B;&#x662F; $2^{m-1}$ &#x2014;&#x2014;&#x4F46;&#x662F;&#xFF0C;$b$ &#x5982;&#x679C;&#x662F; $0$ &#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x6CA1;&#x529E;&#x6CD5;&#x9009;&#x5947;&#x6570;&#x4E2A;&#x5947;&#x6570;&#x5217;&#x4E86;&#xFF01;&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x628A;&#x4E00;&#x884C;&#x770B;&#x505A;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x9009;&#x7684;&#x8FD9;&#x4E9B;&#x884C;&#x7684;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x5E94;&#x8BE5;&#x4E3A; $0$&#xFF01; &#x200B; &#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x5C31;&#x662F;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5957;&#x8DEF;&#x4E86;&#x3002;&#x8BC1;&#x660E;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x767E;&#x5EA6;&#xFF0C;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x8FD9;&#x91CC;&#x7ED9;&#x51FA;&#x7ED3;&#x8BBA;&#xFF1A;&#x5982;&#x679C;&#x7EBF;&#x6027;&#x57FA;&#x7684;&#x5927;&#x5C0F;&#x662F;$r$ &#xFF0C;&#x539F;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x4E3A; $n$&#xFF0C;&#x90A3;&#x4E48;&#x5F02;&#x6216;&#x548C;&#x4E0D;&#x4E3A; $0$ &#x7684;&#x65B9;&#x6848;&#x6570;&#x4E3A; $2^n - 2^{n-r}$&#x3002; 12345678910111213141516171819202122232425262728const int N = 300 + 7;const int P = 998244353;int n, m, a[N][N], b[N][N], r;inline int fpow(int x, int y) { int ans = 1; for (; y; y &gt;&gt;= 1, x = (ll)x * x % P) if (y &amp; 1) ans = (ll)ans * x % P; return ans;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif read(n), read(m); for (int i = 1; i &lt;= n; ++i) for (int j = 1; j &lt;= m; ++j) read(a[i][j]); for (int i = 1; i &lt;= n; ++i){ for (int j = 1; j &lt;= m; ++j) if (a[i][j]) if (!b[j][j]) { for (int k = 1; k &lt;= m; ++k) b[j][k] = a[i][k]; ++r; break; } else for (int k = 1; k &lt;= m; ++k) a[i][k] ^= b[j][k]; } printf(&quot;%lld\n&quot;, (ll)fpow(2, m - 1) * (fpow(2, n) + P - fpow(2, n - r)) % P);} F - Pass&#x2003;&#x2003;&#x5BF9;&#x4E8E;&#x95EE;&#x5E8F;&#x5217;&#x7684;&#x65B9;&#x6848;&#x6570;&#x7684;&#x9898;&#x76EE;&#x7684;&#x5957;&#x8DEF;&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x8003;&#x8651;&#x76F4;&#x63A5;&#x6784;&#x9020;&#x5E8F;&#x5217;&#xFF0C;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x9700;&#x8981;&#x6EE1;&#x8DB3;&#x7684;&#x7279;&#x5F81;&#x3002; &#x2003;&#x2003;&#x53D1;&#x73B0;&#x5BF9;&#x4E8E;&#x5E8F;&#x5217;&#x7684;&#x524D; $i$ &#x9879;&#xFF08;$1 \leq i \leq n$ &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x4E0D;&#x5305;&#x62EC;&#x540E; $n$ &#x9879;&#xFF09;&#xFF0C;&#x4ED6;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x7403;&#x4E00;&#x5B9A;&#x53EA;&#x80FD;&#x6765;&#x81EA;&#x524D; $i$ &#x4E2A;&#x4EBA;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x7EA2;&#x7403;&#x548C;&#x84DD;&#x7403;&#x7684;&#x6570;&#x91CF;&#x90FD;&#x6709;&#x4E86;&#x4E0A;&#x9650;&#xFF0C;&#x4E5F;&#x540C;&#x65F6;&#x56E0;&#x4E3A;&#x5BF9;&#x65B9;&#x7684;&#x4E0A;&#x9650;&#x4E5F;&#x6709;&#x4E86;&#x4E0B;&#x9650;&#x3002; &#x2003;&#x2003;&#x8FD9;&#x6837;&#x7684;&#x8BDD;&#x5C31;&#x662F; dp &#x7684;&#x88F8;&#x9898;&#x4E86;&#x3002;&#x8BBE; $dp[i][j]$ &#x8868;&#x793A;&#x524D; $i$ &#x6B65;&#xFF0C;&#x62FF;&#x4E86; $j$ &#x4E2A;&#x84DD;&#x7403;&#x7684;&#x65B9;&#x6848;&#x6570;&#xFF0C;&#x8BA8;&#x8BBA;&#x8FD9;&#x4E00;&#x90E8;&#x62FF;&#x7EA2;&#x7403;&#x8FD8;&#x662F;&#x84DD;&#x7403;&#x8F6C;&#x79FB;&#x4E00;&#x4E0B;&#x5C31;&#x597D;&#x4E86;&#x3002; 12345678910111213141516171819202122232425const int N = 2000 + 7;const int P = 998244353;int n, cntb[N &lt;&lt; 1], dp[N &lt;&lt; 1][N &lt;&lt; 1];char s[N];inline void Inc(int &amp;x, int y) {x += y; x &gt;= P ? x -= P : 0;}int main() { #ifdef hzhkk freopen(&quot;hkk.in&quot;, &quot;r&quot;, stdin); #endif scanf(&quot;%s&quot;, s + 1); n = strlen(s + 1); for (int i = 1; i &lt;= n; ++i) cntb[i] = cntb[i - 1] + s[i] - &apos;0&apos;; for (int i = n + 1; i &lt;= (n &lt;&lt; 1); ++i) cntb[i] = cntb[i - 1]; dp[0][0] = 1; for (int i = 1; i &lt;= (n &lt;&lt; 1); ++i) { for (int j = std::max(cntb[i] - i, 0); j &lt;= std::min(cntb[i], i); ++j) { if (j) dp[i][j] = dp[i - 1][j - 1]; if (i &gt; j) Inc(dp[i][j], dp[i - 1][j]); // dbg(&quot;dp[%d][%d] = %d\n&quot;, i, j, dp[i][j]); } } printf(&quot;%d\n&quot;, dp[n &lt;&lt; 1][cntb[n]]);} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[404]]></title>
    <url>%2F%2F404.html</url>
    <content type="text"><![CDATA[你可能输错了链接。 不然的话，我很好奇啊，你是怎么点进来的？]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[friends]]></title>
    <url>%2Ffriends%2Findex.html</url>
    <content type="text"><![CDATA[同届 OIer Link ForwardFuture fluttersunny 倾尘 学长 Link yanQval zcysky 萧昈黎 HolyK]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[一个正在奋斗的 OIer。 现在就读于江苏省淮阴中学。 是一个只有梦想没有实力的 OIer。 欢迎加各路神仙来指导一下小蒟蒻，将不胜感激。 QQ 号是： 1131938614 别的可能会需要的信息在左边都有了。]]></content>
  </entry>
</search>
